<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Zookeeper安装</title>
      <link href="/2022/12/15/Zookeeper%E5%AE%89%E8%A3%85/"/>
      <url>/2022/12/15/Zookeeper%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-下载安装"><a href="#1-1-下载安装" class="headerlink" title="1.1 下载安装"></a>1.1 下载安装</h2><p><strong>1、环境准备</strong></p><p>ZooKeeper服务器是用Java创建的，它运行在JVM之上。需要安装JDK 7或更高版本。</p><p><strong>2、上传</strong></p><p>将下载的ZooKeeper放到&#x2F;opt&#x2F;ZooKeeper目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">上传zookeeper alt+p</span></span><br><span class="line">put f:/setup/apache-zookeeper-3.5.6-bin.tar.gz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打开 opt目录</span></span><br><span class="line">cd /opt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建zooKeeper目录</span></span><br><span class="line">mkdir  zooKeeper</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将zookeeper安装包移动到 /opt/zooKeeper</span></span><br><span class="line">mv apache-zookeeper-3.5.6-bin.tar.gz /opt/zookeeper/</span><br></pre></td></tr></table></figure><p><strong>3、解压</strong></p><p>将tar包解压到&#x2F;opt&#x2F;zookeeper目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-ZooKeeper-3.5.6-bin.tar.gz </span><br></pre></td></tr></table></figure><h2 id="1-2-配置启动"><a href="#1-2-配置启动" class="headerlink" title="1.2 配置启动"></a>1.2 配置启动</h2><p><strong>1、配置zoo.cfg</strong></p><p>进入到conf目录拷贝一个zoo_sample.cfg并完成配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入到conf目录</span></span><br><span class="line">cd /opt/zooKeeper/apache-zooKeeper-3.5.6-bin/conf/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拷贝</span></span><br><span class="line">cp  zoo_sample.cfg  zoo.cfg</span><br></pre></td></tr></table></figure><p>修改zoo.cfg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打开目录</span></span><br><span class="line">cd /opt/zooKeeper/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建zooKeeper存储目录</span></span><br><span class="line">mkdir  zkdata</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改zoo.cfg</span></span><br><span class="line">vim /opt/zooKeeper/apache-zooKeeper-3.5.6-bin/conf/zoo.cfg</span><br></pre></td></tr></table></figure><p><img src="/../images/dubbo/1577548250377.png" alt="1577548250377"></p><p>修改存储目录：dataDir&#x3D;&#x2F;opt&#x2F;zookeeper&#x2F;zkdata</p><p><strong>2、启动ZooKeeper</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/zooKeeper/apache-zooKeeper-3.5.6-bin/bin/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动</span></span><br><span class="line"> ./zkServer.sh  start</span><br></pre></td></tr></table></figure><p><img src="/../images/dubbo/1577548052037.png" alt="1577548052037"></p><p>看到上图表示ZooKeeper成功启动</p><p><strong>3、查看ZooKeeper状态</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh status</span><br></pre></td></tr></table></figure><p>zookeeper启动成功。standalone代表zk没有搭建集群，现在是单节点</p><p><img src="/../images/dubbo/1577548175232.png" alt="1577548175232"></p><p>zookeeper没有启动</p><p><img src="/../images/dubbo/1577548112773.png" alt="1577548112773"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> Zookeeper </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo 安装</title>
      <link href="/2022/12/15/dubbo-admin%E5%AE%89%E8%A3%85/"/>
      <url>/2022/12/15/dubbo-admin%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="一、dubbo-admin安装"><a href="#一、dubbo-admin安装" class="headerlink" title="一、dubbo-admin安装"></a>一、dubbo-admin安装</h2><p><strong>1、环境准备</strong></p><p>dubbo-admin 是一个前后端分离的项目。前端使用vue，后端使用springboot，安装 dubbo-admin 其实就是部署该项目。我们将dubbo-admin安装到开发环境上。要保证开发环境有jdk，maven，nodejs</p><p>安装node**(如果当前机器已经安装请忽略)**</p><p>因为前端工程是用vue开发的，所以需要安装node.js，node.js中自带了npm，后面我们会通过npm启动</p><p>下载地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://nodejs.org/en/</span><br></pre></td></tr></table></figure><p><img src="/../images/dubbo/1578298201398.png" alt="1578298201398"></p><p><strong>2、下载 Dubbo-Admin</strong></p><p>进入github，搜索dubbo-admin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/apache/dubbo-admin</span><br></pre></td></tr></table></figure><p>下载：</p><p><img src="/../images/dubbo/1578297063167.png" alt="1578297063167"></p><p><strong>3、把下载的zip包解压到指定文件夹(解压到那个文件夹随意)</strong></p><p><img src="/../images/dubbo/1578297477356.png" alt="1578297477356"></p><p><strong>4、修改配置文件</strong></p><p>解压后我们进入…\dubbo-admin-develop\dubbo-admin-server\src\main\resources目录，找到 <strong>application.properties</strong> 配置文件 进行配置修改</p><p><img src="/../images/dubbo/1578297603008.png" alt="1578297603008"></p><p>修改zookeeper地址</p><p><img src="/../images/dubbo/1578297758655.png" alt="1578297758655"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centers <span class="keyword">in</span> dubbo2.7</span></span><br><span class="line">admin.registry.address=zookeeper://192.168.149.135:2181</span><br><span class="line">admin.config-center=zookeeper://192.168.149.135:2181</span><br><span class="line">admin.metadata-report.address=zookeeper://192.168.149.135:2181</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>admin.registry.address注册中心<br>admin.config-center 配置中心<br>admin.metadata-report.address元数据中心</p><p><strong>5、打包项目</strong></p><p>在 dubbo-admin-develop 目录执行打包命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn  clean package</span><br></pre></td></tr></table></figure><p><img src="/../images/dubbo/1578300464726.png" alt="1578300464726"></p><p><strong>6、启动后端</strong></p><p>切换到目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dubbo-Admin-develop\dubbo-admin-distribution\target&gt;</span><br></pre></td></tr></table></figure><p>执行下面的命令启动 dubbo-admin，dubbo-admin后台由SpringBoot构建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\dubbo-admin-0.1.jar</span><br></pre></td></tr></table></figure><p><img src="F:\Dubbo\dubbo\资料../images/dubbo/1578300551892.png" alt="1578300551892"></p><p><strong>7、前台后端</strong></p><p>dubbo-admin-ui 目录下执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="/../images/dubbo/1578300677041.png" alt="1578300677041"></p><p><strong>8、访问</strong></p><p>浏览器输入。用户名密码都是root</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/</span><br></pre></td></tr></table></figure><p><img src="/../images/dubbo/1578300774258.png" alt="1578300774258"></p><h2 id="二、dubbo-admin简单使用"><a href="#二、dubbo-admin简单使用" class="headerlink" title="二、dubbo-admin简单使用"></a>二、dubbo-admin简单使用</h2><p><img src="F:/Dubbo/dubbo/ppt/%E8%AE%B2%E4%B9%89/assets/1573541604032.png" alt="1573541604032"></p><p>注意:Dubbo Admin【服务Mock】【服务统计】将在后续版本发布….</p><p>在上面的步骤中，我们已经进入了Dubbo-Admin的主界面，在【快速入门】章节中，我们定义了服务生产者、和服务消费者，下面我们从Dubbo-Admin管理界面找到这个两个服务</p><p><strong>1、点击服务查询</strong></p><p><img src="F:/Dubbo/dubbo/ppt/%E8%AE%B2%E4%B9%89/assets/1573211549000.png" alt="1573211549000"></p><p><strong>2、查询结果</strong></p><p><img src="/../images/dubbo/1578301528363.png" alt="1578301528363"></p><p>A:输入的查询条件com.itheima.service.UserService</p><p>B:搜索类型，主要分为【按服务名】【按IP地址】【按应用】三种类型查询</p><p>C:搜索结果</p><p><strong>3.1.4 dubo-admin查看详情</strong></p><p>我们查看com.itheima.service.UserService （服务提供者）的具体详细信息，包含【元数据信息】</p><p><strong>1）点击详情</strong></p><p><img src="F:/Dubbo/dubbo/ppt/%E8%AE%B2%E4%B9%89/assets/1573213952863.png" alt="1573213952863"></p><p>从【详情】界面查看，主要分为3个区域</p><p>A区域：主要包含服务端 基础信息比如服务名称、应用名称等</p><p>B区域：主要包含了生产者、消费者一些基本信息</p><p><strong>C区域：是元数据信息，注意看上面的图,元数据信息是空的</strong></p><p>我们需要打开我们的生产者配置文件加入下面配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 元数据配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:metadata-report</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://192.168.149.135:2181&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>重新启动生产者，再次打开Dubbo-Admin</p><p>这样我们的元数据信息就出来了</p><p><img src="/../images/dubbo/1578301892712.png" alt="1578301892712"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java GUI基础</title>
      <link href="/2022/11/29/GUI/"/>
      <url>/2022/11/29/GUI/</url>
      
        <content type="html"><![CDATA[<h1 id="GUI编程"><a href="#GUI编程" class="headerlink" title="GUI编程"></a>GUI编程</h1><p>应该怎么学：</p><ul><li>这是什么？</li><li>他怎么玩？</li><li>该如何去在我们平时运用？</li></ul><p>组件：</p><ul><li>窗口</li><li>弹窗</li><li>面板</li><li>文本框</li><li>列表框</li><li>按钮</li><li>图片</li><li>监听事件</li><li>鼠标</li><li>键盘事件</li><li>外挂</li></ul><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>GUI的核心技术 ： Swing  AWT</p><p>GUI没落的原因：</p><ol><li>界面不美观；</li><li>需要jre环境；</li></ol><p>why to learn?</p><ol><li>写一些自己要用的小工具；</li><li>了解MVC架构，了解监听！</li></ol><h2 id="2-AWT"><a href="#2-AWT" class="headerlink" title="2. AWT"></a>2. AWT</h2><h3 id="2-1-AWT-接受"><a href="#2-1-AWT-接受" class="headerlink" title="2.1 AWT 接受"></a>2.1 AWT 接受</h3><ol><li>包含了很多接口！GUI！</li><li>元素：窗口，按钮，文本框</li><li>java.awt</li></ol><p><img src="/../images/GUI/image-20220108150317002.png" alt="image-20220108150317002"></p><h3 id="2-2-组件和容器"><a href="#2-2-组件和容器" class="headerlink" title="2.2 组件和容器"></a>2.2 组件和容器</h3><h4 id="1-Frame"><a href="#1-Frame" class="headerlink" title="1. Frame"></a>1. Frame</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GUI的第一个界面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Frame,JDK,看源码！</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;我的第一个Java图形界面窗口&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需要设置可见性</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置窗口大小</span></span><br><span class="line">        frame.setSize(<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置背景颜色</span></span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">226</span>, <span class="number">66</span>, <span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//弹出的初始位置</span></span><br><span class="line">        frame.setLocation(<span class="number">200</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置大小固定</span></span><br><span class="line">        frame.setResizable(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/GUI/image-20220108153552527.png" alt="image-20220108153552527"></p><p>发现窗口关不掉，停止代码运行。</p><p>尝试封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFrame2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//展示多个窗口</span></span><br><span class="line">        <span class="type">MyFrame</span> <span class="variable">myFrame1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFrame</span>(<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>,Color.BLUE);</span><br><span class="line">        <span class="type">MyFrame</span> <span class="variable">myFrame2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFrame</span>(<span class="number">400</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>,Color.red);</span><br><span class="line">        <span class="type">MyFrame</span> <span class="variable">myFrame3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFrame</span>(<span class="number">200</span>,<span class="number">400</span>,<span class="number">200</span>,<span class="number">200</span>,Color.yellow);</span><br><span class="line">        <span class="type">MyFrame</span> <span class="variable">myFrame4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFrame</span>(<span class="number">400</span>,<span class="number">400</span>,<span class="number">200</span>,<span class="number">200</span>,Color.orange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//可能存在多个窗口,我们需要一个计数器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFrame</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> w,<span class="type">int</span> h,Color color)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;MyFrame&quot;</span>+(++id));</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(x,y,w,h);<span class="comment">//设置大小和位置</span></span><br><span class="line">        setBackground(color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/GUI/image-20220108154659818.png" alt="image-20220108154659818"></p><h4 id="2-Panel-面板"><a href="#2-Panel-面板" class="headerlink" title="2.  Panel 面板"></a>2.  Panel 面板</h4><p><strong>利用监听，解决了窗口关闭事件！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Panel 可以看成是一个空间，但是不能单独存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPanel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line">        <span class="comment">//布局的概念</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置布局</span></span><br><span class="line">        frame.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//坐标</span></span><br><span class="line">        frame.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">110</span>, <span class="number">19</span>, <span class="number">156</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//panel设置坐标，相对于frame</span></span><br><span class="line">        panel.setBounds(<span class="number">50</span>,<span class="number">50</span>,<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">        panel.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">38</span>, <span class="number">141</span>, <span class="number">141</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//frame.add(panel)</span></span><br><span class="line"></span><br><span class="line">        frame.add(panel);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听事件，监听窗口关闭事件 System.exit(0)</span></span><br><span class="line">        <span class="comment">//适配器模式</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="comment">//窗口点击关闭的时候需要做的事情</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">//结束程序</span></span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/GUI/image-20220108161605723.png" alt="image-20220108161605723"></p><h4 id="3-布局管理器"><a href="#3-布局管理器" class="headerlink" title="3. 布局管理器"></a>3. 布局管理器</h4><ul><li>流式布局</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFlowLayout</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组件-按钮</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button1&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button2&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置为流式布局</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line"></span><br><span class="line">        frame.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把按钮添加上去</span></span><br><span class="line">        frame.add(button1);</span><br><span class="line">        frame.add(button2);</span><br><span class="line">        frame.add(button3);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/GUI/image-20220108184345281.png" alt="image-20220108184345281"></p><ul><li>东南西北中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBorderLayout</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;TestBorderLayout&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">east</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;East&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">west</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;West&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">south</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;South&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">north</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;North&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">center</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;Center&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.add(east,BorderLayout.EAST);</span><br><span class="line">        frame.add(west,BorderLayout.WEST);</span><br><span class="line">        frame.add(south,BorderLayout.SOUTH);</span><br><span class="line">        frame.add(north,BorderLayout.NORTH);</span><br><span class="line">        frame.add(center,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        frame.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/GUI/image-20220108185028399.png" alt="image-20220108185028399"></p><ul><li>表格布局</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGridLayout</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;TestGridLayout&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button2</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn2&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button3</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn3&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button4</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn4&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button5</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn5&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button6</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn6&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        frame.add(button1);</span><br><span class="line">        frame.add(button2);</span><br><span class="line">        frame.add(button3);</span><br><span class="line">        frame.add(button4);</span><br><span class="line">        frame.add(button5);</span><br><span class="line">        frame.add(button6);</span><br><span class="line"></span><br><span class="line">        frame.pack();<span class="comment">//java函数</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/GUI/image-20220108185457560.png" alt="image-20220108185457560"></p><h4 id="4-GUI作业"><a href="#4-GUI作业" class="headerlink" title="4. GUI作业"></a>4. GUI作业</h4><p><img src="/../images/GUI/image-20220109152922766.png" alt="image-20220109152922766"></p><p><img src="/../images/GUI/image-20220109155018773.png" alt="image-20220109155018773"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PracticeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.setSize(<span class="number">500</span>,<span class="number">400</span>);</span><br><span class="line">        frame.setLocation(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setBackground(Color.BLUE);</span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//四个布局</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        p1.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;East-1&quot;</span>),BorderLayout.EAST);</span><br><span class="line">        p1.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;West-1&quot;</span>),BorderLayout.WEST);</span><br><span class="line"></span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;p2-btn-1&quot;</span>));</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;p2-btn-2&quot;</span>));</span><br><span class="line">        p1.add(p2,BorderLayout.CENTER);S</span><br><span class="line"></span><br><span class="line">        p3.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;East-2&quot;</span>),BorderLayout.EAST);</span><br><span class="line">        p3.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;West-2&quot;</span>),BorderLayout.WEST);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            p4.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;btn&quot;</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line">        p3.add(p4,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        frame.add(p1);</span><br><span class="line">        frame.add(p3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><p>Frame是一个顶级窗口</p></li><li><p>Panel无法单独显示，必须添加到某个容器中</p></li><li><p>布局管理器</p><ul><li>流式</li><li>东西南北中</li><li>表格</li></ul></li><li><p>大小，定位，背景颜色，可见性，监听！</p></li></ol><h3 id="2-3-事件监听"><a href="#2-3-事件监听" class="headerlink" title="2.3 事件监听"></a>2.3 事件监听</h3><p>事件监听：当某个事情发生的时候，干什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestActionEvent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//按下按钮，处罚一些事件</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>();</span><br><span class="line">        <span class="comment">//因为addActionListener()需要一个ActionListener说以我们需要构造一个ActionListener</span></span><br><span class="line">        <span class="type">MyActionListener</span> <span class="variable">myActionListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyActionListener</span>();</span><br><span class="line">        button.addActionListener(myActionListener);</span><br><span class="line"></span><br><span class="line">        frame.add(button,BorderLayout.CENTER);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        windowClose(frame);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭窗口事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">windowClose</span><span class="params">(Frame frame)</span>&#123;</span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyActionListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent actionEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个按钮，实现同一个监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAction2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//两个按钮，实现同一个监听</span></span><br><span class="line">        <span class="comment">//开始  停止</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;开始--停止&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;stop&quot;</span>);</span><br><span class="line"></span><br><span class="line">        b2.setActionCommand(<span class="string">&quot;button2-stop&quot;</span>);</span><br><span class="line">        <span class="type">MyMonitor</span> <span class="variable">myMonitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyMonitor</span>();</span><br><span class="line">        b1.addActionListener(myMonitor);</span><br><span class="line">        b2.addActionListener(myMonitor);</span><br><span class="line"></span><br><span class="line">        frame.add(b1,BorderLayout.EAST);</span><br><span class="line">        frame.add(b2,BorderLayout.WEST);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMonitor</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent actionEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;按钮点击了：msg=&gt;&gt;&quot;</span>+ actionEvent.getActionCommand());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-输入框-TextField-监听"><a href="#2-4-输入框-TextField-监听" class="headerlink" title="2.4 输入框 TextField 监听"></a>2.4 输入框 TextField 监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestText01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//启动！</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyFrame</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">TextField</span> <span class="variable">textField</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>();</span><br><span class="line">        add(textField);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听这个文本框输入的文字</span></span><br><span class="line">        <span class="type">MyActionListener2</span> <span class="variable">myActionListener2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyActionListener2</span>();</span><br><span class="line">        <span class="comment">//按下enter就会触发这个输入框事件</span></span><br><span class="line">        textField.addActionListener(myActionListener2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置替换编码</span></span><br><span class="line">        textField.setEchoChar(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        pack();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyActionListener2</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="type">TextField</span> <span class="variable">field</span> <span class="operator">=</span> (TextField) e.getSource();<span class="comment">//获取一些资源，返回的一个对象</span></span><br><span class="line">        System.out.println(field.getText());<span class="comment">//获取文本框文字</span></span><br><span class="line">        field.setText(<span class="string">&quot;&quot;</span>);<span class="comment">//null &quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-简易计算器，组合-内部类回顾复习"><a href="#2-5-简易计算器，组合-内部类回顾复习" class="headerlink" title="2.5 简易计算器，组合+内部类回顾复习"></a>2.5 简易计算器，组合+内部类回顾复习</h3><p>oop原则：组合，大于继承!</p><p>目前的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简易计算器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCalc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calculator</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 3个文本框</span></span><br><span class="line">        <span class="type">TextField</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">10</span>);<span class="comment">//字符数</span></span><br><span class="line">        <span class="type">TextField</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">10</span>);<span class="comment">//字符数</span></span><br><span class="line">        <span class="type">TextField</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">20</span>);<span class="comment">//字符数</span></span><br><span class="line">        <span class="comment">// 1个按钮</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> <span class="title class_">MyCalculatorListener</span>(num1,num2,num3));</span><br><span class="line">        <span class="comment">// 1个标签</span></span><br><span class="line">        <span class="type">Label</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//布局</span></span><br><span class="line">        setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line"></span><br><span class="line">        add(num1);</span><br><span class="line">        add(label);</span><br><span class="line">        add(num2);</span><br><span class="line">        add(button);</span><br><span class="line">        add(num3);</span><br><span class="line"></span><br><span class="line">        pack();</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCalculatorListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取三个变量</span></span><br><span class="line">    <span class="keyword">private</span> TextField num1,num2,num3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCalculatorListener</span><span class="params">(TextField num1,TextField num2,TextField num3)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.num1 = num1;</span><br><span class="line">        <span class="built_in">this</span>.num2 = num2;</span><br><span class="line">        <span class="built_in">this</span>.num3 = num3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent actionEvent)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取加数和被加数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Integer.parseInt(num1.getText());</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> Integer.parseInt(num2.getText());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.将这个值 + 法运算后，放到第三个框</span></span><br><span class="line">        num3.setText(<span class="string">&quot;&quot;</span>+(n1+n2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.清除前三个框</span></span><br><span class="line">        num1.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        num2.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简易计算器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCalc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Calculator</span>().loadFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    TextField num1,num2,num3;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 3个文本框</span></span><br><span class="line">        num1 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">10</span>);<span class="comment">//字符数</span></span><br><span class="line">        num2 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">10</span>);<span class="comment">//字符数</span></span><br><span class="line">        num3 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">20</span>);<span class="comment">//字符数</span></span><br><span class="line">        <span class="comment">// 1个按钮</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> <span class="title class_">MyCalculatorListener</span>(<span class="built_in">this</span>));</span><br><span class="line">        <span class="comment">// 1个标签</span></span><br><span class="line">        <span class="type">Label</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">        <span class="comment">//布局</span></span><br><span class="line">        setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line"></span><br><span class="line">        add(num1);</span><br><span class="line">        add(label);</span><br><span class="line">        add(num2);</span><br><span class="line">        add(button);</span><br><span class="line">        add(num3);</span><br><span class="line"></span><br><span class="line">        pack();</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calculator</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCalculatorListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取计算器这个对象</span></span><br><span class="line">    <span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCalculatorListener</span><span class="params">(Calculator calculator)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.calculator = calculator;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent actionEvent)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取加数和被加数</span></span><br><span class="line">        <span class="comment">//2.将这个值 + 法运算后，放到第三个框</span></span><br><span class="line">        <span class="comment">//3.清除前三个框</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Integer.parseInt(calculator.num1.getText());</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> Integer.parseInt(calculator.num2.getText());</span><br><span class="line">        calculator.num3.setText(<span class="string">&quot;&quot;</span>+(n1+n2));</span><br><span class="line">        calculator.num1.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        calculator.num2.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完全改造为面向对象  &#x2F;&#x2F;内部类           企业级：避免继承和多态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简易计算器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCalc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Calculator</span>().loadFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    TextField num1,num2,num3;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 3个文本框</span></span><br><span class="line">        num1 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">10</span>);<span class="comment">//字符数</span></span><br><span class="line">        num2 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">10</span>);<span class="comment">//字符数</span></span><br><span class="line">        num3 = <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">20</span>);<span class="comment">//字符数</span></span><br><span class="line">        <span class="comment">// 1个按钮</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> <span class="title class_">MyCalculatorListener</span>());</span><br><span class="line">        <span class="comment">// 1个标签</span></span><br><span class="line">        <span class="type">Label</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">        <span class="comment">//布局</span></span><br><span class="line">        setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line"></span><br><span class="line">        add(num1);</span><br><span class="line">        add(label);</span><br><span class="line">        add(num2);</span><br><span class="line">        add(button);</span><br><span class="line">        add(num3);</span><br><span class="line"></span><br><span class="line">        pack();</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听器类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyCalculatorListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent actionEvent)</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取加数和被加数</span></span><br><span class="line">            <span class="comment">//2.将这个值 + 法运算后，放到第三个框</span></span><br><span class="line">            <span class="comment">//3.清除前三个框</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Integer.parseInt(num1.getText());</span><br><span class="line">            <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> Integer.parseInt(num2.getText());</span><br><span class="line">            num3.setText(<span class="string">&quot;&quot;</span>+(n1+n2));</span><br><span class="line">            num1.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            num2.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-7-画笔"><a href="#2-7-画笔" class="headerlink" title="2.7 画笔"></a>2.7 画笔</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPaint</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MyPaint</span>().loadFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPaint</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">600</span>,<span class="number">500</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">        <span class="comment">//画笔，需要有颜色，画笔可以画画</span></span><br><span class="line">        <span class="comment">//g.setColor(Color.BLUE);</span></span><br><span class="line">        g.drawOval(<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">100</span>);<span class="comment">//空心</span></span><br><span class="line">        g.fillOval(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);<span class="comment">//实心</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//g.setColor(Color.GREEN);</span></span><br><span class="line">        g.fillRect(<span class="number">300</span>,<span class="number">300</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//养成习惯，用完之后，还原最初颜色</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-6-鼠标监听"><a href="#2-6-鼠标监听" class="headerlink" title="2.6 鼠标监听"></a>2.6 鼠标监听</h3><p><img src="/../images/GUI/image-20220110211644766.png" alt="image-20220110211644766"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标监听事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMouseListener</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyFrame</span>(<span class="string">&quot;画点&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自己的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="comment">//画画需要画笔，需要监听鼠标当前位置，需要集合来存储这个点</span></span><br><span class="line">    ArrayList points;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFrame</span><span class="params">(String title)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(title);</span><br><span class="line">        setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">400</span>,<span class="number">300</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//存放鼠标点击的点</span></span><br><span class="line">        points = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//鼠标监听器，正对这个窗口</span></span><br><span class="line">        <span class="built_in">this</span>.addMouseListener(<span class="keyword">new</span> <span class="title class_">MyMouseListener</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">        <span class="comment">//画画，监听鼠标事件</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> points.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> (Point) iterator.next();</span><br><span class="line">            g.setColor(Color.BLUE);</span><br><span class="line">            g.fillOval(point.x,point.y,<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加一个点到界面上</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPaint</span><span class="params">(Point point)</span>&#123;</span><br><span class="line">        points.add(point);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyMouseListener</span> <span class="keyword">extends</span> <span class="title class_">MouseAdapter</span>&#123;</span><br><span class="line">        <span class="comment">//鼠标 按下，弹起，按住不放</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mousePressed</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">            <span class="type">MyFrame</span> <span class="variable">frame</span> <span class="operator">=</span> (MyFrame) e.getSource();</span><br><span class="line">            <span class="comment">//这个时候我们点击的时候，就会在界面上产生一个点！</span></span><br><span class="line">            <span class="comment">//这个点就是鼠标的点</span></span><br><span class="line">            frame.addPaint(<span class="keyword">new</span> <span class="title class_">Point</span>(e.getX(),e.getY()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//每次点击鼠标都需要重新画一次</span></span><br><span class="line">            frame.repaint();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-8-窗口监听"><a href="#2-8-窗口监听" class="headerlink" title="2.8 窗口监听"></a>2.8 窗口监听</h3><p>使用静态内部类来创建一个监听器</p><p>原来方法使内部类实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestWindow</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">WindowFrame</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WindowFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        setBackground(Color.blue);</span><br><span class="line">        setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.addWindowListener(</span><br><span class="line">                <span class="comment">//匿名内部类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">                    <span class="comment">//关闭窗口</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;windows closing&quot;</span>);</span><br><span class="line">                        System.exit(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//激活窗口</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowActivated</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                        <span class="type">WindowFrame</span> <span class="variable">source</span> <span class="operator">=</span> (WindowFrame) e.getSource();</span><br><span class="line">                        source.setTitle(<span class="string">&quot;被激活了&quot;</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;windows activated&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-9-键盘监听事件"><a href="#2-9-键盘监听事件" class="headerlink" title="2.9 键盘监听事件"></a>2.9 键盘监听事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">//键盘监听</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestKeyListener</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">KeyFrame</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KeyFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KeyFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        setBounds(<span class="number">1</span>,<span class="number">2</span>,<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.addKeyListener(<span class="keyword">new</span> <span class="title class_">KeyAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">//获取键盘侠的键是哪一个，当前的码</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">keyCode</span> <span class="operator">=</span> e.getKeyCode();<span class="comment">//不需要去记录这个数值，直接使用静态属性 VK_XX</span></span><br><span class="line">                <span class="keyword">if</span>(keyCode == KeyEvent.VK_UP)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;你按下了上键&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-Swing"><a href="#3-Swing" class="headerlink" title="3. Swing"></a>3. Swing</h2><h3 id="3-1-窗体"><a href="#3-1-窗体" class="headerlink" title="3.1 窗体"></a>3.1 窗体</h3><p>JFrame是继承了Frame，并且添加了一些方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JFrameDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//init();初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//顶级窗口</span></span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;这是一个JFrame窗口&quot;</span>);</span><br><span class="line">        jf.setVisible(<span class="literal">true</span>);</span><br><span class="line">        jf.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        jf.setBackground(Color.BLUE);</span><br><span class="line">        <span class="comment">//设置文字</span></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;欢迎来到Java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        jf.add(label);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭事件</span></span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//建一个窗口</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JFrameDemo</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>颜色是添加在容器上的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JFrameDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyJFrame2</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyJFrame2</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setBounds(<span class="number">10</span>,<span class="number">10</span>,<span class="number">200</span>,<span class="number">300</span>);</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;欢迎来到java&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.add(label);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让文本居中</span></span><br><span class="line">        label.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得一个容器</span></span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line">        container.setBackground(Color.BLUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-弹窗"><a href="#3-2-弹窗" class="headerlink" title="3.2 弹窗"></a>3.2 弹窗</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DialogDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DialogDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">700</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JFrame 放东西 容器</span></span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line">        <span class="comment">//绝对布局</span></span><br><span class="line">        container.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按钮</span></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;点击弹出一个对话框&quot;</span>);<span class="comment">//创建</span></span><br><span class="line">        button.setBounds(<span class="number">30</span>,<span class="number">30</span>,<span class="number">200</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//点击这个按钮，弹出一个弹窗</span></span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> <span class="title class_">AbstractAction</span>() &#123;<span class="comment">//监听器</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent actionEvent)</span> &#123;</span><br><span class="line">                <span class="comment">//弹窗</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">MyDialogDemo</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        container.add(button);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DialogDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹窗的窗口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDialogDemo</span> <span class="keyword">extends</span> <span class="title class_">JDialog</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDialogDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="comment">//this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line">        container.setLayout(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;java yyds&quot;</span>);</span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;欢迎来到java&quot;</span>);</span><br><span class="line">        label.setBounds(<span class="number">20</span>,<span class="number">20</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        container.add(label);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-标签"><a href="#3-3-标签" class="headerlink" title="3.3 标签"></a>3.3 标签</h3><p>无图像</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IconDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">Icon</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> height;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IconDemo</span><span class="params">()</span>&#123;&#125;<span class="comment">//无参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IconDemo</span><span class="params">(<span class="type">int</span> width,<span class="type">int</span> height)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">IconDemo</span> <span class="variable">iconDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IconDemo</span>(<span class="number">15</span>,<span class="number">15</span>);</span><br><span class="line">        <span class="comment">//图标放在标签上，也可以放在按钮上</span></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;iconTest&quot;</span>, iconDemo, SwingConstants.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">        container.add(label);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setBounds(<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">IconDemo</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paintIcon</span><span class="params">(Component component, Graphics graphics, <span class="type">int</span> i, <span class="type">int</span> i1)</span> &#123;</span><br><span class="line">        graphics.fillOval(i,i1,width,height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIconWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIconHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/GUI/image-20220111232901401.png" alt="image-20220111232901401"></p><p>有图有真相 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageIconDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImageIconDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取图片的地址</span></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;ImageIcon&quot;</span>);</span><br><span class="line">        <span class="comment">//通过在调用类的getResource方法，来直接拿类下的文件地址</span></span><br><span class="line">        <span class="comment">//URL是地址</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> ImageIconDemo.class.getResource(<span class="string">&quot;java.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ImageIcon</span> <span class="variable">imageIcon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(url);</span><br><span class="line">        label.setIcon(imageIcon);<span class="comment">//把图像放在标签中</span></span><br><span class="line">        label.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">        container.add(label);</span><br><span class="line"></span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ImageIconDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/GUI/image-20220111233755409.png" alt="image-20220111233755409"></p><h3 id="3-4-画板"><a href="#3-4-画板" class="headerlink" title="3.4  画板"></a>3.4  画板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JPanelDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JPanelDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        container.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>));<span class="comment">//后两个参数的意思，间距‘</span></span><br><span class="line"></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">panel1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">panel2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">panel3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">panel4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        panel1.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        panel1.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        panel1.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        panel2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">        panel2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">        panel3.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;3&quot;</span>));</span><br><span class="line">        panel3.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;3&quot;</span>));</span><br><span class="line">        panel4.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;4&quot;</span>));</span><br><span class="line">        panel4.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;4&quot;</span>));</span><br><span class="line">        panel4.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;4&quot;</span>));</span><br><span class="line">        panel4.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;4&quot;</span>));</span><br><span class="line">        panel4.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;4&quot;</span>));</span><br><span class="line">        panel4.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;4&quot;</span>));</span><br><span class="line"></span><br><span class="line">        container.add(panel1);</span><br><span class="line">        container.add(panel2);</span><br><span class="line">        container.add(panel3);</span><br><span class="line">        container.add(panel4);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JPanelDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/GUI/image-20220111235949533.png" alt="image-20220111235949533"></p><p>JScroll 下拉条</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JScrollDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JScrollDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文本域</span></span><br><span class="line">        <span class="type">JTextArea</span> <span class="variable">textArea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="number">20</span>,<span class="number">50</span>);</span><br><span class="line">        textArea.setText(<span class="string">&quot;hello java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Scroll面板</span></span><br><span class="line">        <span class="type">JScrollPane</span> <span class="variable">scrollPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(textArea);</span><br><span class="line">        container.add(scrollPane);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">350</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JScrollDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/GUI/image-20220112000418734.png" alt="image-20220112000418734"></p><h3 id="3-5-按钮"><a href="#3-5-按钮" class="headerlink" title="3.5 按钮"></a>3.5 按钮</h3><h4 id="1-图片按钮"><a href="#1-图片按钮" class="headerlink" title="1.图片按钮"></a>1.图片按钮</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson5;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JButtonDemo1</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JButtonDemo1</span><span class="params">()</span>  &#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line">        <span class="comment">//将一个图片变为图标</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> JButtonDemo1.class.getResource(<span class="string">&quot;java.jpg&quot;</span>);</span><br><span class="line">        <span class="type">Icon</span> <span class="variable">icon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把这个图片放在按钮上</span></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">        button.setIcon(icon);</span><br><span class="line">        button.setToolTipText(<span class="string">&quot;图片按钮&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add</span></span><br><span class="line">        container.add(button);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JButtonDemo1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-单选按钮"><a href="#2-单选按钮" class="headerlink" title="2. 单选按钮"></a>2. 单选按钮</h4><p><img src="/../images/GUI/image-20220112090938722.png" alt="image-20220112090938722"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson5;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JButtonDemo1</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JButtonDemo1</span><span class="params">()</span>  &#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line">        <span class="comment">//将一个图片变为图标</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> JButtonDemo1.class.getResource(<span class="string">&quot;java.jpg&quot;</span>);</span><br><span class="line">        <span class="type">Icon</span> <span class="variable">icon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把这个图片放在按钮上</span></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">        button.setIcon(icon);</span><br><span class="line">        button.setToolTipText(<span class="string">&quot;图片按钮&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add</span></span><br><span class="line">        container.add(button);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JButtonDemo1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-多选按钮"><a href="#3-多选按钮" class="headerlink" title="3. 多选按钮"></a>3. 多选按钮</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JButtonDemo3</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JButtonDemo3</span><span class="params">()</span>  &#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//多选框</span></span><br><span class="line">        <span class="type">JCheckBox</span> <span class="variable">checkBox1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBox</span>(<span class="string">&quot;checkBox1&quot;</span>);</span><br><span class="line">        <span class="type">JCheckBox</span> <span class="variable">checkBox2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBox</span>(<span class="string">&quot;checkBox2&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//add</span></span><br><span class="line">        container.add(checkBox1,BorderLayout.SOUTH);</span><br><span class="line">        container.add(checkBox2,BorderLayout.NORTH);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JButtonDemo3</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-列表"><a href="#3-6-列表" class="headerlink" title="3.6 列表"></a>3.6 列表</h3><h4 id="1-下拉框"><a href="#1-下拉框" class="headerlink" title="1.下拉框"></a>1.下拉框</h4><p><img src="/../images/GUI/image-20220112162411637.png" alt="image-20220112162411637"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestComboboxDemo1</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestComboboxDemo1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        <span class="type">JComboBox</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JComboBox</span>();</span><br><span class="line"></span><br><span class="line">        status.addItem(<span class="literal">null</span>);</span><br><span class="line">        status.addItem(<span class="string">&quot;正在热映&quot;</span>);</span><br><span class="line">        status.addItem(<span class="string">&quot;已下架&quot;</span>);</span><br><span class="line">        status.addItem(<span class="string">&quot;即将上映&quot;</span>);</span><br><span class="line"></span><br><span class="line">        container.add(status);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestComboboxDemo1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-列表框"><a href="#2-列表框" class="headerlink" title="2.列表框"></a>2.列表框</h4><p><img src="/../images/GUI/image-20220112163222675.png" alt="image-20220112163222675"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestComboboxDemo2</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestComboboxDemo2</span><span class="params">()</span>  &#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成列表内容</span></span><br><span class="line">        <span class="comment">//String[] contents = &#123;&quot;1&quot;,&quot;2&quot;,&quot;3&quot;&#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Vector</span> <span class="variable">contents</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vector</span>();</span><br><span class="line">        <span class="comment">//列表中需要存放内容</span></span><br><span class="line">        <span class="type">JList</span> <span class="variable">jList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JList</span>(contents);</span><br><span class="line"></span><br><span class="line">        contents.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        contents.add(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        contents.add(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line"></span><br><span class="line">        container.add(jList);</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestComboboxDemo2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-7-文本框"><a href="#3-7-文本框" class="headerlink" title="3.7 文本框"></a>3.7 文本框</h3><h4 id="1-文本框"><a href="#1-文本框" class="headerlink" title="1. 文本框"></a>1. 文本框</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTextDemo1</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestTextDemo1</span><span class="params">()</span>  &#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        <span class="type">JTextField</span> <span class="variable">textField</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="type">JTextField</span> <span class="variable">textField2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="string">&quot;word&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        container.add(textField,BorderLayout.NORTH);</span><br><span class="line">        container.add(textField2,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">500</span>,<span class="number">350</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestTextDemo1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-密码框"><a href="#2-密码框" class="headerlink" title="2. 密码框"></a>2. 密码框</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTextDemo2</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestTextDemo2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        <span class="type">JPasswordField</span> <span class="variable">passwordField</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPasswordField</span>();<span class="comment">//***</span></span><br><span class="line">        passwordField.setEchoChar(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        container.add(passwordField);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestTextDemo2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-文本域"><a href="#3-文本域" class="headerlink" title="3. 文本域"></a>3. 文本域</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JScrollDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JScrollDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="built_in">this</span>.getContentPane();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文本域</span></span><br><span class="line">        <span class="type">JTextArea</span> <span class="variable">textArea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="number">20</span>,<span class="number">50</span>);</span><br><span class="line">        textArea.setText(<span class="string">&quot;hello java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Scroll面板</span></span><br><span class="line">        <span class="type">JScrollPane</span> <span class="variable">scrollPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(textArea);</span><br><span class="line">        container.add(scrollPane);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">350</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JScrollDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="贪吃蛇"><a href="#贪吃蛇" class="headerlink" title="贪吃蛇"></a>贪吃蛇</h2><p>帧，如果时间片足够小，就是动画，一秒30帧，60帧，连起来就是动画，拆开就是静态的图片。</p><p>键盘监听</p><p>定时器 Timer</p><hr><p>总结</p><p><img src="/../images/GUI/image-20220113004446800.png" alt="image-20220113004446800"></p><h2 id="西建大JavaGUI实验"><a href="#西建大JavaGUI实验" class="headerlink" title="西建大JavaGUI实验"></a>西建大JavaGUI实验</h2><p>一、 实验目的</p><p>掌握Swing包中常用的组件使用方法。熟悉布局管理器的适用场合，掌握事件处理机制。</p><p>二、 实验性质</p><p>设计性</p><p>三、 实验内容</p><p>编写一个对输入的英文单词按照字典排序的程序，界面如图，当在一个文本域输入若干个英文字单词，单击字典排序按钮，另一个文本域 对输入的英文单词进行排序；当按清空按钮，另一个文本区域的内容同时清空。要求通过Swing组件完成本程序的编写。</p><p><img src="/../images/GUI/wps1.jpg" alt="img"> </p><p>要求写注释，生成JavaDoc</p><h3 id="问题分解，（画出程序类图）"><a href="#问题分解，（画出程序类图）" class="headerlink" title="问题分解，（画出程序类图）"></a>问题分解，（画出程序类图）</h3><p>IDEA生成的类图：</p><p><img src="/../images/GUI/wps2.jpg" alt="img"> </p><p><img src="/../images/GUI/wps3.jpg" alt="img"> </p><h3 id="给出程序源码"><a href="#给出程序源码" class="headerlink" title="给出程序源码"></a>给出程序源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Experiment04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SortWord</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SortWord</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">    JTextArea start;</span><br><span class="line">    JTextArea end;</span><br><span class="line">    JSplitPane pane;</span><br><span class="line">    JButton b1;</span><br><span class="line">    JButton b2;</span><br><span class="line">    JPanel p1;</span><br><span class="line">    JPanel p2;</span><br><span class="line">    JPanel p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SortWord</span><span class="params">()</span> &#123;</span><br><span class="line">        setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">350</span>,<span class="number">300</span>);</span><br><span class="line">        start = <span class="keyword">new</span> <span class="title class_">JTextArea</span>();</span><br><span class="line">        end = <span class="keyword">new</span> <span class="title class_">JTextArea</span>();</span><br><span class="line">        b1 = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;字典排序&quot;</span>);</span><br><span class="line">        b2 = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;清空&quot;</span>);</span><br><span class="line">        p1 = <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">        p2 = <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">        p = <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">        p1.add(b1);</span><br><span class="line">        p2.add(b2);</span><br><span class="line">        p.add(p1,BorderLayout.EAST);</span><br><span class="line">        p.add(p2, BorderLayout.WEST);</span><br><span class="line">        <span class="built_in">this</span>.add(p,BorderLayout.SOUTH);</span><br><span class="line">        pane = <span class="keyword">new</span> <span class="title class_">JSplitPane</span>(JSplitPane.HORIZONTAL_SPLIT,start,end);</span><br><span class="line">        pane.setDividerLocation(<span class="number">200</span>);</span><br><span class="line">        add(pane,BorderLayout.CENTER);</span><br><span class="line">        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);</span><br><span class="line">        validate();</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        b1.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        b2.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.getSource() == b1) &#123; <span class="comment">//字典排序</span></span><br><span class="line">            sort();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getSource() == b2) &#123; <span class="comment">//清除</span></span><br><span class="line">            start.setText(<span class="literal">null</span>);</span><br><span class="line">            end.setText(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>, flag=<span class="number">0</span>;</span><br><span class="line">        end.setText(<span class="literal">null</span>);</span><br><span class="line">        String temp=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        String[] words=<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">10000</span>];</span><br><span class="line">        String str=start.getText();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)&#123;<span class="comment">//获取整行</span></span><br><span class="line">            <span class="keyword">if</span>((str.charAt(i)==<span class="string">&#x27;\n&#x27;</span>||str.charAt(i)==<span class="string">&#x27; &#x27;</span>)&amp;&amp;!temp.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">                words[cnt++]=temp;</span><br><span class="line">                temp=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!(str.charAt(i)==<span class="string">&#x27;\n&#x27;</span>)&amp;&amp;!(str.charAt(i)==<span class="string">&#x27; &#x27;</span>))&#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                temp+=str.charAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">            words[cnt++]=temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;cnt;j++)</span><br><span class="line">                <span class="keyword">if</span>(words[i].compareTo(words[j])&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">t</span> <span class="operator">=</span> words[i];</span><br><span class="line">                    words[i] = words[j];</span><br><span class="line">                    words[j] = t;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">            end.append(words[i]+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/../images/GUI/wps6.jpg" alt="img"></p><h3 id="实验小结"><a href="#实验小结" class="headerlink" title="实验小结"></a>实验小结</h3><ol><li><p>对程序流程的控制进行了练习。</p></li><li><p>练习了Java GUI的操作，使用了 Swing包下的JTextArea ，JButton ，JPanel ，JSplitPane 。</p></li><li><p>练习了Java 面向对象中的继承。</p></li><li><p>练习了接口的实现，重写方法。重写监听器ActionListener 的方法actionPerformed。</p></li><li><p>练习了字典排序算法。</p></li><li><p>练习了程序的编写和代码的调试，以及优化。</p></li><li><p>熟悉了idea的开发使用。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gui </tag>
            
            <tag> JAVA </tag>
            
            <tag> javaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2022/11/24/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/11/24/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库总结"><a href="#数据库总结" class="headerlink" title="数据库总结"></a>数据库总结</h1><h2 id="一、绪论（Introduction）"><a href="#一、绪论（Introduction）" class="headerlink" title="一、绪论（Introduction）"></a>一、绪论（Introduction）</h2><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/1.png" alt="img"></p><p>数据库系统由数据库、数据库管理系统、应用系统和数据库管理员组成</p><p>数据管理的三个阶段：</p><ol><li>人工管理系统</li><li>文件系统阶段</li><li>数据库系统阶段</li></ol><p>数据库结构特点：</p><ul><li>数据结构化</li><li>数据共享性高、冗余度低且易拓展</li><li>数据独立性高</li><li>数据有数据库管理系统统一管理和控制</li></ul><h3 id="1、数据库基本概念"><a href="#1、数据库基本概念" class="headerlink" title="1、数据库基本概念"></a>1、数据库基本概念</h3><p>数据库的四个基本概念：</p><blockquote><ol><li>数据 data</li><li>数据库 DataBase DB </li><li>数据库管理系统 DataBase Management System DBMS</li><li>数据库系统 DataBase System DBS</li></ol></blockquote><h4 id="1-1、数据"><a href="#1-1、数据" class="headerlink" title="1.1、数据"></a>1.1、数据</h4><ul><li>描述事物的符号 （数据的定义）</li><li>数据库中存储的基本对象</li><li>数字、文字、图形、声音、语言等多种表现形式</li><li>数据符号 + 语义→→数据、</li></ul><h4 id="1-2、数据库"><a href="#1-2、数据库" class="headerlink" title="1.2、数据库"></a>1.2、数据库</h4><ul><li>存储在计算机内、有组织、可共享的数据集合 </li><li>DB数据，按一定的数据模型组织、描述和存储 </li><li>数据冗余度小，数据独立性和扩展性高</li></ul><h4 id="1-3、DBS"><a href="#1-3、DBS" class="headerlink" title="1.3、DBS"></a>1.3、DBS</h4><p>DBS的组成部分：</p><ul><li>硬件：计算机（磁盘→ 数据库&#x2F;DB&#x2F;磁盘文件）</li><li>软件：数据库管理系统（DBMS）、数据库应用系统（DBAS）</li><li>个人：数据库管理员（DBA）、数据库用户</li></ul><p>DBS的软件框架：</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221124164403423.png" alt="image-20221124164403423"></p><p><strong>DBS逻辑结构</strong>：</p><p><code>三级模式、两级映射</code></p><p>三级模式：用户模式（外模式 视图view）、逻辑模式（模式 表table）、存储模式（内模式 磁盘文件）、</p><ul><li>用户模式：外模式 –&gt; view</li><li>逻辑模式：模式 –&gt;table</li><li>wu里模式：内模式 –&gt;disk file</li></ul><p>模式描述的是数据的全局逻辑结构，外模式描述的是数据的局部逻辑结构。</p><p>两级映射与数据独立性：</p><ul><li><p>外模式&#x2F;模式映射1：n</p><p>模式改变，由DBA调整各外模式&#x2F;模式映像， 可使外模式不变，支撑应用程序不修改， 保证数据与程序的逻辑独立性。</p></li><li><p>模式&#x2F;内模式映射1：1</p><p>数据库的存储结构改变，由DBA调整模式&#x2F;内模式映像，可使模式不变， 且无需修改应用程序，保证数据与程序的物理独立性。</p></li></ul><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221124165236961.png" alt="image-20221124165236961"></p><p>系统结构：</p><ul><li><p>Centralization(集中式)结构 </p><ul><li>DB物理上，在一个局域网中</li></ul></li><li><p>Distribution(分布式)结构 </p><ul><li>DB物理上或逻辑上，分布在不同的网络中 <ul><li>Client&#x2F;Server 结构 </li><li>Browser&#x2F;Server 结构 </li><li>Parallel (并行)结构</li></ul></li></ul></li></ul><h5 id="如何构建数据库？"><a href="#如何构建数据库？" class="headerlink" title="如何构建数据库？"></a><strong>如何构建数据库？</strong></h5><p>数据模型：对现实世界的一种抽象。是数据库系统的核心和基础。</p><p>分类：</p><ol><li>概念模型</li><li>逻辑模型和物理模型</li></ol><p><strong>概念模型包括</strong>：实体、属性、键、实体型等。表示方法E-R图</p><p><strong>数据模型分类</strong>：</p><p>• Network data model &#x2F; 网状模型</p><p>• Hierarchical data model &#x2F; 层次模型 </p><p><strong>• Relational data model &#x2F; 关系模型</strong> </p><p>• Object-Relational data model &#x2F;对象关系模型</p><p>关系数据库系统对层次&#x2F;网状数据库系统的重大改进是：</p><ul><li>形成了较为完善的数据库理论</li><li>将逐一记录的操作改进为支持记录集合的操作</li><li>消除了由用户建立指针的弊端</li></ul><h5 id="数据模型Data-Model"><a href="#数据模型Data-Model" class="headerlink" title="数据模型Data Model"></a>数据模型Data Model</h5><hr><p> Network data model &#x2F; 网状模型</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221124170638360.png" alt="image-20221124170638360"></p><p>Hierarchical data model &#x2F; 层次模型</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221124170722311.png" alt="image-20221124170722311"></p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221124170746048.png" alt="image-20221124170746048"></p><p><strong>Relational data model &#x2F; 关系模型</strong></p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221124170850121.png" alt="image-20221124170850121"></p><p>Object-Relational data model &#x2F;对象关系模型</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221124170910372.png" alt="image-20221124170910372"></p><h4 id="1-4、DBMS"><a href="#1-4、DBMS" class="headerlink" title="1.4、DBMS"></a>1.4、DBMS</h4><p>数据管理系统，位于用户程序 与 操作系统之间 (专用)软件 。</p><p>功能：（四大主要方面） </p><ul><li>数据定义—建库、建表、创建用户等。用DDL表达 </li><li>数据操纵—插入数据、修改和删除数据等。用DML表达 </li><li>DB运行管理—数据使用者及其使用权限管理等。用DCL表达 </li><li>DB建立和维护—数据库备份、回复等</li></ul><p>DBMS的功能实施，用SQL(Structure Query Language)语言发指令 。</p><p>➢ Data Define Language（DDL） </p><p>➢ Data Management Language（DML） </p><p>➢ Data Control Language（DCL）</p><h4 id="1-5、总结概念和属性"><a href="#1-5、总结概念和属性" class="headerlink" title="1.5、总结概念和属性"></a>1.5、总结概念和属性</h4><p>DBMS一次可以管理多个数据库。<br>▪ 在大型DBMS中，一个DB存储在一个DISK文件中。<br>▪ 许多表与结合在一个数据库中。<br>▪ 在RDB中，一个属性必须是非结构化数据。<br>▪ 磁盘文件。<br>▪ 数据库。<br>▪ 表、实体、关系<br>▪ 行、记录、元组<br>▪ 列、字段、属性</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221124171203610.png" alt="image-20221124171203610"></p><blockquote><p>对于一个表：</p><ul><li>整个表称为表、实体、关系。</li><li>表中的每一行行称为行、记录、元组。</li><li>表中的每一列称为列、字段、属性。</li></ul></blockquote><p><strong>第一范式</strong>：</p><p>在关系模型中，表的列必须包含</p><ul><li>单个值</li><li>非结构化值</li></ul><p>不满足第一范式的案例：</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221124171445138.png" alt="image-20221124171445138"></p><h4 id="1-6、一些结构"><a href="#1-6、一些结构" class="headerlink" title="1.6、一些结构"></a>1.6、一些结构</h4><p>数据模型的组件：<br>▪ 数据结构<br>▪ 数据操作<br>▪ 数据的约束条件</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221124171810521.png" alt="image-20221124171810521"></p><h3 id="2、数据库用户"><a href="#2、数据库用户" class="headerlink" title="2、数据库用户"></a>2、数据库用户</h3><ol><li><p>最终用户<br>➢ Naive Users (Use Menu interface 常规用户). </p><p>➢ Casual Users (Compose SQL 偶然用户).</p></li><li><p>应用程序程序员<br>➢ （编写菜单和应用程序）</p></li><li><p>数据库管理员<br>➢ （DBA——管理DBMS、DB和DBAS）。</p></li></ol><h3 id="3、关系数据库概览"><a href="#3、关系数据库概览" class="headerlink" title="3、关系数据库概览"></a>3、关系数据库概览</h3><p>CAP数据库（小型电商数据库）</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221124172138663.png" alt="image-20221124172138663"></p><p>用到的表:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Customers (cid, cname, city, discnt)</span><br><span class="line">Agents (aid, aname, city, percent)</span><br><span class="line">Products (pid, pname, city, quantity, price)</span><br><span class="line">Orders (ordno, month, cid, aid, pid, qty, dollars)</span><br></pre></td></tr></table></figure><p>Nomenclature (terms,术语): </p><p>➢ Tables &#x2F; Relations 表&#x2F;关系</p><p>➢ Columns &#x2F; Fields &#x2F;Attributes 列&#x2F;字段&#x2F;属性</p><p>➢ Rows &#x2F; Tuples 行&#x2F;元组</p><p>Eg. In CAP database （案例）</p><p>◆ products (pid, pname, city, quantity, price) </p><p>​➢ Product — Table &#x2F; Relation </p><p>​➢ pid — column &#x2F; field &#x2F; attribute</p><p>​ ➢ (p01, pencil, Xi’an, 100, 0.2) — rows &#x2F; records &#x2F; tuples</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221124172513928.png" alt="image-20221124172513928"></p><h2 id="二、关系数据库-（The-Relational-Model）"><a href="#二、关系数据库-（The-Relational-Model）" class="headerlink" title="二、关系数据库 （The Relational Model）"></a>二、关系数据库 （The Relational Model）</h2><blockquote><ul><li>关系概念</li><li>关系概述</li></ul></blockquote><h3 id="1、-CAP-实例数据库"><a href="#1、-CAP-实例数据库" class="headerlink" title="1、 CAP 实例数据库"></a>1、 CAP 实例数据库</h3><p>笛卡尔积：</p><p>▪ Cartesian Product : 设S1,···,Sn为集合,它们的笛卡尔积为 S1 × S2 × ··· × Sn &#x3D; { (e1, e2 , ···, en) | ei∈Si, i&#x3D;1,···,n } </p><p>​➢ Element (e1,e2, ···,en) called a n-tuple (n元组) </p><p>​➢ Value “ei” in the element called a 分量 </p><p>◼ Relation: S1×S2×···×Sn的子集，称为关系 记成 R &#x3D; S1×S2×···×Sn </p><p>◼ Example1: CP &#x3D; CID × CNAME × CITY × DISCNT 其中有 T1&#x3D;(c003, Allied, Dallas, 8.00) T2&#x3D;(c001,Basice, Oshkosh, 18.20) </p><p>◼ Example2: Family &#x3D; women × men × child not all the tuples consist of a real exist family</p><h3 id="2、数据库系统组成"><a href="#2、数据库系统组成" class="headerlink" title="2、数据库系统组成"></a>2、数据库系统组成</h3><p>Note：R &#x3D; S1×S2×···×Sn </p><p>▪ R—关系名 </p><p>▪ n—关系的目或度(degree). n&#x3D;1 一元关系，n&#x3D;2 二元关系 </p><p>▪ 每列单独命名—Attribute&#x2F;Field&#x2F;Column，n元关系有n个列 </p><p>▪ 若某属性组的值能唯一标识关系R中的一个Tuple&#x2F;Record&#x2F;Row，则该属性组 为Candidate Key。 仅当R中所有列构成的属性组才是它的候选码时，称该码 为All-Key(全码)。 </p><p>▪ 若R有多个Candidate Key（候选键），选包含属性较少的做Primary Key(主码)，候选码中 的诸属性为Prime Attribute(主属性)。Non Key Attribute(非码属性)。</p><p>▪ Example：orders&#x3D;{ ordno, month, cid, aid, pid, qty, dollars }</p><h3 id="3、关系规则"><a href="#3、关系规则" class="headerlink" title="3、关系规则"></a>3、关系规则</h3><p>关系模型应该遵循怎样的标准？</p><p><strong>规则1.第一范式规则。</strong><br>◆ 在关系模型中，它不能</p><ol><li><p>多值字段和 </p></li><li><p>结构化字段</p></li></ol><p>◆ 示例：</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221125170859025.png" alt="image-20221125170859025"></p><p>✓ 解决方案1：使用新列更新表以适应重复项在不同的列上<br>✓ 解决方案2：创建两个表并在以后的查询中连接它们</p><p><strong>规则2.仅按内容访问行。</strong><br>▪ 解释：不能说“从顶部往下第三排”。（行或列没有顺序）<br>▪ 行标识：不允许对行使用“指针或行ID”。（大多数RDBMS通过按RID获取行来打破这一规则）<br><strong>规则3.唯一行。</strong><br>▪ 2行不能在所有属性中都相同</p><h3 id="4、-键、超键及空值"><a href="#4、-键、超键及空值" class="headerlink" title="4、 键、超键及空值"></a>4、 键、超键及空值</h3><p>[1] table key 键<br>又称候选密钥唯一标识所在行的属性组</p><p>[2]super key 超级键<br>用于标识唯一元组的字段组的值。<br>如果不一定，最小字段组将变为超级键。</p><p>[4] 每个表T至少有一个键。</p><p>[5] <strong>primary key 主键</strong><br>表T的主键是由DBA唯一标识T中的行。<br>因此，表关键字&#x3D;&#x3D;候选关键字➔➔ 超级密钥&#x3D;&#x3D;主键</p><p>[6] Null值<br>当特定的值未知或尚未定义。</p><h3 id="5、关系代数"><a href="#5、关系代数" class="headerlink" title="5、关系代数"></a>5、关系代数</h3><p>Relational Algebra (关系代数)</p><p> ➢ 简写RA. 任何RDBMS上, 对数据查询的数学表达式 (一种代数语言).</p><p>一些概念（废话）</p><p> • 现实世界中的各种实体、实体间的各种联系均用关系模型表示</p><p> • 关系模型由“关系数据结构、关系操作集合、关系完整性约束”组成</p><p> • 借助于集合代数等数学概念和方法来处理数据库中的数据</p><p><strong>两种类型的RA操作</strong>: </p><p>▪ 集合论（Set Theoretic） (depend on fact that table is a set of rows) 4种 </p><p>​◆ 交、并、差、笛卡尔积 intersection, union, difference, cardinality product </p><p>▪ 传统操作（Native operations ）(depend on structure of tables) 4种 </p><p>​◆ 选择、投影、连接、除 selection, projection, join, division</p><h3 id="6、-集合论操作"><a href="#6、-集合论操作" class="headerlink" title="6、 集合论操作"></a>6、 集合论操作</h3><ol><li>Compatible Table (相容表) 如果两个表具有相同的模式，则称它们是兼容的。</li><li>Set Theoretic Operations: R &amp; S are two compatible tables</li></ol><p>​➢ Intersection（交）：结果为n元关系，由属于R也属于S的元组组成 R ∩ S&#x3D;{ t | t∈R ∧ t∈S } </p><p>​➢ Union（并）：结果为n元关系，由属于R或属于S的元组组成 R∪S&#x3D;{ t | t∈R ∨ t∈S } </p><p>​➢ Difference（差）：结果为n元关系，由属于R而不属于S的元组组成 R - S &#x3D; { t | t∈R ∧ t ∉ S } ➢ Extended Cartesian Product (广义笛卡尔积): R 与 S 可不相容，结果为 m+n列关系，共有m × n个元组 R × S &#x3D; { tr~ts | tr∈R ∧ ts∈S }</p><p>案例：</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221125173134521.png" alt="image-20221125173134521"></p><p>笛卡尔积是集合的合并。</p><ol start="3"><li>Assignment（赋值） &amp; Alias（别名）</li></ol><p>▪ Assignment, Alias:  S(B1, . . ., Bn) :&#x3D; R(A1, . . ., An) 赋值</p><p>▪ Alias: want a different table names with same attributes S :&#x3D; R 别名</p><p>▪ Save intermediate results（可以用来保存中间结果） T :&#x3D; (R ∩ S) - (R ∞ S) or T1 :&#x3D; (R ∩ S) T2 :&#x3D; (R∞S) T :&#x3D; T1 - T2</p><h3 id="7、传统关系操作"><a href="#7、传统关系操作" class="headerlink" title="7、传统关系操作"></a>7、传统关系操作</h3><ol><li>The Projection 投影</li></ol><p>[1]Projection: Head(R) &#x3D; A1, . . . , An T :&#x3D; R[Aj, . . . , Ak] </p><p>▪ T是R的子集，是R的部分列。、</p><p>▪ 参考书：R中选出若干属性组成新关系，从“列”角度操作.</p><p>𝝅𝑨 (𝑹) &#x3D; {𝒕 [𝑨] 𝒕𝝐𝑹} </p><p>[2]案例: List all customer names from the customers.</p><p>​CN :&#x3D; CUSTOMERS [CNAME] </p><p>&#96;</p><ol start="2"><li>The Selection 选择</li></ol><p>[1] Selection: Head(R) &#x3D; A1, . . . , An  R where C </p><p>C是一个逻辑条件，可以从单行C的值中确定。 </p><p>​✓Ai a Aj : where a is a constant with “ &lt;, &gt;, &#x3D;, &lt;&#x3D;, &gt;&#x3D;, &lt;&gt; ”</p><p>​✓C also can be withed form : C and C’, C or C’, not C </p><p>​✓字符数据比较：左边起第一个不相同字符的ASCII码比较。 </p><p>▪ 参考书：从R中选择满足给定条件的元组。 “行”角度的运算, F为选择条件式. 也称限制(Restriction). 𝝈𝑭 (𝑹) &#x3D; {𝒕|𝒕𝝐𝑹 ⋀ 𝑭(𝒕) &#x3D; 𝒕𝒓𝒖𝒆}</p><p>[2] 案例: Find all the products stored in Dallas that cost more than $0.50 </p><p>​PRODUCTS where city &#x3D; ‘Dallas’ and price &gt;&#x3D; 0.5 </p><p>​𝝈𝒄𝒊𝒕𝒚&#x3D; ′𝑫𝒂𝒍𝒍𝒂𝒔 ′ 𝒂𝒏𝒅 𝒑𝒓𝒊𝒄𝒆&gt;&#x3D;𝟎.𝟓 (𝑷𝒓𝒐𝒅𝒖𝒄𝒕)</p><ol start="3"><li>The Join</li></ol><p>[1]Join：R×S中,以“R关系在A属性组的值”与“S在B属 性组的值”比较，挑出满足“ tr[A] θ ts[B]”的元组. </p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221125180415487.png" alt="image-20221125180415487"></p><p>特1：Equijoin , 选A、B属性组中值相等的元组构成新关系。 </p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221125180458011.png" alt="image-20221125180458011"></p><p>特2：Natural Join , 等值连接的基础上把重复列去掉 </p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221125180506122.png" alt="image-20221125180506122"></p><p>【综上有】： Cartesian Product ⊃ Join ⊃ Equijoin ⊃ Natural Join</p><p>[2]另一说法： Cardinality Product、Equijoin、Natural Join区别 </p><pre><code> 1) 自然连接 一定是等值连接，但等值连接不一定是自然连接。  2) 等值连接 分量值相等，不一定是公共属性；而自然连接 要求相等的 分量须是公共属性(相容). 3) 自然连接 两个关系中做比较的分量须是相同的属性组，且连接结果 中要去掉重复的属性列。 </code></pre><p>[3]案例：</p><p> Join与其它运算间的关系： R、S两个表没有公共列时 R∞S &#x3D; R×S </p><p>​R、S两个表的列完全一致时 R∞S &#x3D; R∩S</p><p>[4]案例： We wish to find the names of customers who have ordered product p01. </p><p>过程：</p><p>​T1:&#x3D; CUSTOMER ∞ ORDER </p><p>​T2:&#x3D; CUSTOMER ∞ (ORDER where pid &#x3D; ‘p01’ ) </p><p>​CP01:&#x3D;T2[cname] </p><p>简化：</p><p>​CP01 :&#x3D; ( CUSTOMER ∞ (ORDER where pid &#x3D; ‘p01’) ) [cname]</p><ol start="5"><li>关系运算的优先级</li></ol><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221125181146970.png" alt="image-20221125181146970"></p><ol start="5"><li>The Division Operation 除</li></ol><p>Division: </p><p>Consider two tables R and S<img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221125181427400.png" alt="image-20221125181427400"></p><p>▪ 象集WX (R)：关系R(X, Y)中当tr[X] &#x3D;x1时，x1在R中的象集为R[X]上 值为x1的诸元组, 在Y属性值的子集. </p><p>▪ S上的投影： 𝑾𝑿(𝑹) &#x3D; {𝒕𝒓 [𝒀] |𝒕𝒓 ∈ 𝑹, 𝒕𝒓 [𝑿] &#x3D; 𝒙𝟏} 𝝅𝒀(𝑺) &#x3D; 𝑺[𝒀]<img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221125182046169.png" alt="image-20221125182046169"></p><p>[3] 案例：We want to extract (select) the customers who have placed orders for all products that ordered by C006.我们希望提取（选择）买了C006顾客订购的所有产品下订单的客</p><p>a) Products that ordered by customer C006        PC6 :&#x3D; ( ORDERS where cid &#x3D; ‘C006’ ) [ pid ] （已下单的订单号）</p><p>b) All Order Projection:       CP :&#x3D; ORDERS [cid, pid] 所有的订单（顾客号，订单号）</p><p>c) who have placed orders for all products that ordered by C006.     T :&#x3D; CP ÷ PC6 →→ T[cid]</p><h3 id="8、关系操作实例"><a href="#8、关系操作实例" class="headerlink" title="8、关系操作实例"></a>8、关系操作实例</h3><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221125183028244.png" alt="image-20221125183028244"></p><h2 id="三、关系数据库标准语言SQL（Basic-SQL-Query-Language）"><a href="#三、关系数据库标准语言SQL（Basic-SQL-Query-Language）" class="headerlink" title="三、关系数据库标准语言SQL（Basic SQL Query Language）"></a>三、关系数据库标准语言SQL（Basic SQL Query Language）</h2><p>主线：</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127143130651.png" alt="image-20221127143130651"></p><p>⚫ 如何从关系模型中实现关系数据库？<br>⚫ 如何使用数据库中的数据？<br>⚫ 如何将关系代数转换为计算机可以执行的指令？</p><blockquote><p>使用 <strong>SQL</strong> (Structured Query Language): 结构化查询语言</p></blockquote><h3 id="1、SQL-语言概述"><a href="#1、SQL-语言概述" class="headerlink" title="1、SQL 语言概述"></a>1、SQL 语言概述</h3><h4 id="历史："><a href="#历史：" class="headerlink" title="历史："></a>历史：</h4><p>➢ SQL —- Structured Query Language </p><p>➢ 1986年，ANSI (American National Standard Institute) 的数据库委员会 批准SQL作为”关系数据库语言的美国标准” </p><p>➢ 1989年，ANSI 与 ISO (International Standard Origination) 联合完善后， 颁布了SQL_89国际标准 </p><p>➢ 后面公布的SQL:1999增加对Object-Relation Model的支持 </p><p>➢ 最新的SQL:2011支持XML </p><p>➢ 现多数RDBMS均支持SQL标准 </p><ul><li>✓ Oracle 、DB2 、Informix、Sybase、 SQL Server </li><li>✓ 开源数据库：如PostgreSQL、MySQL、NoSQL </li><li>✓ 甚至小型产品：如Access</li></ul><h4 id="SQL的分类和功能："><a href="#SQL的分类和功能：" class="headerlink" title="SQL的分类和功能："></a>SQL的分类和功能：</h4><p>分类：</p><ul><li>DDL: Data Define Language （数据定义语言）</li><li>DML: Data Manipulate Language （数据操纵语言）</li><li>DCL: Data Control Language （数据控制语言）</li></ul><p>功能：</p><ol><li>综合统一</li><li>高度非过程化</li><li>面向集合的操作方式</li><li>SQL以同一种语法方式提供两种使用方式</li><li>语言简洁，易学易用</li></ol><h3 id="2、建立数据库"><a href="#2、建立数据库" class="headerlink" title="2、建立数据库"></a>2、建立数据库</h3><h4 id="预先知识："><a href="#预先知识：" class="headerlink" title="预先知识："></a>预先知识：</h4><p>[1]交互式SQL：启动Oracle &#x2F;SQL Plus 、启动MySQL &#x2F;Workbench 或第三方数据库管理工具Navicat、SQL developer 登录DBMS ；界面下发出SQL指令。 </p><p>[2] Login with DBMS must have following things </p><ul><li>An account&#x2F;user_id on DBMS </li><li>A password</li></ul><p>[3] 创建数据库、连接数据库、创建数据表 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据库：</span><br><span class="line"><span class="keyword">CREATE</span> SCHEMA db_xauat ; </span><br><span class="line"># 连接数据库：</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">TO</span> db_xauat ; </span><br><span class="line"># 创建数据表：</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> myui (uid <span class="type">char</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span>, pass <span class="type">char</span>(<span class="number">8</span>), <span class="keyword">primary</span> key (uid) );</span><br></pre></td></tr></table></figure><p> [4] SQL语句 (ORACLE&#x2F;MySQL中的SQL句结束符为“;”) </p><ul><li>DDL: eg. Create scheme, Create table</li><li>DCL: eg. Grant, Revoke </li><li>DML: eg. Select, Insert, Update, Delete</li></ul><h4 id="CREATE-TABLE-语句"><a href="#CREATE-TABLE-语句" class="headerlink" title="CREATE TABLE 语句"></a>CREATE TABLE 语句</h4><p>➢ [ ] the optional term &#x2F; 可选 </p><p>➢ | select one term from many &#x2F; 多选一 </p><p>➢ {} the optional and repeat term &#x2F;可选且可复选 </p><p>➢ ALL the Default term</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tablename (colname datatype [ <span class="keyword">not</span> <span class="keyword">null</span> ]</span><br><span class="line">&#123; , colname datatype [ <span class="keyword">not</span> <span class="keyword">null</span> ] … &#125;</span><br><span class="line">[ , <span class="keyword">PRIMARY</span> KEY ( colname &#123; , colname … &#125; ) ])</span><br><span class="line">参考：<span class="keyword">create</span> <span class="keyword">table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>(<span class="operator">&lt;</span>列名<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>[列级完整性约束]</span><br><span class="line">&#123;，<span class="operator">&lt;</span>列名<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>[列级完整性约束]…&#125;</span><br><span class="line">[，<span class="operator">&lt;</span>表级完整性约束<span class="operator">&gt;</span>]）；</span><br></pre></td></tr></table></figure><ul><li>若完整性约束条件涉及该表的多列，则须定义为表级约束 </li><li>Datatype中需指明“类型、长度”，DBMS产品支持的Datatype不完全相同</li></ul><p>Example 1: Create tables of Customers, Agents, Products and Orders for CAP DB</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> customers (</span><br><span class="line">cid <span class="type">char</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line">cname <span class="type">varchar</span>(<span class="number">13</span>), </span><br><span class="line">city <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">discnt <span class="type">real</span>, </span><br><span class="line"><span class="keyword">primary</span> key (cid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> agents (</span><br><span class="line">aid <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line">aname <span class="type">varchar</span>(<span class="number">13</span>), </span><br><span class="line">city <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">percent</span> <span class="type">smallint</span>, </span><br><span class="line"><span class="keyword">primary</span> key (aid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> products (</span><br><span class="line">pid <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line">pname <span class="type">varchar</span>(<span class="number">13</span>), </span><br><span class="line">city <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">quantity <span class="type">integer</span>, </span><br><span class="line">price <span class="type">double precision</span>, </span><br><span class="line"><span class="keyword">primary</span> key (pid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> orders (</span><br><span class="line">ordno <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line"><span class="keyword">month</span> <span class="type">char</span>(<span class="number">3</span>), </span><br><span class="line">cid <span class="type">char</span>(<span class="number">4</span>),</span><br><span class="line">aid <span class="type">char</span>(<span class="number">3</span>), </span><br><span class="line">pid <span class="type">char</span>(<span class="number">3</span>), </span><br><span class="line">qty <span class="type">integer</span>, </span><br><span class="line">dollars <span class="type">double precision</span>,</span><br><span class="line"><span class="keyword">primary</span> key (ordno), # 主键</span><br><span class="line"><span class="keyword">foreign</span> key(aid) <span class="keyword">references</span> agents(aid), # 外键</span><br><span class="line"><span class="keyword">foreign</span> key(cid) <span class="keyword">references</span> customers(cid),</span><br><span class="line"><span class="keyword">foreign</span> key(pid) <span class="keyword">references</span> products(pid) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3、简单-Select-句"><a href="#3、简单-Select-句" class="headerlink" title="3、简单 Select 句"></a>3、简单 Select 句</h3><p>如何查询数据库中的数据？</p><h4 id="SELECT-语法"><a href="#SELECT-语法" class="headerlink" title="SELECT 语法"></a>SELECT 语法</h4><p>[1] 句式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> [ <span class="keyword">all</span>∣<span class="keyword">distinct</span> ] <span class="operator">&lt;</span>目标列表达式<span class="operator">&gt;</span> [<span class="operator">&lt;</span>目标列表达式<span class="operator">&gt;</span>]…</span><br><span class="line"><span class="keyword">From</span> <span class="operator">&lt;</span>表名或视图名<span class="operator">&gt;</span>[，<span class="operator">&lt;</span>表名或视图名<span class="operator">&gt;</span>]…</span><br><span class="line"><span class="keyword">Where</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">Group</span> <span class="keyword">by</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span> [ <span class="keyword">Having</span><span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]</span><br><span class="line"><span class="keyword">Order</span> <span class="keyword">by</span> <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span> [ <span class="keyword">ASC</span>∣<span class="keyword">DESC</span> ]；</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>[2] Select含义(功能)： </p><ul><li>依where子句的表达式，从from子句指定的表&#x2F;视图中，找满足条件的元组；</li><li>按Select目标列选出元组中的属性，形成查询结果集；</li><li>结果集按Group指出的列，相同值分为一组；满足Having条件的结果组输出；</li><li>输出的结果组，按Order指定的列值排序显示；ASC为升序，DESC为降序。</li></ul><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127151431918.png" alt="image-20221127151431918"></p><p>[4] Select与Relational Algebra（关系表达式）的关系 </p><ul><li>from子句 &lt;&#x3D;&#x3D;&#x3D;&gt; Rel. Alg.中的“Relation” </li><li>where子句 &lt;&#x3D;&#x3D;&#x3D;&gt; Rel. Alg.中的“Selection”运算 </li><li>select子句 &lt;&#x3D;&#x3D;&#x3D;&gt; Rel. Alg.中的“Projection”运算 </li><li>group子句：查询结果集按“列 i ”值分组，值相同的元组排在一组 </li><li>group子句带having短语：满足having条件的结果组才输出. </li><li>order by子句，查询结果还应按“列 j ”值排序.</li></ul><h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><p>Example 1. We wish to find the aids and names of agents that are based in New York . （找到驻纽约的代理人的name和aid）</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127151827663.png" alt="image-20221127151827663"></p><p>Example 2. Display all values in every row of the customer.(显示客户每行中的所有值)</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127154001065.png" alt="image-20221127154001065"></p><p>Example 3. Select all pids for which orders are placed.(选择所有订单的pid)</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127154140192.png" alt="image-20221127154140192"></p><p>Example 4. Retrieve all (cname, aname) pairs where the customer places an order through the agent.（检索客户通过代理下单的所有（cname、aname））</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127154251379.png" alt="image-20221127154251379"></p><p>Example 5. Retrieve a table based on orders, with columns ordno, cid, aid, pid, and profit on order. Where the “profit” is calculated from “quantity and price of the product sold(sell) by subtracting(except) 60% for whole sale cost, the discount for the customer and the percent commission for the agent.</p><p>（根据订单检索表，列为ordno、cid、，aid、pid和profit 。如果“利润”是根据“数量和销售产品的价格减去整个销售成本的60%，客户的折扣和代理商的佣金百分比）</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127154612320.png" alt="image-20221127154612320"></p><p>Example 6.  List all pairs of cids based in the same city.</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127154651181.png" alt="image-20221127154651181"></p><p>Example 7. Get cids who order a product for which an order is also placed by agent a06. (找cids，它们订购的产品，a06也卖给过别人)</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127154729994.png" alt="image-20221127154729994"></p><h3 id="4、子查询、谓词"><a href="#4、子查询、谓词" class="headerlink" title="4、子查询、谓词"></a>4、子查询、谓词</h3><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><ul><li>选择语句出现在另一个选择条件中。</li><li>使用带有TRUE或FALSE的谓词和逻辑条件。</li></ul><p>Example 1. Retrieve cids of customers who place orders with agents in Duluth or Dallas. （检索向Duluth或Dallas代理商下单的客户的cid。）</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127155233563.png" alt="image-20221127155233563"></p><p>Example 2. Retrieve information of agents based in Duluth or Dallas（检索Duluth或Dallas代理商的信息）</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127155508931.png" alt="image-20221127155508931"></p><p>注意<strong>in</strong>的使用：</p><p>in用来比较一个元素是不是在这个集合中。</p><hr><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>[1] Uncorrelated Subquery（不相关子查询）<br>可以预先计算内部SQL语句（内部子查询完全独立于外部子查询）</p><p>[2] Correlated Subquery（相关子查询）<br>无法预先计算内循环；因为子查询使用来自外部Select的数据。</p><p>Example 1. (Correlated Subquery) Find cnames who order product p05.（相关子查询）查找订购产品p05的cnames。</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127160220512.png" alt="image-20221127160220512"></p><p>Example 2.  (Uncorrelated Subquery) Get cnames who order product p07 from agent a03.（不相关子查询）获取从代理a03订购产品p07的cnames。</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127160402745.png" alt="image-20221127160402745"></p><p>Example 2.  Retrieve ordno for all orders placed by customers in Duluth through agents in New York.（检索Duluth客户通过纽约代理商下达的所有订单的订单号。）</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127160654460.png" alt="image-20221127160654460"></p><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>[1] Select statement is nonprocedural </p><p>[2] in predicate: expr [NOT] in (Subquery) | expr [NOT] in (val1{ , val2…})</p><h4 id="Quantified-Comparison-Predicate-量化比较谓词"><a href="#Quantified-Comparison-Predicate-量化比较谓词" class="headerlink" title="Quantified Comparison Predicate 量化比较谓词"></a>Quantified Comparison Predicate 量化比较谓词</h4><p>[1] Comparison Predicates 比较位次</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127161147003.png" alt="image-20221127161147003"></p><p>that “some” and “any” mean same thing.</p><p>Example 1.  Find all customers who have the same discount as that of any of the customers in Dallas or Boston.查找与Dallas or Boston的任何客户享有相同折扣的所有客户。</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127161734576.png" alt="image-20221127161734576"></p><p>Example 2. Get cid of customers with discnt smaller than discnt of any customer who lives in Duluth. 获取比居住在Duluth的任何客户的折扣率都小的顾客的cid。</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127162312651.png" alt="image-20221127162312651"></p><h4 id="等效关系："><a href="#等效关系：" class="headerlink" title="等效关系："></a>等效关系：</h4><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127162434199.png" alt="image-20221127162434199"></p><h4 id="EXISTS-谓词"><a href="#EXISTS-谓词" class="headerlink" title="EXISTS 谓词"></a>EXISTS 谓词</h4><p>[1] Exists predicate: [NOT] EXIST (Subquery) </p><p>EXIST(subquery) is true &lt;&#x3D;&#x3D;&gt; subquery is a non-empty set </p><p>NOT EXIST(subquery) is true &lt;&#x3D;&#x3D;&gt; subquery is an empty set </p><p>[2] Example 1. Find cnames who place an order through a05.</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127162733332.png" alt="image-20221127162733332"></p><p>Example 2. Retrieve all customer names where the customer does not place an order through ‘a05’.</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127163118003.png" alt="image-20221127163118003"></p><h3 id="5、UNION-操作及-ALL-条件"><a href="#5、UNION-操作及-ALL-条件" class="headerlink" title="5、UNION 操作及 ALL 条件"></a>5、UNION 操作及 ALL 条件</h3><h4 id="UNION运算符"><a href="#UNION运算符" class="headerlink" title="UNION运算符"></a>UNION运算符</h4><p>[1] Union syntax : Subquery UNION [ALL] Subquery</p><p>[2]Example 1. We wish to list of cities where either a customer or an agent, or both, is based. </p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127163340478.png" alt="image-20221127163340478"></p><h4 id="Division除法"><a href="#Division除法" class="headerlink" title="Division除法"></a>Division除法</h4><p>SQL “for all…” Conditions(全称量词) </p><p>[1] Example 1. Find cids of customers who place orders with ALL agents based in New York. （找cids，他的订单全都是New York的agents销售的）</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127163715452.png" alt="image-20221127163715452"></p><p>Example 2. Get the aids of agents in New York or Duluth who place orders for all products costing more than a dollar. (找New York或Duluth的aids，他们销售所有单价&gt;1美元的产品) </p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127163951055.png" alt="image-20221127163951055"></p><h3 id="6、SQL-高级语法"><a href="#6、SQL-高级语法" class="headerlink" title="6、SQL 高级语法"></a>6、SQL 高级语法</h3><h4 id="UNION、INTERSECT、EXCEPT"><a href="#UNION、INTERSECT、EXCEPT" class="headerlink" title="UNION、INTERSECT、EXCEPT"></a>UNION、INTERSECT、EXCEPT</h4><p>[1] form subquery {UNION [ALL] | INTERSECT [ALL] | EXCEPT [ALL] subquery} </p><p>[2] Example 1. Find cids who order both products p01 and p07.</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127164616343.png" alt="image-20221127164616343"></p><p>Example 2.  Retrieve all cnames where the customer don’t place any order through agent a05.（未通过代理a05下单的所有cname）</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127164707768.png" alt="image-20221127164707768"></p><h4 id="JOIN-IN"><a href="#JOIN-IN" class="headerlink" title="JOIN IN"></a>JOIN IN</h4><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127165438956.png" alt="image-20221127165438956"></p><p>Example 1. Retrieve all cnames where the customer places at least two orders for the same product. 检索客户至少为同一产品下两个订单的所有cname。</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127165546819.png" alt="image-20221127165546819"></p><p>Example1. Retrieve all customers who has buy at least one product costing less than $0.50. </p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127165751321.png" alt="image-20221127165751321"></p><h4 id="Outer-Join"><a href="#Outer-Join" class="headerlink" title="Outer Join"></a>Outer Join</h4><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221127165923586.png" alt="image-20221127165923586"></p><h3 id="7、集函数"><a href="#7、集函数" class="headerlink" title="7、集函数"></a>7、集函数</h3><p>[1] Set Functions</p><p> ▪ Five types : count, max, min, sum, avg</p><p> ▪ Operate on sets of values, return a single value对多组值进行操作，返回单个值</p><p>[2] sql语法</p><p>Select <code>SET_functionName</code> ([ ALL | DISTINCT ] colname) from….. </p><p>Select COUNT(*) from……</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221128183942856.png" alt="image-20221128183942856"></p><p>Example 1. Please to determine the total quantity of product p03 that has been ordered.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(qty) <span class="keyword">as</span> TOTAL <span class="keyword">from</span> orders <span class="keyword">where</span> pid <span class="operator">=</span> <span class="string">&#x27;p03‘;</span></span><br></pre></td></tr></table></figure><p>Example 2. Get number of cities where customers are based. select count (distinct city) from customers;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span> (<span class="keyword">distinct</span> city) <span class="keyword">from</span> customers;</span><br></pre></td></tr></table></figure><p>Comparing: </p><p>select count(* ) from customers;      &#x2F;* all the numbers of rows  *&#x2F;</p><p>select count(cid) from customers;    &#x2F;* null values not counted *&#x2F; </p><p>​  &#x2F;* cid not null in customers *&#x2F;</p><p>select count(city) from customers;  &#x2F;* only if no null city values*&#x2F;</p><p>[3]限制:规定集合函数不允许出现与WHERE子句不兼容的情况</p><p>Example 3. List the cids who have a discount less than maximum discount.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#Invalid <span class="keyword">SQL</span>:错误</span><br><span class="line"><span class="keyword">select</span> cid <span class="keyword">from</span> customers <span class="keyword">where</span> discnt <span class="operator">&lt;</span> <span class="built_in">max</span>(discnt);</span><br><span class="line">#Effective <span class="keyword">SQL</span>:正确</span><br><span class="line"><span class="keyword">select</span> cid <span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">where</span> discnt <span class="operator">&lt;</span> (<span class="keyword">select</span> <span class="built_in">max</span>(discnt) <span class="keyword">from</span> customers);</span><br></pre></td></tr></table></figure><p>Example 4. Find products ordered by at least two customers.查找至少两个客户订购的产品。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> pid <span class="keyword">from</span> products <span class="keyword">where</span> <span class="number">2</span> <span class="operator">&lt;=</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> cid)…)</span><br></pre></td></tr></table></figure><p>[4] 处理null</p><p>▪ null is a special constant(常数) </p><p>▪ meaningful a value that is UNKNOWN</p><p>Example 5.  After adding a row (c007, Windix, Dallas, null) to the customers table, Pose the query to retrieve this row.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">SQL</span> effective有效</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customers <span class="keyword">where</span> discnt <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line">#won’t be retrieve非法</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customers <span class="keyword">where</span> discnt<span class="operator">&lt;=</span><span class="number">10</span> <span class="keyword">and</span> discnt<span class="operator">&gt;</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>Example 6. After adding the row (c007,Windix,Dallas,null) to customers table. We wish to find the average discount of all customers.</p><p>a) the null is discarded（抛弃，排除） </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(discnt) <span class="keyword">from</span> customers; </span><br></pre></td></tr></table></figure><p>b) A set function acting on a empty set </p><p>▪ count() returns zero for a empty set. </p><p>▪ sum(), avg(), max() and min() return the null value.</p><h3 id="8、分组GROUP"><a href="#8、分组GROUP" class="headerlink" title="8、分组GROUP"></a>8、分组GROUP</h3><p>如何将数据分类到不同的组中？</p><h4 id="GROUP、HAVING语法"><a href="#GROUP、HAVING语法" class="headerlink" title="GROUP、HAVING语法"></a>GROUP、HAVING语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>] &#123;<span class="operator">*</span><span class="operator">|</span>expr [[<span class="keyword">AS</span>] c_alias]&#123;,expr [[<span class="keyword">AS</span>] c_alias]...&#125;&#125;</span><br><span class="line"><span class="keyword">FROM</span> tableref &#123;, tabletrf...&#125;</span><br><span class="line">[<span class="keyword">WHERE</span> search_condition]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">column</span> &#123;, column...&#125; ]</span><br><span class="line">[<span class="keyword">HAVING</span> search_condition]</span><br><span class="line"><span class="operator">|</span> subquery <span class="keyword">UNION</span> [<span class="keyword">ALL</span>] <span class="operator">|</span> <span class="keyword">INTERSECT</span> [<span class="keyword">ALL</span>] <span class="operator">|</span> <span class="keyword">EXCEPT</span> [<span class="keyword">ALL</span>]</span><br><span class="line">[<span class="keyword">CORRESPONDING</span> [<span class="keyword">BY</span>] (colname &#123;, colname . . .&#125;)] subquery</span><br></pre></td></tr></table></figure><p>Example 1. Let’s create a query to calculate the total product quantity ordered of each individual product by each individual customer. (查订单中每个(pid, cid)对的订货数 ).</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> pid, cid, <span class="built_in">sum</span>(qty) <span class="keyword">as</span> TOTAL <span class="keyword">from</span> orders <span class="keyword">group</span> <span class="keyword">by</span> pid, cid;</span><br></pre></td></tr></table></figure><p>Example 2. Print out the aname, aid, pname, pid together with the total quantity each agent supplies of that product to customers c002 and c003.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> aname, a.aid, pname, p.pid, <span class="built_in">sum</span>(qty) <span class="keyword">as</span> total_qty</span><br><span class="line"><span class="keyword">from</span> agent a, products p, orders x</span><br><span class="line"><span class="keyword">where</span> x.cid <span class="keyword">in</span> (‘c002’,’c003’) <span class="keyword">and</span> x.aid<span class="operator">=</span>a.aid <span class="keyword">and</span> x.pid<span class="operator">=</span>p.pid</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> aid, pid;</span><br></pre></td></tr></table></figure><p>Example 4. Provided pids purchased by (sell to) at least two customers.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> pid <span class="keyword">from</span> orders <span class="keyword">group</span> <span class="keyword">by</span> pid <span class="keyword">having</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> cid) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>Example 4. Pose a query to find the average, over all agents, of the maximum dollar sales made by each agent.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(t.x) <span class="keyword">from</span> (<span class="keyword">select</span> aid, <span class="built_in">max</span>(dollars) <span class="keyword">as</span> x <span class="keyword">from</span> orders <span class="keyword">group</span> <span class="keyword">by</span> aid) t;</span><br></pre></td></tr></table></figure><h3 id="9、完整-Select-句"><a href="#9、完整-Select-句" class="headerlink" title="9、完整 Select 句"></a>9、完整 Select 句</h3><ol><li>做Select语句的实验<br>a） FROM子句中所有表的笛卡尔积都已形成。<br>b） 消除WHERE条件中不满足的行(消去&#x2F;限制).<br>c） 重排行按照GROUP BY分组。<br>d） 然后消除不满足HAVING子句的组。<br>e） 计算Select Clause目标列表的表达式。<br>f） 如果存在关键字DISTINCT，则消除重复的行。这个UNION、INTERSECT、EXCEPT在每个子查询之后执行。<br>g） 如果存在ORDER BY，则对所有选定行的集合进行排序。</li></ol><p>Example 1. List all customers, agents and the dollar sales for pairs of customers and agents, and order the result from largest to smallest sales totals. Retain only those pairs for which the dollar amount is at least 900.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c.cname, c.cid, a.aname, a.aid, <span class="built_in">sum</span>(o.dollars) <span class="keyword">as</span> casales</span><br><span class="line"><span class="keyword">from</span> customers c, orders o, agents a</span><br><span class="line"><span class="keyword">where</span> c.cid <span class="operator">=</span> o.cid <span class="keyword">and</span> o.aid <span class="operator">=</span> a.aid</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> (c.cname,) c.cid, (a.aname,) a.aid</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">sum</span>(o.dollars) <span class="operator">&gt;=</span> <span class="number">900.00</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="number">5</span> <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>Expressions, Predicates, Search_condition</li></ol><p>[1] expressions form expr &#x3D; num-expr | strv-expr | date-xpr | intv-expr | con-dexpr</p><p>[2] Data Types </p><p>▪ numeric value expressions </p><p>▪ string value expression </p><p>▪ datetime expression </p><p>▪ interval value expression</p><p> ▪ conditional expression</p><p>[3] Mathematical functions</p><p> abs(n), mod(n,b), sqrt(n). NOT standardized in SQL-99. </p><p>[4] Char &amp; string functions</p><ul><li>CHAR_LENGTH (str) </li><li>SUBSTRING (str FROM start [FOR length]) </li><li>TRIM ([[LEADING|TRAILING|BOTH] [set] FROM] str) </li><li>POSITION (str1 IN str2) </li><li>UPPER(strval), LOWER(strval)</li></ul><p>[5] TRUTH VALUES </p><p>▪ TRUE, FALSE or UNKNOW (‘U’ is not equivalent to F)</p><p>[6] Predicates </p><p>a) Comparison predicate: expr1 { expr2 | expr1 (Subquery)} </p><p>b) Between predicate: c.discnt between 10 and 12 </p><p>c) In predicate: expr [not] in (subquery) </p><p>d) Quantified predicate: expr [all |any |some] (subquery) </p><p>e) Exists predicate: [not] exists (subquery) f) Is null predicate: columnname is [not] null </p><p>g) Like predicate: columnname [not] like ‘pattern’</p><ol start="4"><li>Summary of Predicates 谓词总汇</li></ol><p>[1]Comparison predicate 比较谓词</p><p>expr1 | expr1 (Subquery){&#x3D;, &lt;&gt;, &gt;, &lt;,&gt;&#x3D;, &lt;&#x3D;} </p><hr><p>Example 1. Listed cids of all customers with a discount less than the maximum discount. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cid <span class="keyword">from</span> customers <span class="keyword">where</span> discnt <span class="operator">&lt;</span> (<span class="keyword">select</span> <span class="built_in">max</span>(discnt) <span class="keyword">from</span> customers); </span><br><span class="line"><span class="keyword">select</span> cid <span class="keyword">from</span> customers <span class="keyword">where</span> discnt <span class="operator">&lt;</span> <span class="keyword">any</span>(<span class="keyword">select</span> discnt <span class="keyword">from</span> customers); </span><br></pre></td></tr></table></figure><hr><p>Example: Retrieve orders made by customers whose city come after ‘M’ in the alphabetic. ( 选 ”M” 以后字母开头的city ) </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders o <span class="keyword">where</span> <span class="string">&#x27;M&#x27;</span><span class="operator">&lt;</span>(<span class="keyword">select</span> city <span class="keyword">from</span> customers c <span class="keyword">where</span> c.cid<span class="operator">=</span>o.cid);</span><br></pre></td></tr></table></figure><p>[7] Like predicate: 模糊查询谓词</p><p>columnname [NOT] LIKE ‘pattern’ </p><p>▪ 通配符 </p><p>Underscore (_) Any single character 代替一个字符</p><p>Percent (%) Zero or more characters of any form 代替一个或者多个字符</p><p>Escape character (\ ） Precedes quoted literal character 在引用的文字字符之前，加上表示原意</p><p>All other characters  Represent themselves</p><p>Example 1. Retrieve all data of customers whose begins with the letter ‘A’. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customers <span class="keyword">where</span> cname <span class="keyword">like</span> ‘A<span class="operator">%</span>’ ;</span><br></pre></td></tr></table></figure><p>Example 2. Retrieve cids of customers whose cname begins ‘Tip_’ and arbitary(any) number of character . </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cid <span class="keyword">from</span> customers <span class="keyword">where</span> cname <span class="keyword">like</span> ‘Tip\_<span class="operator">%</span>’ <span class="keyword">escape</span> ‘\’; </span><br></pre></td></tr></table></figure><p>Example 3.9.7 Retrieve cids of customers whose cname starts with the sequence ‘ab\’ . </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cid <span class="keyword">from</span> customers <span class="keyword">where</span> cname <span class="keyword">like</span> ‘ab\\<span class="operator">%</span>’ <span class="keyword">escape</span> ‘\’;</span><br></pre></td></tr></table></figure><h3 id="10、Insert、Update-和-Delete-句"><a href="#10、Insert、Update-和-Delete-句" class="headerlink" title="10、Insert、Update 和 Delete 句"></a>10、Insert、Update 和 Delete 句</h3><h4 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h4><p>[1] Form </p><p>➢ 标准式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tablename [(<span class="keyword">column</span> &#123;, <span class="keyword">column</span>…&#125;)] &#123;<span class="keyword">VALUES</span> (expr <span class="operator">|</span> <span class="keyword">null</span> &#123; , expr <span class="operator">|</span> <span class="keyword">null</span>…&#125;) <span class="operator">|</span> subquery&#125;</span><br></pre></td></tr></table></figure><p> ➢ 插入子查询结果集 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tablename [ colname[, colname…]） Subquery</span><br></pre></td></tr></table></figure><p>Example 1. Add a row specified values to the orders table. (no qty or dollars, so on this new row they are null)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders (ordno, <span class="keyword">month</span>, cid, aid, pid) <span class="keyword">values</span>(<span class="string">&#x27;1107&#x27;</span>, <span class="string">&#x27;aug&#x27;</span>, <span class="string">&#x27;c006&#x27;</span>, <span class="string">&#x27;a04&#x27;</span>, <span class="string">&#x27;p01&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Example 2. Create a new table Swcusts of customers, and insert into all customers from Dallas and Austin.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> swcusts (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customers <span class="keyword">where</span> city <span class="keyword">in</span> (<span class="string">&#x27;Dallas&#x27;</span>, <span class="string">&#x27;Austin&#x27;</span>) );</span><br></pre></td></tr></table></figure><h4 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h4><p>Form: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tablename <span class="keyword">SET</span> colname <span class="operator">=</span> &#123;expr <span class="operator">|</span> <span class="keyword">null</span> <span class="operator">|</span> (subquery)&#125; &#123;, &#123;<span class="keyword">column</span> <span class="operator">=</span> expr <span class="operator">|</span><span class="keyword">null</span> <span class="operator">|</span>(subquery)…&#125;&#125; [<span class="keyword">WHERE</span> search_condition];</span><br></pre></td></tr></table></figure><p> Example 1. Give All agents in New York a 10% raise in the percent commission they earn on an order. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> agents <span class="keyword">SET</span> <span class="keyword">percent</span> <span class="operator">=</span> <span class="number">1.1</span><span class="operator">*</span><span class="keyword">percent</span> <span class="keyword">WHERE</span> city <span class="operator">=</span> <span class="string">&#x27;New York&#x27;</span>; </span><br></pre></td></tr></table></figure><p>Example 2. Update the discnt values in rows of the Swcusts table created in Example 2. with more up-to-date discnt values from the customers table. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> swcusts <span class="keyword">set</span> discnt<span class="operator">=</span>(<span class="keyword">select</span> discnt <span class="keyword">from</span> customers c <span class="keyword">where</span> c.cid <span class="operator">=</span> swcusts.cid );</span><br></pre></td></tr></table></figure><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><p>[1] Form: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tablename [<span class="keyword">WHERE</span> search_condition];</span><br></pre></td></tr></table></figure><p>Example 2. Delete all agents in New York. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> agents <span class="keyword">where</span> city <span class="operator">=</span> <span class="string">&#x27;New York&#x27;</span>;</span><br></pre></td></tr></table></figure><p>Example 3. Delete agents who have total orders of less than $600. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> agents <span class="keyword">where</span> aid <span class="keyword">in</span> ( <span class="keyword">select</span> aid <span class="keyword">from</span> orders <span class="keyword">group</span> <span class="keyword">by</span> aid <span class="keyword">having</span> <span class="built_in">sum</span>(dollars) <span class="operator">&lt;</span> <span class="number">600</span> );</span><br></pre></td></tr></table></figure><p>[4] Notice: Table Drop 删除表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> agents;</span><br></pre></td></tr></table></figure><h2 id="四、数据库编程（Program-to-Access-a-Database）"><a href="#四、数据库编程（Program-to-Access-a-Database）" class="headerlink" title="四、数据库编程（Program to Access a Database）"></a>四、数据库编程（Program to Access a Database）</h2><h3 id="1、嵌入式-SQL-C语言-Embedded-SQL"><a href="#1、嵌入式-SQL-C语言-Embedded-SQL" class="headerlink" title="1、嵌入式 SQL(C语言)Embedded SQL"></a>1、嵌入式 SQL(C语言)Embedded SQL</h3><h4 id="如何通过程序访问数据库中的数据？"><a href="#如何通过程序访问数据库中的数据？" class="headerlink" title="如何通过程序访问数据库中的数据？"></a>如何通过程序访问数据库中的数据？</h4><ol><li><p>SQL ：两种用法“<code>终端交互式</code>、<code>嵌入式</code>” (SQL 语法近似，细节有差异) </p></li><li><p>嵌入式 SQL：将 SQL 语言嵌入到某种高级语言中，实现对DB的操作。 </p><p>​ 主语言(宿主语言)属于面向过程的语言，实现程序的流程控制。 </p><p>➢ 嵌入式 SQL 的一般形式： </p><ol><li>加前缀： EXEC SQL</li><li>结束标志，随主语言语句的不同而不同</li><li>嵌入式 SQL 句分两类: <ol><li>Declaration Statement &#x2F;说明性语句 </li><li>Executable Statement &#x2F;可执行语句(DDL, DML, DCL)</li></ol></li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exec sql begin declare section;</span><br><span class="line"><span class="type">char</span> c_id[<span class="number">5</span>] = <span class="string">&quot;c001&quot;</span>, c_name[<span class="number">14</span>];</span><br><span class="line">exec sql end declare section;</span><br><span class="line"></span><br><span class="line">exec sql select cname, discnt into :c_name, :c_discnt from customers where cid = :c_id;</span><br></pre></td></tr></table></figure><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221129111233373.png" alt="image-20221129111233373"></p><ol start="3"><li><p>A Simple Program</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">exec sql begin declare section;</span><br><span class="line"><span class="type">char</span> c_id[<span class="number">5</span>] = <span class="string">&quot;c001&quot;</span>, c_name[<span class="number">14</span>];</span><br><span class="line"><span class="type">float</span> c_discnt;</span><br><span class="line">exec sql end declare section;</span><br><span class="line"></span><br><span class="line">c_id = <span class="string">&quot;c005&quot;</span>; <span class="comment">//或提示用户输入custid</span></span><br><span class="line"></span><br><span class="line">exec sql select cname, discnt into :c_name, :c_discnt from customers where cid = :c_id;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Customer name is %s, discount is %s\n&quot;</span>, c_name, c_discnt);</span><br></pre></td></tr></table></figure><p>[1] 嵌入式SQL语句的信号 : exec sql </p><p>对嵌入式 SQL句，DBMS 采用两种方式编译： </p><p>①预编译（Pre-compiler 目前使用较多） ②修改和扩充主语言，使之能处理 SQL</p><p>[2] 主机变量Host Variable<br>◼ 必须由SQL声明部分声明<br>◼ 用于嵌入式SQL语句，格式为<code>：c_id</code><br>◼ 在宿主语言中使用，格式为<code>c_id</code></p><p>[3] 注意：不能使用字符串来包含语句的一部分</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 非法操作</span><br><span class="line"><span class="type">char</span> cond[ ] = <span class="string">&quot; cid = &#x27;c003&#x27; and city = &#x27;Boston&#x27; &quot;</span>;</span><br><span class="line">exec sql select cname into :custname from customers where :cond;</span><br></pre></td></tr></table></figure><p>[4] SQL CONNECT and DISCONNECT to DBMS</p><p>Connect：</p><ul><li>exec sql CONNECT TO target_DBname [AS connect_name] [USER username];</li><li>exec sql CONNECT TO DEFAULT;</li></ul><p>Disconnect：</p><ul><li>exec sql DISCONNECT connect_name;</li><li>exec sql DISCONNECT current;</li></ul><p>[5] COMMIT提交 and ROLLBACK回滚 statement</p><p>◼ 使用COMMIT语句提交数据到数据库，在Disconnect语句之前<br>◼ 使用ROLLBACK语句撤消不成功的任务，在Disconnect语句之前</p><p>[6] Example 1. the program prompts a user repeately input a cid and replies by printing its cname and discount, halting when user input an empty string</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> <span class="comment">/*Header for prompted-input function*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> “prompt.h” <span class="comment">/*Head of DBS’s SQLCA structure*/</span></span></span><br><span class="line">exec sql include sqlca;</span><br><span class="line"><span class="type">char</span> cid_prompt[]=“ Please input customer id: ”;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line">    exec sql begin declare section;<span class="comment">//声明变量</span></span><br><span class="line">    <span class="type">char</span> cust_id[<span class="number">5</span>],cust_name[<span class="number">14</span>],user_name[<span class="number">20</span>],user_pwd[<span class="number">20</span>];</span><br><span class="line">    <span class="type">float</span> cust_discnt;</span><br><span class="line">    exec sql end declare section;</span><br><span class="line">    </span><br><span class="line">    exec sql whenever sqlerror <span class="keyword">goto</span> report-error; <span class="comment">//执行失败</span></span><br><span class="line">    exec sql whenever <span class="keyword">not</span> found <span class="keyword">goto</span> no-found; <span class="comment">//未找到</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">strcpy</span>(user_name, <span class="string">&quot;Scott&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(user_pwd, <span class="string">&quot;Tiger&quot;</span>); </span><br><span class="line">    exec sql connect :user_name identified by :user_pwd;<span class="comment">//登录数据库</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">prompt</span>(cid_prompt,<span class="number">1</span>,cust_id,<span class="number">4</span>))&gt;<span class="number">0</span>)<span class="comment">//获取“cust_id”的输入，检查它是否为空</span></span><br><span class="line">    &#123; </span><br><span class="line">        exec sql select cname, discnt into :cust_name, :cust_discnt  from customers where cid = :cust_id;<span class="comment">//执行查询语句</span></span><br><span class="line">     exec sql commit work ; <span class="comment">//提交sql并释放行上的读取锁定</span></span><br><span class="line">     <span class="built_in">printf</span> (<span class="string">&quot;Customer name is %s, discount is %5.1f\n&quot;</span>, cust_name, cust_discnt);</span><br><span class="line">     <span class="keyword">continue</span>;</span><br><span class="line">     no-found : <span class="built_in">printf</span>(“Can’t find customer %s”, cust_id);</span><br><span class="line">    &#125; </span><br><span class="line">   exec sql commit release; <span class="comment">//关闭连接</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    report-error : <span class="built_in">print_dberror</span>();</span><br><span class="line">    exec sql rollback release; <span class="comment">//回滚数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//返回错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>[7] C和数据库的字符串类型可能不同</p><p> char(5) in C, always contain ‘\0’ as end flag. </p><p>in DB，分 两种类型 char(5) and varchar(5)</p><p> 故: 嵌入了 SQL 的 C 程序里，两种语言之间字符赋值，可能有变数</p></li></ol><h4 id="如何按程序使用数据？"><a href="#如何按程序使用数据？" class="headerlink" title="如何按程序使用数据？"></a>如何按程序使用数据？</h4><p>主语言和SQL的关系</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221129120401136.png" alt="image-20221129120401136"></p><p>◼ 向主语言传递 SQL 的执行状态，用 SQL Communication Area (SQLCA) 或 Indicator Variable 指示变量</p><p>◼ 主语言向 SQL 提供参数用Host Variable；而SQL将 对DB 的处理结果交给 主语言时用 Host Variable 和 Cursor游标</p><p>[1] SQLCA：“结构类型”， ORACLE 中定义如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">sqlca</span> &#123; </span><br><span class="line">    <span class="type">char</span> sqlcacaid[<span class="number">8</span>];</span><br><span class="line">    <span class="type">long</span> sqlcabc;</span><br><span class="line">    <span class="type">long</span> sqlcode; <span class="comment">//sql执行的状态值</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sqlerrm</span> &#123;<span class="type">unsigned</span> <span class="type">short</span> sqlerrml; <span class="type">char</span> sqlerrmc[<span class="number">70</span>];&#125;; <span class="comment">//sql的错误代码</span></span><br><span class="line">    <span class="type">char</span> sqlerrp[<span class="number">8</span>];</span><br><span class="line">    <span class="type">long</span> sqlerrd[<span class="number">6</span>];<span class="comment">//sql进程的行数</span></span><br><span class="line">    <span class="type">char</span> sqlwarn[<span class="number">8</span>];</span><br><span class="line">    <span class="type">char</span> sqlext[<span class="number">8</span>]; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>◼ 使用前，先在主程序中声明SQL通信区的标识符： </p><p>​ exec sql include sqlca; (sqlca 属DBMS已定义、默认的结构名) </p><p>◼ 要操作多个DB时，可声明新的SQL通信区标识符：</p><p>​ struct sqlca sqlcb; (用sqlca 说明同结构的其它“通讯区标识”) exec sql include sqlcb;</p><p>◼ SQLCA结构中的常用域： </p><p>(1)Sqlca.sqlcode, 存放当前 SQL 句执行后的状况，有三种可能值： </p><p>​➢ &#x3D;0: 代表Success，即sql 句执行成功，说明buffer中有数据可用 </p><p>​➢ &gt;0: 代表not found ，即sql 句执行成功，但结果为 null </p><p>​➢ &lt;0: 代表sqlwarning或error，即程序或系统故障，错误码的含义见子域 sqlca.sqlerrm. (2)Sqlca.sqlerrd[2]，当前 DML 语句执行后，处理的数据行数。</p><p>[3] Host variable (主变量) </p><p>① Definition in Host Language，there are Three Types of Host vars. </p><p>​◼ Input host variable：由主语言对其赋值，在 SQL 句中引用。 </p><p>​◼ Output host variable：由 SQL 语句对其赋值，在主语言中引用。 </p><p>​◼ Indicator variable (指示变量)：整型变量，跟在(I&#x2F;O) Host Var之后，用 来“指示”主变量值的可用性。</p><p>②主变量、指示变量的说明： exec sql begin declare section; char cust_id; c_dis; exec sql end declare section; </p><p>③主变量、指示变量用法： </p><p>◆ 在SQL句中使用时，前面加冒号(:)作为标志，且指示变量应紧跟在主变量之后 </p><p>◆ 在 Host Language句中使用，不必加冒号。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">exec sql begin declare section</span><br><span class="line"><span class="type">char</span> cust_id, c_dis;</span><br><span class="line">integer c_ind;</span><br><span class="line">exec sql end declare section</span><br><span class="line">    </span><br><span class="line">cust_id=‘c002’;</span><br><span class="line"></span><br><span class="line">exec sql select discnt into :c_dis :c_ind from customers where cid=:cust_id;</span><br><span class="line"><span class="keyword">if</span> (c_ind==<span class="number">0</span>) <span class="built_in">printf</span>(“The discount of %s is %d !\n”, cust_id, c_dis);</span><br></pre></td></tr></table></figure><p>⑤ Indicator var 跟在某个Host-Varible之后，指示 SQL执行后，此HostVarible值的合法性，其自身值也有三种可能： </p><p>➢ &#x3D; 0， not null, the value is assigned to the host-varible. </p><p>➢ &gt; 0， a truncated value is assigned to the host-varible. </p><p>➢ &#x3D; -1，is null, the host-varible value is not a meaningful. </p><p>[4] Cursor(游标) </p><p>①Cursor：DBMS为用户开设的Data buffer，存放 SQL 的执行结果集， buffer中有一默认指针，供用户逐一访问 Data Record。 </p><p>②Function： <img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221129121317645.png" alt="image-20221129121317645"></p><p>③Using Method：four steps </p><p>​a)定义游标 (declare cursor) </p><p>​b)打开游标 (open cursor) 循环体中→ </p><p>​c)推进游标 (fetch cursor)，并将当前指向的buffer数据 放入主变量中 </p><p>​d)关闭游标 (close cursor)</p><h3 id="2、常见的嵌入式SQL语句"><a href="#2、常见的嵌入式SQL语句" class="headerlink" title="2、常见的嵌入式SQL语句"></a>2、常见的嵌入式SQL语句</h3><ol><li><p>Declare Cursor 定义游标</p><p>exec sql declare  cursor for  [Read only | For updata of colname]; </p><p>Notice: </p><p>​◼ FOR UPDATE: promising to Update&#x2F;Delete rows through cursor </p><p>​◼ READ ONLY: not promising to Update&#x2F;Delete rows through cursor </p></li><li><p>Cursor Open, Fetch and Close 打开、使用、关闭游标</p><p>​[1] Cursor open: exec sql OPEN ; </p><p>​[2] Cursor fetch: exec sql FETCH &lt; cursor_name &gt; INTO  {,…}; </p><p>​[3] Cursor close: exec sql CLOSE &lt; cursor_name &gt;;</p><p>​[4] Example 1. a GROUP BY Select statement listing agent ID values and sum of dollar orders by these agents for any customer ID provided by the user. GROUP BY Select语句列出了代理商的ID值和这些代理商针对用户提供的任何客户ID的美元订单总和。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> “prompt.h</span></span><br><span class="line">exec sql include sqlca;</span><br><span class="line"></span><br><span class="line">exec sql begin declare section;</span><br><span class="line"><span class="type">char</span> cust_id[<span class="number">5</span>], agent_id[<span class="number">4</span>];</span><br><span class="line"><span class="type">double</span> dollar_sum;</span><br><span class="line">exec sql end declare section;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> cid_prompt[]=”Please input customer id: ”;</span><br><span class="line">    exec sql declare agent_dollars cursor <span class="keyword">for</span> select aid,<span class="built_in">sum</span>(dollars) from orders where cid = :cust_id group by aid;<span class="comment">//定义游标</span></span><br><span class="line">    exec sql whenever sqlerror <span class="keyword">goto</span> report-error; </span><br><span class="line">    exec sql whenever <span class="keyword">not</span> found <span class="keyword">goto</span> finish;</span><br><span class="line">    exec sql connect to testdb;<span class="comment">//连接数据库</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">prompt</span>(cid_prompt,<span class="number">1</span>,cust_id,<span class="number">4</span>))&gt;<span class="number">0</span>)<span class="comment">//输入</span></span><br><span class="line">    &#123; </span><br><span class="line">        exex sql open agent_dollars;<span class="comment">//开启游标</span></span><br><span class="line">        <span class="keyword">while</span> (TRUE) &#123; </span><br><span class="line">            exec sql fetch agent_dollars into :agent_id, :dollar_sum;<span class="comment">//使用游标</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s %11.2f\n&quot;</span>, agent_id, dollar_dum); &#125;</span><br><span class="line">            finish: exec sql close agent_dollars ;<span class="comment">//关闭游标</span></span><br><span class="line">            exec sql commit work; </span><br><span class="line">        &#125; </span><br><span class="line">    exec sql disconnect current ; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    report-error : <span class="built_in">print_dberror</span>();</span><br><span class="line">    exec sql rollback work ;</span><br><span class="line">    exec sql disconnect current ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[5] C与嵌入式SQL之间的方法概述</p><p>游标：</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221129122045375.png" alt="image-20221129122045375"></p><p>主变量：</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221129122056720.png" alt="image-20221129122056720"></p><p>使用完数据库后：</p><p>◼ RDBMS用户并发数有限 </p><p>◼ 应避免长期占用</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221129122129710.png" alt="image-20221129122129710"></p></li></ol><h4 id="嵌入式查询"><a href="#嵌入式查询" class="headerlink" title="嵌入式查询"></a>嵌入式查询</h4><ol><li><p>语法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EXEC SQL SELECT [ALL|DISTINCT] expression&#123;, expr…&#125;</span><br><span class="line">INTO host_variable &#123; , host_variable… &#125;</span><br><span class="line">FROM tableref [corr_name] &#123;, tableref[corr_name] …&#125;</span><br><span class="line">[WHERE search_condition ]</span><br></pre></td></tr></table></figure></li><li><p>注意点：</p><p>◼ 嵌入式select只能检索一行，因此GROUP BY、HAVING、UNION和ORDER BY子句不包含在其中<br>◼ 如果可以在不使用光标的情况下在程序中执行Select语句，仅当要检索的行数不超过一行时（零行&#x2F;一行）。</p></li><li><p>例题</p><p>已知学生信息表 students，其结构如下: Students(sno, sname, ssex, sage, sdepartment). 编程查询某系全体学生的信息，系名由用户在程序运行时输入。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> “prompt.h”</span></span><br><span class="line"></span><br><span class="line">exec sql include sqlca;<span class="comment">//游标</span></span><br><span class="line">exec sql begin declare section;<span class="comment">//主变量声明</span></span><br><span class="line"><span class="type">char</span> hdept[<span class="number">10</span>], hsno[<span class="number">4</span>], hname[<span class="number">10</span>], hsex[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> hage;</span><br><span class="line">exec sql end declare section;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> msg[]=” Please input the department name: ”;</span><br><span class="line">    exec sql declare c_student cursor <span class="keyword">for</span> select sno, sname, ssex, sage, sdepartment from students where sdepartment = :hdept read only; <span class="comment">//定义游标</span></span><br><span class="line">    exec sql whenever sqlerror <span class="keyword">goto</span> report-error; </span><br><span class="line">    exec sql whenever <span class="keyword">not</span> found <span class="keyword">goto</span> finish; </span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">prompt</span>(msg,<span class="number">1</span>, hdept,<span class="number">10</span>))&gt;<span class="number">0</span>) &#123; <span class="comment">//输入</span></span><br><span class="line">        exec sql connect to testdb;<span class="comment">//建立连接</span></span><br><span class="line">        exec open c_student;<span class="comment">//打开游标</span></span><br><span class="line">        <span class="keyword">while</span> (TRUE) &#123; </span><br><span class="line">            exec sql fetch c_student into :hsno, :hname, :hsex, :hage;<span class="comment">//使用游标</span></span><br><span class="line">            <span class="keyword">if</span> (sqlca.sqlcode==success)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s %s %s %d\n&quot;</span>, hsno, hname, hsex, hage);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        finish: exec sql close c_student ;<span class="comment">//关闭游标</span></span><br><span class="line">        exec sql commit work; <span class="comment">//提交事务</span></span><br><span class="line">    &#125; </span><br><span class="line">    exec sql disconnect current ; <span class="comment">//关闭连接</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    report-error : <span class="built_in">print_dberror</span>(); </span><br><span class="line">    exec sql rollback work ;<span class="comment">//回滚</span></span><br><span class="line">    exec sql disconnect current ;<span class="comment">//关闭连接</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="嵌入式删除"><a href="#嵌入式删除" class="headerlink" title="嵌入式删除"></a>嵌入式删除</h4><p>Embedded Delete </p><ol><li><p>Two forms of Delete statement </p><p>● Searched Delete 搜索删除</p><p>● Positioned Delete 定位删除</p></li><li><p>Embedded Delete 语法</p><p>statement exec sql DELETE FROM tablename [corr_name] [WHERE search_condition | WHERE CURRENT OF cursor_name</p></li><li><p>注意点</p><p>在Searched Delete中，sqlca。sqlcode和sqca。sqlerrd[2]的含义<br>➢ 确定要处理的行数。<br>➢ 未找到，当不返回行时。<br>➢ 发生执行错误时出错</p></li><li><p>Example 1. Delete all customers from the customers table who live in Duluth and have made no orders</p><p>a) In aSearched Delete</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec sql <span class="keyword">delete</span> from customers c where c.city = ‘Duluth’ <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">exists</span> (select * from orders o where o.cid =c.cid) ;</span><br></pre></td></tr></table></figure><p>b) In a Positioned Delete: Declare a cursor to delete current row</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">exec sql declare delcust cursor <span class="keyword">for</span></span><br><span class="line">select cid from customers c where c.city = ‘Duluth’ <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">exists</span> (select * from orders o where o.cid = c.cid) <span class="keyword">for</span> update of cid;</span><br><span class="line">exec sql whenever <span class="keyword">not</span> found <span class="keyword">goto</span> skip;</span><br><span class="line">exec sql open delcust;</span><br><span class="line"><span class="keyword">while</span> (TRUE) &#123;</span><br><span class="line">    exec sql fetch delcust into :cust_id;</span><br><span class="line">    exec sql <span class="keyword">delete</span> from customers where current of delcust;&#125;</span><br><span class="line">skip : ……</span><br></pre></td></tr></table></figure></li></ol><h4 id="嵌入式更新"><a href="#嵌入式更新" class="headerlink" title="嵌入式更新"></a>嵌入式更新</h4><p>[1] Two forms of Update statement </p><p>● Searched Update 查询更新</p><p>● Positioned Update — using a cursor 位置更新</p><p>[2] Forms of Embedded Searched Update statement </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec sql UPDATE tablename [corr_name] SET colname1 = expr &#123; , colname2 = expr… &#125;[WHERE search_condition]; Notes: In Searched Update, sqlca.sqlcode <span class="keyword">and</span> sqlca.sqlerrd</span><br></pre></td></tr></table></figure><p>[2] contains information of : </p><p>➢ 确定要更新的行数。</p><p>➢ 未找到，当不返回行时。</p><p>➢ 发生执行错误时出错。</p><p>[3] 嵌入式定位更新语句的格式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec sql UPDATE tablename SET columnname=expr &#123; , column=expr… &#125; WHERE CURRENT OF cursor_name ;</span><br></pre></td></tr></table></figure><p>[4] Example 1：已知 students表，编程查询某系全体学生的信息，系名由用户在 程序运行时输入，根据用户要求修改其中某些学生的年龄。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> “prompt.h”</span></span><br><span class="line">exec sql include sqlca;</span><br><span class="line">exec sql begin declare section;</span><br><span class="line"><span class="type">char</span> hdept[<span class="number">10</span>], hsno[<span class="number">4</span>], hname[<span class="number">10</span>], hsex[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> hage;</span><br><span class="line">exec sql end declare section;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> msg[]=”Please input the department name: ”;</span><br><span class="line">    exec sql declare p_student cursor <span class="keyword">for</span> select sno, sname, ssex, sage, sdepartment from students where sdepartment = :hdept <span class="keyword">for</span> update of sage;</span><br><span class="line">    exec sql whenever sqlerror <span class="keyword">goto</span> report_error; </span><br><span class="line">    exec sql whenever <span class="keyword">not</span> found <span class="keyword">goto</span> finish; </span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">prompt</span>(msg,<span class="number">1</span>, hdept,<span class="number">10</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    exec sql connect to testdb;</span><br><span class="line">    exec sql open p_student;</span><br><span class="line">    <span class="keyword">while</span> (TRUE) &#123;</span><br><span class="line">            exec sql fetch p_studen into :hsno, :hname, :hsex, :hage ;</span><br><span class="line">                    <span class="keyword">if</span> (sqlca.sqlcode == success) &#123; </span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%s %s %s %d\n&quot;</span>, hsno, hname, hsex, hage);</span><br><span class="line">                    <span class="built_in">printf</span>(“ Update the age of <span class="keyword">this</span> record ? ”);</span><br><span class="line">                    <span class="built_in">scanf</span>(“%c”, ans);</span><br><span class="line">                    <span class="keyword">if</span> (ans == ’y’) &#123; </span><br><span class="line">                            <span class="built_in">printf</span>(“ Input the <span class="keyword">new</span> age : ”); </span><br><span class="line">                            <span class="built_in">scanf</span>(“%d”, hage);</span><br><span class="line">   exec sql update student set sage = :hage where current of p_student;</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>; </span><br><span class="line">        &#125; </span><br><span class="line">……</span><br><span class="line">finish: exec sql close p_student ;</span><br><span class="line">exec sql commit work; </span><br><span class="line">    &#125; </span><br><span class="line">    exec sql disconnect current ; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    report_error : <span class="built_in">print_dberror</span>();</span><br><span class="line">    exec sql rollback work ;</span><br><span class="line">    exec sql disconnect current ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="嵌入式插入"><a href="#嵌入式插入" class="headerlink" title="嵌入式插入"></a>嵌入式插入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec sql INSERT INTO tablename [ (columnname &#123; , columnname…&#125; ) ] &#123;<span class="built_in">VALUES</span> (expr &#123; , expr &#125; ) | Subquery &#125; ;</span><br></pre></td></tr></table></figure><p>In Insert Statement, sqlca.sqlcode and sqlca.sqlerrd[2] contains information: </p><p>➢ Success, to determine number of rows be processed. </p><p>➢ Not found, If no rows insert. </p><p>➢ Error, when an executed error is occurred.</p><h4 id="其他嵌入式sql"><a href="#其他嵌入式sql" class="headerlink" title="其他嵌入式sql"></a>其他嵌入式sql</h4><p>[1] They are: </p><ul><li>exec sql create table, </li><li>exec sql drop table, </li><li>exec sql alter table, </li><li>exec sql create view etc.</li></ul><p>[2] All of other Embedded SQL Statement, see in Appendix C.</p><h3 id="3、条件处理"><a href="#3、条件处理" class="headerlink" title="3、条件处理"></a>3、条件处理</h3><h4 id="Whenever"><a href="#Whenever" class="headerlink" title="Whenever"></a>Whenever</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec sql WHENEVER condition action ;</span><br></pre></td></tr></table></figure><p>[1] 功能：无论何时允许我们在遇到错误和情况时控制执行</p><p>exec sql whenever sqlerror goto report_error ;</p><p>注意：“sqlerror”是条件，“goto report_error”是操作。</p><p>[2]Condition:</p><p>➢ SQLERROR</p><p>➢ NOT FOUND</p><p>➢ SQLWARNING</p><p>[3] Action </p><p>● CONTINUE </p><p>● GOTO label </p><p>● STOP </p><p>● DO function</p><p>[4]Example 1. Find the errors in following statement fragment</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Main</span>()&#123; </span><br><span class="line">exec sql whenever sqlerror stop; <span class="comment">/* First whenever statement*/</span></span><br><span class="line">    ……</span><br><span class="line">    <span class="keyword">goto</span> s1;</span><br><span class="line">    ……</span><br><span class="line">    exec sql whenever sqlerror <span class="keyword">continue</span>; <span class="comment">/*Overrides Fisrt whenever*/</span></span><br><span class="line">    s1: exec sql update agents set percent = percent + <span class="number">1</span>;</span><br><span class="line">…… &#125;</span><br></pre></td></tr></table></figure><p>[5] Example 2. Find errors in following sequence statement.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Main</span>()&#123; </span><br><span class="line">    exec sql whenever sqlerror <span class="keyword">goto</span> handle_error; <span class="comment">/* First whenever */</span></span><br><span class="line">    <span class="function">exec sql create table <span class="title">customers</span> <span class="params">(cid <span class="type">char</span>(<span class="number">4</span>) <span class="keyword">not</span> null, cname …)</span> </span>;</span><br><span class="line">    ……</span><br><span class="line">    handle_error : exec sql whenever sqlerror <span class="keyword">continue</span>; <span class="comment">/*当Create table失败转入*/</span></span><br><span class="line">    exec sql drop table customers; <span class="comment">/*Drop表出错，转回First whenever, 死循环*/</span></span><br><span class="line">    exec sql disconnect;</span><br><span class="line">    <span class="built_in">printf</span> (“Could <span class="keyword">not</span> create customers table\n”);</span><br><span class="line">    <span class="keyword">return</span> –<span class="number">1</span>;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[6]Example 1. Explicating the error processing in ORACLE.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">exec sql begin declare section;</span><br><span class="line"><span class="type">char</span> sqlstate[<span class="number">5</span>]; <span class="comment">/*Store the SQL state*/</span></span><br><span class="line">exec sql end declare section;</span><br><span class="line"></span><br><span class="line"><span class="function">exec sql create table <span class="title">custs</span> <span class="params">(cid <span class="type">char</span>(<span class="number">4</span>) <span class="keyword">not</span> null, cname varchar(<span class="number">13</span>), …)</span> </span>;</span><br><span class="line">sqlstate = <span class="built_in">str</span>(sqlca.sqlcode); <span class="comment">/* 检查 SQL 的执行状态,作相应处理 */</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strcmp</span>(sqlstate,’<span class="number">82100</span>’) == <span class="number">0</span> ) <span class="comment">/* ORACLE, out of disk space? */</span></span><br><span class="line">&lt;call procedure to handle <span class="keyword">this</span> condition&gt;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(sqlstate,’<span class="number">00000</span>’ ) != <span class="number">0</span> ) &#123; <span class="comment">/* ORACLE, Another error? */</span></span><br><span class="line"><span class="keyword">goto</span> handle_error;</span><br><span class="line">exec sql whenever sqlerror <span class="keyword">goto</span> handle_error;</span><br><span class="line">…… &#125;</span><br><span class="line">handle_error ：……</span><br></pre></td></tr></table></figure><h4 id="通过主变量检查错误"><a href="#通过主变量检查错误" class="headerlink" title="通过主变量检查错误"></a>通过主变量检查错误</h4><p>[1] Example : Find discount of cid. Assume cid has been input. </p><p>​Host Vars —— cust_id; cust_discnt;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">S1) exec sql select discnt into :cust_discnt from customers where cid = :cust_id;</span><br><span class="line"></span><br><span class="line">S2) exec sql begin declare section;</span><br><span class="line"><span class="type">float</span> cust_discnt; <span class="type">int</span> cd_ind;</span><br><span class="line">exec sql end declare section;</span><br><span class="line">exec sql select discnt into :cust_discnt :cd_ind</span><br><span class="line">from customers where cid = :cust_id;</span><br><span class="line"><span class="keyword">if</span> (cd_ind==<span class="number">0</span>) <span class="built_in">printf</span>(“The discount of %s is %d ! \n”, cust_id, cust_discnt);</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>[2] Example : Update the null discount to the specify cid’s</p><p>Host Vars —— cust_id, cust_discnt, cd_ind</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(“%s”, cust_id);</span><br><span class="line"><span class="built_in">scanf</span>(“%d”, cust_discnt);</span><br><span class="line">cd_ind = <span class="number">-1</span>;</span><br><span class="line">exec sql update customers</span><br><span class="line">set discnt = :cust_discnt :cd_ind where cid = :cust_id;</span><br></pre></td></tr></table></figure><h3 id="4、事务编程Transactions"><a href="#4、事务编程Transactions" class="headerlink" title="4、事务编程Transactions"></a>4、事务编程Transactions</h3><h4 id="事务Transaction"><a href="#事务Transaction" class="headerlink" title="事务Transaction"></a>事务Transaction</h4><p>[1] 并发性Concurrency<br>◼ 需要一起执行一组SQL程序在同一时间才能访问上的数据库。它被称为并发访问或并发。<br>◼ 必须使用<code>transaction</code>和<code>lock</code>来控制并发访问。</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221130143328906.png" alt="image-20221130143328906"></p><p>[2] 数据库事务<br>◼ Database Transaction——用户定义的一组 DB 操作序列。</p><ol><li>这些操作要么全部操作成功，并永久性更新data到DB中 </li><li>要么操作失败，放弃本次所有操作对DB的更新， DB恢复到未操作前状态</li></ol><p>◼ Database Transaction 一个不可分割的数据库运行单位 (SQL是程序的书写单位)</p><h4 id="如何指定事务"><a href="#如何指定事务" class="headerlink" title="如何指定事务"></a>如何指定事务</h4><p>[1] 事务属性property：称为“ACID”属性<br>➢ Atomicity：事务是 数据库的逻辑运行单位 (原子性)<br>➢ Consistency：事务执行效果使数据库从一致性稳态A.变到一致性稳态B级(一致性)<br>➢ Isolation：事务内部的操作及所用数据，对其他并发事物是隔离的, 不能互相干扰。 (隔离性)<br>➢ Durability：事务一旦提交，它对数据库中数据的更新是永久性的，后续操作或故障对其执行结果没有任何影响。 (持久性)</p><p>[2] ACID 特性遭破坏的可能因素： </p><p>✓ 多个Transaction并行时，不同事物交叉访问相同DB Data，需控制并发. </p><p>✓ Transaction 如在运行时被强行中止，应有DB恢复机制.</p><p>[3] Declaration Database Transaction(显式&#x2F;隐式定义事务）<br>➢ exec-sqlbegin transaction；–显式说明数据库事务开始<br>➢ exec-sqlcommit [work];–Transaction正常结束标志，提交Database Transaction 中对 Data 的更新，写入DB。<br>➢ exec-sql rollback [work];–Database Transaction异常结束标志，将Undo所有对 Data 已完成的更新操作，DB回滚到Transaction开始的状态。即事务运行过程中 发生了某种异常，没有正常结束，不更新DB。<br>➢ Database Transaction 可显式定义，否则 DBMS 按系统的缺省规定自动划分事务。 如：两个相邻 commit、rollback 句之间视为一个 Database Transaction</p><p>[4] Transaction与program间的关系： </p><p>(1) Program含多个Transaction，每个Transaction包含多条SQL statements。 </p><p>(2) statements是程序的构成单位，Transaction是DB program的运行单位</p><p>[5] Example 5.4.1: Inconsistent View of Data.</p><p>处理进程：Process P1 wants to move $400.00 from account A1 to A2, to even out the balance. Process P2 is running to perform a credit check on this depositor, requiring a total at least $900.00 before the depositor will be allowed to take out a credit card.<img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221130144231132.png" alt="image-20221130144231132"></p><p>没有加锁的情况下出现问题<img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221130144317284.png" alt="image-20221130144317284"></p><p>改成串行化 Serializability让两个线程顺序执行。</p><p>[6] Example 5.4.1 Transfer money between two account</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> “prompt.h”</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">( )</span> </span>&#123; </span><br><span class="line">    exec sql begin declare section;<span class="comment">//变量声明</span></span><br><span class="line">    <span class="type">char</span> acc_from[<span class="number">8</span>], acc_to[<span class="number">8</span>]; </span><br><span class="line">    <span class="type">double</span> tdollar;</span><br><span class="line">    exec sql end declare section;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> dollarstr[<span class="number">8</span>]; ms[<span class="number">30</span>]=“Enter from &amp; to accounts, dollars <span class="keyword">for</span> transfer”;</span><br><span class="line">    </span><br><span class="line">    exec sql connect to <span class="keyword">default</span>;<span class="comment">//连接数据库</span></span><br><span class="line">    exec sql set transaction isolation level serializable;<span class="comment">//设置事务级别串行化</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123; </span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">prompt</span>(ms, <span class="number">1</span>, acc_from, <span class="number">8</span>, acc_to, <span class="number">8</span>, dollarstr, <span class="number">6</span>)) &gt; <span class="number">0</span>)|| ( <span class="built_in">scanf</span>(dollastr, “%<span class="number">1f</span>”, &amp;tdollar) = <span class="number">1</span>) ) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(“Invalid input, Input example: <span class="number">345633</span>, <span class="number">445623</span>, <span class="number">100.45</span>\n”); </span><br><span class="line">        &#125;</span><br><span class="line">        exec sql whenever sqlerror <span class="keyword">goto</span> do_rollback;<span class="comment">//错误回滚</span></span><br><span class="line">        <span class="comment">/* --------Transaction start here --------- */</span></span><br><span class="line">        exec sql update accounts set balance=balance - :tdollar where acct=:acc_from;</span><br><span class="line">        exec sql update accounts set balance=balance + :tdollar where acct=:acc_to;</span><br><span class="line">        exec sql commit work;<span class="comment">//提交事务</span></span><br><span class="line">        <span class="comment">/* --------Transaction end here --------- */</span></span><br><span class="line">        <span class="built_in">printf</span>(“Transfer complete ! \n”);</span><br><span class="line">        loop;</span><br><span class="line">        do_rollback : exec sql rollback work ;</span><br><span class="line">        <span class="built_in">printf</span>(“Transfer failed ! \n”);</span><br><span class="line">&#125; <span class="comment">/* end of while (1) */</span></span><br><span class="line">exec sql disconnect current ; <span class="comment">//关闭连接</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Transaction-Isolation-and-Locking-事务隔离和锁"><a href="#Transaction-Isolation-and-Locking-事务隔离和锁" class="headerlink" title="Transaction Isolation and Locking 事务隔离和锁"></a>Transaction Isolation and Locking 事务隔离和锁</h4><p>[1] 如何保证事务的隔离<br>➢ 事务的行为就像它们以串行顺序发生一样  serializability<br>➢ 为了实现隔离，DBMS采用数据库锁定来控制一致性<br>[2] 锁的分类<br>✓ 读取访问锁（ R lock &#x2F; share lock）。<br>✓ 更新或写入锁定（W lock &#x2F; exclusive lock）。<br>[3] 锁的执行规则 （P295，图5.14）<br>➢ 事务访问数据时，需对它加排它锁，只到事务结束才释放锁<br>➢ 数据被锁住期间，其它事务的访问请求需等待</p><p>使用锁机制解决转账问题</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221130145628280.png" alt="image-20221130145628280"></p><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>[1] 死锁：两个或多个事务正在等待相同的资源。（两个线程拿了对方执行所需要的资源）</p><p>[2] Example Transaction deadlock.<img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221130145854190.png" alt="image-20221130145854190"></p><p>[4] Example 1 死锁检测。通过Searched Update编写一个包含多行更改的事务，并在出现死锁时重试该事务。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DEADABORT -60;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    exec sql whenever sqlerror <span class="keyword">continue</span>;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )&#123; </span><br><span class="line">        exec sql update customers set discnt = <span class="number">1.1</span>*discnt where city = ‘New York’;</span><br><span class="line">        <span class="keyword">if</span> (sqlca.sqlcode == DEADABORT ) &#123; </span><br><span class="line">            count++; <span class="comment">/*count deadlock aborts*/</span></span><br><span class="line">            <span class="keyword">if</span> (count &lt; <span class="number">4</span>) &#123; </span><br><span class="line">                exec sql rollback work;</span><br><span class="line">                …… <span class="comment">/*operating system to wait for a second*/</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sqlca.sqlcode &lt;<span class="number">0</span> ) <span class="keyword">break</span>; <span class="comment">/*Error, but non-deadlock*/</span></span><br><span class="line">    &#125; <span class="comment">/* end while */</span></span><br><span class="line">    <span class="keyword">if</span> (sqlca.sqlcode &lt; <span class="number">0</span> ) &#123; <span class="comment">/*over-retried deadlock or other error */</span></span><br><span class="line">        <span class="built_in">print_dberror</span>( ); <span class="comment">/* print error message */</span></span><br><span class="line">        exec sql rollback work;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">    &#125; <span class="comment">/* return error */</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">/* return success */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[5] 注意：如果发生死锁，需要考虑两件事。<br>➢ 使用ROLLBACK对DB数据进行所有更改，以回滚到程序逻辑首次找到它的位置。<br>➢ 内存中的程序变量不受DB控制。</p><h3 id="5、过程化-SQL-程序、定制集函数、实例"><a href="#5、过程化-SQL-程序、定制集函数、实例" class="headerlink" title="5、过程化 SQL 程序、定制集函数、实例"></a>5、过程化 SQL 程序、定制集函数、实例</h3><h2 id="五、数据库设计（Database-Design）"><a href="#五、数据库设计（Database-Design）" class="headerlink" title="五、数据库设计（Database Design）"></a>五、数据库设计（Database Design）</h2><h3 id="补充：数据库设计的基本步骤"><a href="#补充：数据库设计的基本步骤" class="headerlink" title="补充：数据库设计的基本步骤"></a>补充：数据库设计的基本步骤</h3><p>[1] 改进的“奥尔良法” , 将DB设计分成六个阶段： </p><ul><li>需求分析 </li><li>物理结构设计 </li><li>概念结构设计 </li><li>数据库实施 </li><li>逻辑结构设计 </li><li>数据库运行维护</li></ul><p>[2] DB设计人员（五种角色） </p><p>乙方：</p><p>√ System analyst √ Database Designer √ Programmer</p><p>甲方：</p><p>√ User √ Database Administrators</p><p>[3]若DBAS较复杂，应考虑使用数据库辅助设计工具(CASE)，提高DB设计速度、质量</p><p><code>数据库应用系统设计流程图</code></p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221201163230672.png" alt="image-20221201163230672"></p><p>设计步骤：</p><p>[1] DB设计阶段</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221201163329613.png" alt="image-20221201163329613"></p><p>[2] DB设计内容</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221201163417966.png" alt="image-20221201163417966"></p><p>[3] DB设计时各种模式的产生</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221201163546815.png" alt="image-20221201163546815"></p><h3 id="1、E-R图"><a href="#1、E-R图" class="headerlink" title="1、E-R图"></a>1、E-R图</h3><h4 id="实体、属性、E-R图（Entities-Attributes-E-R-Diagrams）"><a href="#实体、属性、E-R图（Entities-Attributes-E-R-Diagrams）" class="headerlink" title="实体、属性、E-R图（Entities,Attributes,E-R Diagrams）"></a>实体、属性、E-R图（Entities,Attributes,E-R Diagrams）</h4><p>[1] 实体Entity<br>实体是可区分的集合(可区别的) 具有共同特性的真实世界对象。</p><p>实体间的关系：</p><ul><li>一对一</li><li>一对多</li><li>多对多</li></ul><p>[2] 实体实例Entity Instance<br>一个实体（如“客户”）通常映射到一个实际的表，表的每一行都对应于一个可区分的真实世界对象，该行称为“实体实例”(实体实例)”<br>例如：学生、讲师、课程。<br>[3] 实体集Entity Set </p><p>[4] 属性Attribute<br>属性——描述实体或关系的属性。<br>在学生实体中，（sid，student_name）</p><p>[5] 特殊概念</p><p>➢ Candidate key—每个实体都有一个标识符，它是一组唯一的属性标识实体实例。eg:客户的“cid”。<br>➢ A descriptor—是一个非键属性。eg:订单的“qty”。<br>➢ A composite attribute eg:“cname”可以有三个部分，如“fname，lname，midname”<br>➢ A multi-valued attribute：可以接受实体实例的多个值。eg:员工的“爱好”。<br>➢ <code>主键</code>&#x2F;主标识符Primary key &#x2F; primary identifier<br>主键是DBA为该表中的唯一行选择的候选键。<br>eg:“cid”代表客户，“pid”代表产品，“aid”代表代理商</p><p>[6] Entity-Relation Approach 概念模型表示法<br>1976年P.P.S.Chen 提出, E-R 图提供了表示实体型、属性和联系的方法。<br>➢ Entity ： 矩形框，内写实体名<br>➢ Attribute： 椭圆形，内写属性名<br>➢ Relationship： 菱形框，内写联系名<br>➢ No Direction Line：连接实体与属性，线上注明联系的比例<br>或 在实体与实体之间建立连接，线上注明实体间联系的比例关系<br>Notice：E-R 图是各种数据模型的共同基础，与DBMS支持的数据模型无关</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221201183743655.png" alt="image-20221201183743655"></p><h4 id="将实体和属性转换为关系"><a href="#将实体和属性转换为关系" class="headerlink" title="将实体和属性转换为关系"></a>将实体和属性转换为关系</h4><p>[1] 转换规则1。<br>•实体映射到单个表。<br>•实体的单值属性映射到列。复合属性映射到多个列。<br>•实体实例成为表的行。<br>[参考] 一个实体型转换为一个关系模式，实体属性构成关系属性，实体码成为关系码</p><p>[3] 转换规则2。<br>➢ 原始表变为“muster table”(主表).<br>➢ 表的多值属性必须映射到其自己的表，称为“dependent table”(从表).</p><h4 id="实体之间的关系"><a href="#实体之间的关系" class="headerlink" title="实体之间的关系"></a>实体之间的关系</h4><p>[1] 定义Relationship<br>➢ 给定具有E1、E2、…、Em的m个实体，关系R定义了这些实体的实例之间的对应规则。<br>➢ 示例：<br>讲师讲授课程_部分<br>员工在项目上工作（属性，百分比（时间））<br>员工管理员工（环形&#x2F;递归关系）</p><p>➢ E_R设计转换：关系有时转换为表，有时不转换。</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221201184150760.png" alt="image-20221201184150760"></p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221201184257272.png" alt="image-20221201184257272"></p><h3 id="2、E-R建模的进一步细节"><a href="#2、E-R建模的进一步细节" class="headerlink" title="2、E-R建模的进一步细节"></a>2、E-R建模的进一步细节</h3><h4 id="实体的基数-关系的基数"><a href="#实体的基数-关系的基数" class="headerlink" title="实体的基数(关系的基数)"></a>实体的基数(关系的基数)</h4><p>[1] 最小和最大基数<br>➢ 在E-R图中，点表示实体（E或F）。R代表关系，并且使用线连接点之间。<br>   调用点是实体实例，调用线是关系实例。<br>➢ 最大基数(最大基) E和R之间(最多实例关联线数)<br>（1）max-card(E, R) &#x3D; 1. 如果E中的所有点最多有一行出来。<br>（2）max-card(E, R）&#x3D; N。如果可能有多条线路输出。<br>➢ 最小基数(最小基) E和R之间(最少实例关联线数)<br>（1） min-card(E, R) &#x3D; 1。如果E中的所有点至少有一条线出来。<br>（2） max-card(E, R) &#x3D; 0。如果一些点可能没有一条线出来。</p><p>➢ 即：将R看成 域E和F之间的映射（relationship），则<br>(1) max-card(E,R) 为 “实体E经R关系映射到实体F”的最大关联数。<br>(2) min-card(E,R) 为 “实体E经R关系映射到实体F”的最小关联数。</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221201185421510.png" alt="image-20221201185421510"></p><p>[2] 定义<br>➢ 当实体E参与关系R时， min-card（E，R）&#x3D;x，max-card（E、R）&#x3D;y<br>➢ 在E_R模型中，E和R之间的连接线可以标记为“（x，y）”</p><p>eg:<img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221201185619037.png" alt="image-20221201185619037"></p><h4 id="1-1、N-N、1-N-Relationships"><a href="#1-1、N-N、1-N-Relationships" class="headerlink" title="1-1、N-N、1-N Relationships"></a>1-1、N-N、1-N Relationships</h4><p>[1] Def: single-valued&#x2F;multi-valued participation </p><p>➢ If max-card(E, R)&#x3D;1, E have single-valued participation in R. </p><p>➢ If max-card(E, R)&#x3D;N, E have multi-valued participation in R</p><p>[2] Classify of relationship 关系的分类</p><p> ➢ R is <strong>N-N</strong> relationship, If entities E and F are multi-valued in the relationship R [ max-card(E, R) &#x3D; N ; max-card(F, R) &#x3D; N ]. </p><p>➢ R is <strong>1-1</strong> relationship, If entities E and F are single-valued in the relationship R [ max-card(E, R) &#x3D; 1 ; max-card(F, R) &#x3D; 1 ]. </p><p>➢ R is <strong>1-N</strong> relationship, If E is single-valued, and F is multi-valued</p><p>✓E [max-card(E, R)&#x3D;1] is “<code>Many side</code>” </p><p>✓F [max-card(F, R)&#x3D;N] is “<code>One side</code>”</p><h4 id="将二元关系转换为关系"><a href="#将二元关系转换为关系" class="headerlink" title="将二元关系转换为关系"></a>将二元关系转换为关系</h4><p>[总结] “E-R模型”向“RDB” 转换的规则 </p><p>(1) 一个实体E转换为一个关系Table，实体属性成为关系属性，实体码就是关系的码 </p><p>(2) 一个1-1联系可转换为一个独立Table；也可以与任一实体合并。 </p><p>(3) 一个1-n联系可转换为一个独立Table；也可与n端对应的实体合并。 </p><p>(4) 一个m-n联系可转换为一个独立Table；与该联系相连的各实体码以及联系本身的 属性均转换为Table的属性；且该Table的码为各实体码的组合。 </p><p>(5) 三个或三个以上实体间的多元联系R，可以转换为一个关系Table ；与多元联系R 相连的各实体码，均需加入为Table的属性；Table的码为各实体码的组合。 </p><p>(6) 具有相同码的关系Table可合并。</p><h3 id="3、范式"><a href="#3、范式" class="headerlink" title="3、范式"></a>3、范式</h3><p>1)定理：<br>– 每个函数依赖集F &lt;–&gt;一个最小函数依赖集Fm。<br>– 每个F的最小函数依赖集Fm不唯一，它与处理F中每个FD的顺序有关。</p><p>(2)推理：<br>– 若要求关系模式的分解保持函数依赖，那么分解可以达到3NF（非主属性与“码”不存在传递函数依赖），但不一定能达到BCNF（每一个FD中的决定因素均包含于码）。<br>– 若要求关系模式的分解具有无损连接性，那么分解总可以达到4NF。</p><p>(3)范式：<br>– 共有六种，范式之间的关系：<br>– 一个低级范式的关系模式，通过“模式分解”可以转换为若干个高级范<br>式的关系模式集合，这种过程称为规范化。<br>5NF  4NF  BCNF  3NF  2NF 1NF</p><p>(4)2NF：若R∈1NF，且每一个非主属性完全函数依赖于码，则R∈2NF。 该模式会产生的问题：插入异常、删除异常、修改复杂 </p><p>(5)3NF： 若R∈3NF，则每一个非主属性，既不部分依赖于码，也不传递依 赖于码。它会产生与2NF类似的问题，分解模式消除传递函数依赖。</p><p>(6)BCNF：修正的第三范式，①、②定义是等价的。 ① R∈1NF，若 且 时，X必包含码，则R∈BCNF。 ② 若R中每一个决定因素都包含码，则R∈BCNF。</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221201201916141.png" alt="image-20221201201916141"></p><h2 id="六、数据库的完整性、安全性、视图（Integrity-Views-Security）"><a href="#六、数据库的完整性、安全性、视图（Integrity-Views-Security）" class="headerlink" title="六、数据库的完整性、安全性、视图（Integrity,Views, Security）"></a>六、数据库的完整性、安全性、视图（Integrity,Views, Security）</h2><h3 id="1、完整性约束"><a href="#1、完整性约束" class="headerlink" title="1、完整性约束"></a>1、完整性约束</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>[1] Definition </p><p>➢表创建时定义“完整性约束” </p><p>➢按作用对象分： 表级完整性、列级完整性 </p><p>➢按类型分： 实体完整性、参照完整性、用户自定义完整性</p><p>[2] Function 数据库做Updates操作时需检查、遵守这些完整性约束。</p><p>[3] 实施机制 </p><p>➢<code>实体完整性</code>—-实施措施：<strong>主键</strong>、唯一索引、非空+唯一 </p><p>➢<code>参照完整性</code>—-实施措施：<strong>外键</strong>、触发器、存储过程 </p><p>➢用户自定义完整性–实施措施：非空、缺省值、取值约束等</p><h4 id="Create-Table语句中的完整性约束"><a href="#Create-Table语句中的完整性约束" class="headerlink" title="Create Table语句中的完整性约束"></a>Create Table语句中的完整性约束</h4><p>[1] Definition  Create Table</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [schema.]tablename</span><br><span class="line">    ( colname datatype [<span class="keyword">DEFAULT</span> &#123;default_constant <span class="operator">|</span> <span class="keyword">NULL</span>&#125;]</span><br><span class="line">    [col_constr &#123;col_constr. . .&#125;] <span class="operator">|</span> table_constr</span><br><span class="line">    &#123; , &#123;colname datatype [<span class="keyword">DEFAULT</span> &#123;default_constant <span class="operator">|</span> <span class="keyword">NULL</span>&#125;]</span><br><span class="line">    [col_constr &#123;col_constr. . .&#125;] <span class="operator">|</span> table_constr&#125; . . . &#125; );</span><br></pre></td></tr></table></figure><p>Qalifier (限定词)： Owner . Tablename</p><p>➢ 每列必须定义为：► 列名► 数据类型</p><p>➢ 每列还允许有：</p><p>► 可选的DEFAULT子句<br>► 由“col_constr”表示的列约束列表</p><p>[2] Example: Create Table statement for “products”.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> products (pid <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    pname <span class="type">varchar</span>(<span class="number">13</span>), city <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    quantity <span class="type">integer</span> <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line">    price <span class="type">double precision</span> <span class="keyword">default</span> <span class="number">0.0</span>,</span><br><span class="line">    <span class="keyword">primary</span> key (pid) ); # 主键</span><br></pre></td></tr></table></figure><p>[3] Example: Create Table statement for “customers”. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> customers (cid <span class="type">char</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>, # 非空 <span class="operator">+</span> 唯一 <span class="operator">=</span> <span class="keyword">primary</span> key</span><br><span class="line">    cname <span class="type">varchar</span>(<span class="number">13</span>), city <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    discnt <span class="type">real</span> <span class="keyword">constraint</span> discnt_max <span class="keyword">check</span> (discnt<span class="operator">&lt;=</span><span class="number">15.0</span>))</span><br></pre></td></tr></table></figure><p>[4] Column Constraints 列级约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">[<span class="keyword">CONSTRAINT</span> constraint_name]</span><br><span class="line"><span class="keyword">UNIQUE</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span> KEY <span class="operator">|</span> <span class="keyword">CHECK</span> (search_cond)</span><br><span class="line"><span class="operator">|</span> <span class="keyword">REFERENCES</span> tablename [(colname) ] [<span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE]&#125;</span><br></pre></td></tr></table></figure><p>➢ CONSTRAINT 每个约束的名称<br>➢ UNIQUE 约束表中所有非空列值都是唯一的<br>➢ PRIMARY KEY指定列作为主键<br>NOT NULL+UNIQUE &#x3D; PRIMARY KEY<br>PRIMARY KEY 和 NOT NULL可以一起使用，但 UNIQUE 和 PRIMARY KEY 不能同时用于列。</p><p>➢ CHECK允许行在“search_cond”中包含约束值。<br>➢ 如果使用 REFERENCES tablename [columnname] 定义的列</p><ul><li>列中的每个值必须为null或值。</li><li>引用表的一列(被参照表&#x2F;主表) 是主键或可选列中指定的列。</li></ul><p>➢ 可选的ON DELETE CASCADE(级联删除)<br>如果正在删除引用表中的行，那么(参照表&#x2F;从表)的行也已删除</p><p>[5] Table Constraints. 表级约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">CONSTRAINT</span> constraint_name] &#123;<span class="keyword">UNIQUE</span> (colname&#123;, colname…&#125;)</span><br><span class="line"><span class="operator">|</span> <span class="keyword">PRIMARY</span> KEY (colname &#123;, colname……&#125;)</span><br><span class="line"><span class="operator">|</span> <span class="keyword">CHECK</span> (search_condition)</span><br><span class="line"><span class="operator">|</span> <span class="keyword">FOREIGN</span> KEY (colname &#123;, colname……&#125;)</span><br><span class="line"><span class="keyword">REFERENCES</span> tablename [(colname &#123;, colname……&#125;)]</span><br><span class="line">[<span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE]&#125;</span><br></pre></td></tr></table></figure><p>➢ UNIQUE是一种将多列指定为表的候选关键字的方法，如果这两个关键字都声明为NULL。</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221202102248275.png" alt="image-20221202102248275"></p><p>➢ FOREIGN KEY…REFERENCES…[ON DELETE…]</p><p>✓ FOREIGN KEYcolumnname将一组列作为FK列出。它们被约束为 等于主表的PK。<br>✓ 如果主表中的行被删除，则从表中引用主表的行也会被删除。</p><p>[6] Example Create tables of CAP DataBase.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> customer ( cid <span class="type">char</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span>, # 主表</span><br><span class="line">    cname <span class="type">varchar</span>(<span class="number">13</span>), city <span class="type">char</span>(<span class="number">20</span>),</span><br><span class="line">    discnt <span class="type">real</span> <span class="keyword">constraint</span> discnt_max <span class="keyword">check</span> (discnt <span class="operator">&lt;=</span> <span class="number">15.0</span>),</span><br><span class="line">    <span class="keyword">primary</span> key ( cid ) ) ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> orders ( ordno <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>, <span class="keyword">month</span> <span class="type">char</span>(<span class="number">3</span>), # 从表</span><br><span class="line">    cid <span class="type">char</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span>, aid <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    pid <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>, qty <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">check</span>(qty <span class="operator">&gt;=</span> <span class="number">0</span>) ,</span><br><span class="line">    dollars <span class="type">float</span> <span class="keyword">default</span> <span class="number">0.0</span> <span class="keyword">check</span>(dollars <span class="operator">&gt;=</span> <span class="number">0.0</span>) ,</span><br><span class="line">    <span class="keyword">primary</span> key (ordno) ,</span><br><span class="line">    <span class="keyword">foreign</span> key (cid) <span class="keyword">references</span> customers,</span><br><span class="line">    <span class="keyword">foreign</span> key (aid) <span class="keyword">references</span> agents,</span><br><span class="line">    <span class="keyword">foreign</span> key (pid) <span class="keyword">references</span> products ) ;</span><br></pre></td></tr></table></figure><h4 id="Primary-Keys-Foreign-Keys-Referent"><a href="#Primary-Keys-Foreign-Keys-Referent" class="headerlink" title="Primary-Keys, Foreign-Keys, Referent"></a>Primary-Keys, Foreign-Keys, Referent</h4><p>主键、外键和引用</p><p>[1] 定义：外键、引用完整性。<br>➢ T1引用引用表(参照表&#x2F;从表), 并且表T1中的一组列F被定义为外键。<br>➢ T2参考参考表(被参照表&#x2F;主表), 并且表T2中的一组列P被定义为主键或候选键。<br>➢ 如果T1的任何行中的F列必须①具有空值（或列为空），或② 其值等于T2的某行上的PK的值相同。<br>➢ 注意：表的外键可能会出现在同一表中的候选键或主键中。</p><p>[2] Example Use Referential Integrity（参照完整性 to define an Enumerated (枚举) Domain of “city” in table “cities”.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> cities (city <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>, <span class="keyword">primary</span> key (city) );</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> customers (cid <span class="type">char</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span>, cname <span class="type">varchar</span>(<span class="number">13</span>),</span><br><span class="line">    city <span class="type">varchar</span>(<span class="number">20</span>), discnt <span class="type">real</span>, <span class="keyword">primary</span> key (cid),</span><br><span class="line">    <span class="keyword">foreign</span> key city <span class="keyword">references</span> cities);</span><br></pre></td></tr></table></figure><p>[3] 完整性约束的测试矩阵</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221202110445083.png" alt="image-20221202110445083"></p><h4 id="Alter-Table-Statement-更改表声明"><a href="#Alter-Table-Statement-更改表声明" class="headerlink" title="Alter Table Statement 更改表声明"></a>Alter Table Statement 更改表声明</h4><p>[1] 功能：更改现有表的结构。<br>前提：（1）表已经存在（2）的所有者具有Alter权限</p><p>[2] Alter Table statement </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename</span><br><span class="line">    [<span class="keyword">ADD</span> (&#123;colname datatype [<span class="keyword">DEFAULT</span> &#123;default_constant<span class="operator">|</span> <span class="keyword">NULL</span>&#125;]</span><br><span class="line">    [col_constr &#123;col_constr...&#125;] <span class="operator">|</span> table_constr&#125; &#123;, ...&#125;)]</span><br><span class="line">    [<span class="keyword">DROP</span> &#123;<span class="keyword">COLUMN</span> columnname <span class="operator">|</span> (columnname &#123;, columnname…&#125;)&#125;]</span><br><span class="line">    [MODIFY (columnname data<span class="operator">-</span>type</span><br><span class="line">    [<span class="keyword">DEFAULT</span> &#123;default_const<span class="operator">|</span><span class="keyword">NULL</span>&#125;] [[<span class="keyword">NOT</span>] <span class="keyword">NULL</span>] &#123;, ...&#125;)]</span><br><span class="line">    [<span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> constr_name]</span><br><span class="line">    [<span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY]</span><br><span class="line">    [ENABLE <span class="keyword">and</span> DISABLE clauses <span class="keyword">for</span> constraints];</span><br></pre></td></tr></table></figure><p>[3] Example：修改orders表中的month为日期类型、将ordno字段改为实型. </p><p>思路：(1) 创建日期型字段order_date, 再取出原month值拼上“年、日”回填； (2) 修改ordno字段的类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> orders <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY (ordno),</span><br><span class="line"><span class="keyword">ADD</span> order_date <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">default</span> “<span class="number">2018</span><span class="operator">/</span><span class="number">01</span><span class="operator">/</span><span class="number">01</span>”,</span><br><span class="line">MODIFY ordno <span class="type">real</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> orders <span class="keyword">set</span> order_date<span class="operator">=</span> ……(<span class="keyword">month</span>) ;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> orders <span class="keyword">DROP</span> <span class="keyword">month</span> ;</span><br></pre></td></tr></table></figure><h4 id="Non-Procedural-x2F-Procedural-Integrity-Constraints-非程序-x2F-程序完整性约束"><a href="#Non-Procedural-x2F-Procedural-Integrity-Constraints-非程序-x2F-程序完整性约束" class="headerlink" title="Non-Procedural &#x2F; Procedural Integrity Constraints 非程序&#x2F;程序完整性约束"></a>Non-Procedural &#x2F; Procedural Integrity Constraints 非程序&#x2F;程序完整性约束</h4><p>[1] The non-procedural constraints: Using “foreign key” </p><p>Eg: Student ( sno, sname, sdept) SC (cno, sno, score) </p><p>如果删除Student行，则删除SC行关于SC.sno&#x3D;Student.sno的行必须级联删除。</p><p>[2] 程序约束：Triggers（触发器）或 Procedures（程序）<br>•灵活性<br>•用户在DBMS中的定义</p><h4 id="触发器Triggers"><a href="#触发器Triggers" class="headerlink" title="触发器Triggers"></a>触发器Triggers</h4><p>◼ 呈现DBMS的反应行为<br>◼ 规则-类似于过程，但执行是自动的<br>◼ 大多数商业DBMS通过“触发器”提供此功能<br>（触发器关联一个表，由激活表事件)</p><p>◼ DBMS通过“触发器”提供此功能基于事件条件操作范例：Event-Condition-Action<br>◼ 事件event：通过SQL  insert, delete or update<br>◼ 条件Condition：SQL谓词<br>◼ 操作Action：SQL语句序列（或扩展SQL，如Oracle中的PL&#x2F;SQL）<br>◼ 关系模型中的触发器可以在两个级别上工作。<br>➢ 行级别：针对操作中的每个元组发生<br>➢ 语句级别：每个SQL只发生一次<br>◼ 触发器可以有两种类型的功能<br>➢ 立即：在事件之前或之后立即完成<br>➢ 延迟：在提交命令后完成</p><p>[3] Create Trigger语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name &#123; BEFORE <span class="operator">|</span> AFTER &#125;</span><br><span class="line">    &#123; <span class="keyword">INSERT</span> <span class="operator">|</span> <span class="keyword">DELETE</span> <span class="operator">|</span> <span class="keyword">UPDATE</span> [<span class="keyword">OF</span> columnname &#123;,columnname…&#125;]&#125;</span><br><span class="line">    <span class="keyword">ON</span> tablename [<span class="keyword">REFERENCING</span> corr_name_def &#123;,corr_name<span class="operator">-</span>def…&#125;]</span><br><span class="line">    [<span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="operator">|</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> STATEMENT]</span><br><span class="line">    [<span class="keyword">WHEN</span> (<span class="keyword">search</span><span class="operator">-</span><span class="keyword">condition</span>)]</span><br><span class="line">    statement <span class="comment">-- (single action)</span></span><br><span class="line">    <span class="operator">|</span> <span class="keyword">BEGIN</span> statement; &#123;statement;…&#125; <span class="keyword">END</span> <span class="comment">-- (multiple actions)</span></span><br></pre></td></tr></table></figure><p>[6] Example  Use an ORACLE trigger to check the DISCNT value of a new customers does not exceed 15.0 (使用ORACLE触发器检查新客户的DISCNT值是否超过15.0)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> discnt_max AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> customers</span><br><span class="line">    <span class="keyword">REFERENCING</span> <span class="keyword">new</span> <span class="keyword">as</span> x <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">    <span class="keyword">WHEN</span> (x.discnt <span class="operator">&gt;</span> <span class="number">15.0</span>)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">    raise_error(<span class="number">-20003</span>, “ invalid discount <span class="keyword">on</span> <span class="keyword">insert</span> ” );</span><br><span class="line">    <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>[4] Drop Trigger 删除触发器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> trigger_name;</span><br></pre></td></tr></table></figure><p>[5] Trigger executed 触发器的执行时间：在以下操作的之前或者之后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">INSERT</span> <span class="operator">|</span> <span class="keyword">DELETE</span> <span class="operator">|</span> <span class="keyword">UPDATE</span> [<span class="keyword">of</span> colname &#123;, colname . . .&#125;]&#125; </span><br></pre></td></tr></table></figure><p>[7] Example： use trigger to implement a referential integrity policy “on delete, set null in the customers-orders foreign key” 使用触发器实现引用完整性策略，删除时，在客户订单外键中设置null”</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> foreign_cid AFTER <span class="keyword">DELETE</span> <span class="keyword">on</span> customers</span><br><span class="line">    <span class="keyword">REFERENCING</span> <span class="keyword">old</span> <span class="keyword">as</span> ocust <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">update</span> orders <span class="keyword">set</span> cid <span class="operator">=</span> <span class="keyword">null</span> <span class="keyword">where</span> cid <span class="operator">=</span> :ocust.cid;</span><br><span class="line">    <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>[8] Example:（保证事务一致性）这里将实现一个“line_items”表，通过触发器对每个订单进行计数。</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221202113713851.png" alt="image-20221202113713851"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">trigger</span> incordern_items after <span class="keyword">insert</span> <span class="keyword">on</span> Orders</span><br><span class="line">    <span class="keyword">referencing</span> <span class="keyword">new</span> <span class="keyword">as</span> nil <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">update</span> Line_items <span class="keyword">set</span> lineno <span class="operator">=</span> lineno<span class="operator">+</span><span class="number">1</span></span><br><span class="line">    <span class="keyword">where</span> ordno <span class="operator">=</span> :nli.ordno;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">trigger</span> decordern_items after <span class="keyword">delete</span> <span class="keyword">on</span> Orders</span><br><span class="line">    <span class="keyword">referencing</span> <span class="keyword">old</span> <span class="keyword">as</span> oldli <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">update</span> Line_items <span class="keyword">set</span> lineno <span class="operator">=</span> lineno<span class="number">-1</span></span><br><span class="line">    <span class="keyword">where</span> ordno <span class="operator">=</span> :oldli.ordno;</span><br><span class="line">    <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>[8] Example: Consider two tables </p><p>Warehouse (Part, QtyAvbl, QtyLimit, QtyReOrd)产品库存(零件号，库存量，库存下限，采购单号) PendingOrders (Part, QtyReOrd, OrderDate) 采购订单(零件号，采购单号，订单日期)</p><p>◼ event: update of QtyAvbl in Warehouse </p><p>◼ condition: new available quantity is less than the (new) quantity new.QtyAvbl &lt; old.QtyLimit (低于库存下限) </p><p>◼ action: if there is no pending order for the part, issue a new order </p><p>insert into PendingOrders values (:new.part, :new.QtyReOrd, sysdate) (为补库存，自动生成采购单)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">trigger</span> Reorder</span><br><span class="line">    after <span class="keyword">update</span> <span class="keyword">of</span> QtyAvbl <span class="keyword">on</span> Warehouse <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line">    <span class="keyword">when</span> (new.QtyAvbl <span class="operator">&lt;</span> old.QtyLimit)</span><br><span class="line">    <span class="keyword">declare</span> X <span class="type">integer</span>;</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">into</span> X <span class="keyword">from</span> PendingOrders <span class="keyword">where</span> Part <span class="operator">=</span> :new.Part;</span><br><span class="line">    if X <span class="operator">=</span> <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> PendingOrders <span class="keyword">values</span> (:new.Part, :new.QtyReOrd, sysdate);</span><br><span class="line">    <span class="keyword">end</span> if;</span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ol><li><p>Three types of Integrity Constrains 三种完整性</p><p>(1) Integrity of Entity (实体完整性) </p><p>(2) Referential Integrity between Entities (实体间的参照完整性) </p><p>(3) Integrity definition by User (用户自定义完整性) </p></li><li><p>Two ways to realize the Referential Integrity 两种方法实现参照物完整性</p><p>(1) Using a Foreign Key 外键</p><p>(2) Using a Trigger 触发器</p></li><li><p>SQL Procedure “Storage Procedure”（存储器过程） Can realize a PROCEDURE（程序） or FUNCTION（功能）</p></li></ol><h3 id="2、视图-View"><a href="#2、视图-View" class="headerlink" title="2、视图 View"></a>2、视图 View</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>[1] 基本表<br>√ 由Create Table创建√ 存储在磁盘上<br>[2] 视图（虚表）<br>√ 视图是子查询的结果，它是一个虚拟表，其中没有数据存储。<br>√ 视图有自己的名称，可以将其视为基表。</p><p>[3] Create View 语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="operator">&lt;</span>视图名<span class="operator">&gt;</span> [(<span class="operator">&lt;</span>列名<span class="operator">&gt;</span> &#123;,<span class="operator">&lt;</span>列名<span class="operator">&gt;</span>…&#125;)]</span><br><span class="line"><span class="keyword">AS</span> <span class="operator">&lt;</span>子查询<span class="operator">&gt;</span> [<span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION];</span><br></pre></td></tr></table></figure><p>WITH CHECK OPTION将不允许按视图进行update or insert</p><p>子查询 is defined as Select, allow UNION, not allow ORDER BY</p><p>[4] Example 1. Create a view “agentorders” that extends the rows of “orders” table to include all information about the agent taking the order.</p><p><img src="/../images/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20221202114943580.png" alt="image-20221202114943580"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">view</span> agentorders (ordno, <span class="keyword">month</span>, cid, aid, pid, qty, charge,aname, acity, <span class="keyword">percent</span>) </span><br><span class="line">    <span class="keyword">as</span> <span class="keyword">select</span> o.ordno, o.month, o.cid, o.aid, o.pid, o.qty, o.dollars,a.aname, a.city, a.percent  <span class="keyword">from</span> orders o, agents a</span><br><span class="line">    <span class="keyword">where</span> o.aid <span class="operator">=</span> a.aid;</span><br></pre></td></tr></table></figure><p>[5] Example 2. Create a view “acorders” that gives all order information and names of the agent and customers involved in order</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> acorders (ordno, <span class="keyword">month</span>, cid, aid, pid, qty, dollars, aname, cname)</span><br><span class="line">    <span class="keyword">as</span> <span class="keyword">select</span> ordno, <span class="keyword">month</span>, ao.cid <span class="keyword">as</span> cid, aid, pid, qty, charge, aname, cname</span><br><span class="line">    <span class="keyword">from</span> agentorders ao, customers c </span><br><span class="line">    <span class="keyword">where</span> ao.cid <span class="operator">=</span> c.cid;</span><br></pre></td></tr></table></figure><p>[6] Example 3. Create a view “cacties” that lists all pairs of cities from “customers” and “agents” tables, where the agent places an order for the customer.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> cacties (ccity, acity) </span><br><span class="line">    <span class="keyword">as</span> <span class="keyword">select</span> c.city, a.city <span class="keyword">from</span> customer c, orders o, agents a</span><br><span class="line">    <span class="keyword">where</span> c.cid <span class="operator">=</span> o.cid <span class="keyword">and</span> o.aid <span class="operator">=</span> a.aid;</span><br></pre></td></tr></table></figure><p>[7] Dropping Tables and Views 删除表和视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> &#123;<span class="keyword">TABLE</span> 表名 <span class="operator">|</span> <span class="keyword">VIEW</span> 视图名&#125; &#123;CASCADE <span class="operator">|</span> RESTRICT&#125;;</span><br></pre></td></tr></table></figure><p>如果该视图还道出了其他试图，则使用CASCADE级联删除把该视图和由他导出的视图一起删除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t1</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> v1 </span><br><span class="line"># 如果有从v1导出的视图 则级联删除</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> v1 CASCADE</span><br></pre></td></tr></table></figure><p>Only “Table or View Owner” can authorized(有权或授权) to drop it </p><h4 id="可更新视图和只读视图"><a href="#可更新视图和只读视图" class="headerlink" title="可更新视图和只读视图"></a>可更新视图和只读视图</h4><p>[1] 基本表中的数据都是可更新的。<br>[2] 某些视图中的数据无法更新。因为不清楚如何转换为基表的唯一更新。</p><p>[3] 要使视图可更新，视图定义中必须有以下限制</p><p>（1） FROM子句必须有一个表（如果是视图，则可更新）。<br>（2） GROUP BY或HAVING子句都不存在。<br>（3） 未指定DISTINCT关键字。<br>（4） WHERE子句没有引用FROM子句中的表的子查询。<br>（5） 结果列很简单：没有表达式，没有列名。</p><p><strong>对视图的更新最终都要转到对基本表的更新</strong></p><h4 id="视图的功能"><a href="#视图的功能" class="headerlink" title="视图的功能"></a>视图的功能</h4><p>[1] 视图为普通用户提供了一种简化查询的方法。<br>[2] 可以通过其视图限制用户访问基表的特定列。这将为基表添加安全性。<br>[3] 视图保持陈旧过时(作废的) 引用它们的表和程序将继续工作。</p><h3 id="3、安全性"><a href="#3、安全性" class="headerlink" title="3、安全性"></a>3、安全性</h3><h4 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h4><p>[1] 数据库的安全性是保护数据库防止不合法使用所造成的数据泄露、更改和破坏。</p><p>[2] 数据库的不安全因素</p><ol><li>非授权用户对数据库的恶意存取和破坏</li><li>数据库中重要或敏感的数据被泄露</li><li>安全环境的脆弱性</li></ol><p>[3] 用户身份的鉴别</p><ol><li>静态口令鉴别（密码）</li><li>动态口令的鉴别（验证码）</li><li>生物特征鉴别</li><li>智能卡鉴别</li></ol><h4 id="数据库的安全性控制"><a href="#数据库的安全性控制" class="headerlink" title="数据库的安全性控制"></a>数据库的安全性控制</h4><p>[1] The GRANT 语法</p><blockquote><p>作用：由表&#x2F;视图表的所有者发布，以向其他用户授权多种访问权限</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> &#123; <span class="keyword">ALL</span> PRIVILEGES <span class="operator">|</span> <span class="operator">&lt;</span>权限<span class="operator">&gt;</span> &#123;, <span class="operator">&lt;</span>权限<span class="operator">&gt;</span>…&#125;&#125;</span><br><span class="line"><span class="keyword">ON</span> [<span class="keyword">TABLE</span>] tablename <span class="operator">|</span> viewname</span><br><span class="line"><span class="keyword">TO</span> &#123;PUBLIC <span class="operator">|</span> <span class="keyword">user</span><span class="operator">-</span>name &#123;,<span class="keyword">user</span><span class="operator">-</span>name…&#125;&#125; [<span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION]</span><br></pre></td></tr></table></figure><p>➢ WITH GRANT OPTION——用户可以授予其他用户相同的权限<br>➢ 表的所有者自动拥有所有权限，并且不能被撤销</p><p>[2] 所有类型的访问权限</p><p>SELECT, DELETE, INSERT, UPDATE [(colname {, colname})], </p><p>REFERENCES [(colname {, colname})] (this privilege grants the right to reference the specified columns from a foreign key)</p><p>[3] Example1. Grant select, update, insert , but not to delete to “tom” on table orders. Then give “tom” authorization for all operations on products.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">select</span>, <span class="keyword">update</span>, <span class="keyword">insert</span> <span class="keyword">ON</span> orders <span class="keyword">to</span> tom;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">all</span> privileges <span class="keyword">ON</span> products <span class="keyword">to</span> tom;</span><br></pre></td></tr></table></figure><p>[4] Example2. Grant permission to user “tom” on customers table to insert, delete any row, update only the “cname” and “city” columns, and select all columns other than the “discnt” column.</p><p>(1) The owner first creates a view. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> cview <span class="keyword">as</span> <span class="keyword">select</span> cid, cname ,city <span class="keyword">from</span> customers;</span><br></pre></td></tr></table></figure><p>(2) Then the owner provides the necessary authorization:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>, <span class="keyword">delete</span>, <span class="keyword">insert</span>, <span class="keyword">update</span> (cname, city) <span class="keyword">on</span> cview <span class="keyword">to</span> tom;</span><br></pre></td></tr></table></figure><p>[5] Example3. Grant permission to user “tom” to perform all accesses on agents with percent greater than 5.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">view</span> agentv <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> agents <span class="keyword">where</span> <span class="keyword">percent</span> <span class="operator">&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> agentv <span class="keyword">to</span> tom;</span><br></pre></td></tr></table></figure><p>[6] REVOKE 语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> &#123;<span class="keyword">ALL</span> PRIVILEGES <span class="operator">|</span> priv &#123;, priv…&#125;&#125; <span class="keyword">on</span> tablename <span class="operator">|</span> viewname</span><br><span class="line"><span class="keyword">FROM</span> &#123; PUBLIC <span class="operator">|</span> <span class="keyword">user</span> &#123;, <span class="keyword">user</span>…&#125; &#125; [CASCADE <span class="operator">|</span>RESTRICT];</span><br></pre></td></tr></table></figure><p>➢ CASCADE——-用户授予的特权和权限都将被删除。<br>➢ RESTRICT——用户的特权被删除，他授予其他用户的特权不被删除。</p><p>Example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> agent <span class="keyword">from</span> tom restrict;</span><br></pre></td></tr></table></figure><h2 id="七、索引（Indexing）"><a href="#七、索引（Indexing）" class="headerlink" title="七、索引（Indexing）"></a>七、索引（Indexing）</h2><h3 id="1、索引概念"><a href="#1、索引概念" class="headerlink" title="1、索引概念"></a>1、索引概念</h3><h3 id="2、聚簇与非聚簇索引"><a href="#2、聚簇与非聚簇索引" class="headerlink" title="2、聚簇与非聚簇索引"></a>2、聚簇与非聚簇索引</h3><h3 id="3、索引使用原则"><a href="#3、索引使用原则" class="headerlink" title="3、索引使用原则"></a>3、索引使用原则</h3>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIO基础</title>
      <link href="/2022/11/22/Netty01-nio/"/>
      <url>/2022/11/22/Netty01-nio/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Netty01-nio/202211171905300.png" alt="image-20221117190504231"></p><h1 id="一-NIO-基础"><a href="#一-NIO-基础" class="headerlink" title="一. NIO 基础"></a>一. NIO 基础</h1><p>non-blocking io 非阻塞 IO</p><h2 id="三大组件"><a href="#三大组件" class="headerlink" title="三大组件"></a>三大组件</h2><h3 id="Channel-amp-Buffer"><a href="#Channel-amp-Buffer" class="headerlink" title="Channel &amp; Buffer"></a>Channel &amp; Buffer</h3><p>channel 有一点类似于 stream，它就是读写数据的<strong>双向通道</strong>，可以从 channel 将数据读入 buffer，也可以将 buffer 的数据写入 channel，而之前的 stream 要么是输入，要么是输出，channel 比 stream 更为底层</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">channel --&gt; buffer</span><br><span class="line">buffer --&gt; channel</span><br></pre></td></tr></table></figure><p>常见的 Channel 有</p><ul><li>FileChannel  文件</li><li>DatagramChannel   用来做UDP的</li><li>SocketChannel 用来做TCP的，服务器、客户端都能用</li><li>ServerSocketChannel 用来做TCP的，服务器</li></ul><p>buffer内存缓冲区，buffer 则用来缓冲读写数据，常见的 buffer 有</p><ul><li>ByteBuffer 抽象类 下边是实现类<ul><li>MappedByteBuffer</li><li>DirectByteBuffer</li><li>HeapByteBuffer</li></ul></li><li>ShortBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>FloatBuffer</li><li>DoubleBuffer</li><li>CharBuffer</li></ul><p>buffer相当于应用程序跟文件和网络的一个桥梁。</p><h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><p>选择器</p><p>selector 单从字面意思不好理解，需要结合服务器的设计演化来理解它的用途</p><h4 id="多线程版设计"><a href="#多线程版设计" class="headerlink" title="多线程版设计"></a>多线程版设计</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">subgraph 多线程版</span><br><span class="line">t1(thread) --&gt; s1(socket1)</span><br><span class="line">t2(thread) --&gt; s2(socket2)</span><br><span class="line">t3(thread) --&gt; s3(socket3)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="⚠️-多线程版缺点"><a href="#⚠️-多线程版缺点" class="headerlink" title="⚠️ 多线程版缺点"></a>⚠️ 多线程版缺点</h4><ul><li>内存占用高，服务器在高连接数时可能会瘫痪</li><li>线程上下文切换成本高</li><li>只适合连接数少的场景</li></ul><h4 id="线程池版设计"><a href="#线程池版设计" class="headerlink" title="线程池版设计"></a>线程池版设计</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">subgraph 线程池版</span><br><span class="line">t4(thread) --&gt; s4(socket1)</span><br><span class="line">t5(thread) --&gt; s5(socket2)</span><br><span class="line">t4(thread) -.-&gt; s6(socket3)</span><br><span class="line">t5(thread) -.-&gt; s7(socket4)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="⚠️-线程池版缺点"><a href="#⚠️-线程池版缺点" class="headerlink" title="⚠️ 线程池版缺点"></a>⚠️ 线程池版缺点</h4><ul><li>工作在阻塞模式下</li></ul><ul><li>阻塞模式下，一个线程仅能处理一个 socket 连接（同一时刻）</li><li>仅适合短连接场景，socket做完处理后，立马断开连接，让线程处理下一个请求。</li></ul><h4 id="selector-版设计"><a href="#selector-版设计" class="headerlink" title="selector 版设计"></a>selector 版设计</h4><p>selector 的作用就是配合一个线程来管理多个 channel，获取这些 channel 上发生的事件，这些 channel 工作在非阻塞模式下，不会让线程吊死在一个 channel 上。适合连接数特别多，但流量低的场景（low traffic）</p><ul><li><p>thread认为为服务员</p></li><li><p>channel认为是顾客</p></li><li><p>selector能够检测顾客的一举一动</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">subgraph selector 版</span><br><span class="line">thread --&gt; selector</span><br><span class="line">selector --&gt; c1(channel)</span><br><span class="line">selector --&gt; c2(channel)</span><br><span class="line">selector --&gt; c3(channel)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master../images/Netty01-nio/202211171930382.png" alt="image-20221117193022324"></p><p>调用 selector 的 select() 会阻塞直到 channel 发生了读写就绪事件，这些事件发生，select 方法就会返回这些事件交给 thread 来处理</p><h2 id="ByteBuffer"><a href="#ByteBuffer" class="headerlink" title="ByteBuffer"></a>ByteBuffer</h2><p>有一普通文本文件 data.txt，内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1234567890abcd</span><br></pre></td></tr></table></figure><p>使用 FileChannel 来读取文件内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChannelDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">RandomAccessFile</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;helloword/data.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> file.getChannel();</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">// 向 buffer 写入</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> channel.read(buffer);</span><br><span class="line">                log.debug(<span class="string">&quot;读到字节数：&#123;&#125;&quot;</span>, len);</span><br><span class="line">                <span class="keyword">if</span> (len == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 切换 buffer 读模式</span></span><br><span class="line">                buffer.flip();</span><br><span class="line">                <span class="keyword">while</span>(buffer.hasRemaining()) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, (<span class="type">char</span>)buffer.get());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 切换 buffer 写模式</span></span><br><span class="line">                buffer.clear();</span><br><span class="line">            &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 读到字节数：10</span><br><span class="line">10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 1</span><br><span class="line">10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 2</span><br><span class="line">10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 3</span><br><span class="line">10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 4</span><br><span class="line">10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 5</span><br><span class="line">10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 6</span><br><span class="line">10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 7</span><br><span class="line">10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 8</span><br><span class="line">10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 9</span><br><span class="line">10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 0</span><br><span class="line">10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 读到字节数：4</span><br><span class="line">10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - a</span><br><span class="line">10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - b</span><br><span class="line">10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - c</span><br><span class="line">10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - d</span><br><span class="line">10:39:03 [DEBUG] [main] c.i.n.ChannelDemo1 - 读到字节数：-1</span><br></pre></td></tr></table></figure><h3 id="ByteBuffer-正确使用姿势"><a href="#ByteBuffer-正确使用姿势" class="headerlink" title="ByteBuffer 正确使用姿势"></a>ByteBuffer 正确使用姿势</h3><ol><li>向 buffer 写入数据，例如调用 channel.read(buffer)</li><li>调用 flip() 切换至<strong>读模式</strong></li><li>从 buffer 读取数据，例如调用 buffer.get()</li><li>调用 clear() 或 compact() 切换至<strong>写模式</strong></li><li>重复 1~4 步骤</li></ol><h3 id="ByteBuffer-结构"><a href="#ByteBuffer-结构" class="headerlink" title="ByteBuffer 结构"></a>ByteBuffer 结构</h3><p>ByteBuffer 有以下重要属性</p><ul><li>capacity 容量</li><li>position 读写指针</li><li>limit 读写限制</li></ul><p>一开始</p><p><img src="/../images/Netty01-nio/0021.png"></p><p>写模式下，position 是写入位置，limit 等于容量，下图表示写入了 4 个字节后的状态</p><p><img src="/../images/Netty01-nio/0018.png"></p><p>flip 动作发生后，position 切换为读取位置，limit 切换为读取限制。从哪读到哪</p><p>position变为开始位置</p><p>limit列换到之前position</p><p><img src="/../images/Netty01-nio/0019.png"></p><p>读取 4 个字节后，状态</p><p><img src="/../images/Netty01-nio/0020.png"></p><p>clear 动作发生后，状态</p><p><img src="/../images/Netty01-nio/0021.png"></p><p>compact 方法，是把未读完的部分向前压缩，然后切换至写模式。</p><p><strong>compact从上次未读完的地方开始写。</strong></p><p><img src="/../images/Netty01-nio/0022.png"></p><h4 id="💡-调试工具类"><a href="#💡-调试工具类" class="headerlink" title="💡 调试工具类"></a>💡 调试工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteBufferUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">char</span>[] BYTE2CHAR = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">char</span>[] HEXDUMP_TABLE = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">256</span> * <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] HEXPADDING = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] HEXDUMP_ROWPREFIXES = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">65536</span> &gt;&gt;&gt; <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] BYTE2HEX = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] BYTEPADDING = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">char</span>[] DIGITS = <span class="string">&quot;0123456789abcdef&quot;</span>.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            HEXDUMP_TABLE[i &lt;&lt; <span class="number">1</span>] = DIGITS[i &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">0x0F</span>];</span><br><span class="line">            HEXDUMP_TABLE[(i &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>] = DIGITS[i &amp; <span class="number">0x0F</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the lookup table for hex dump paddings</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; HEXPADDING.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">padding</span> <span class="operator">=</span> HEXPADDING.length - i;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(padding * <span class="number">3</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; padding; j++) &#123;</span><br><span class="line">                buf.append(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            HEXPADDING[i] = buf.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the lookup table for the start-offset header in each row (up to 64KiB).</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; HEXDUMP_ROWPREFIXES.length; i++) &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">12</span>);</span><br><span class="line">            buf.append(NEWLINE);</span><br><span class="line">            buf.append(Long.toHexString(i &lt;&lt; <span class="number">4</span> &amp; <span class="number">0xFFFFFFFFL</span> | <span class="number">0x100000000L</span>));</span><br><span class="line">            buf.setCharAt(buf.length() - <span class="number">9</span>, <span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">            buf.append(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">            HEXDUMP_ROWPREFIXES[i] = buf.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the lookup table for byte-to-hex-dump conversion</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BYTE2HEX.length; i++) &#123;</span><br><span class="line">            BYTE2HEX[i] = <span class="string">&#x27; &#x27;</span> + StringUtil.byteToHexStringPadded(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the lookup table for byte dump paddings</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BYTEPADDING.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">padding</span> <span class="operator">=</span> BYTEPADDING.length - i;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(padding);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; padding; j++) &#123;</span><br><span class="line">                buf.append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            BYTEPADDING[i] = buf.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the lookup table for byte-to-char conversion</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BYTE2CHAR.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= <span class="number">0x1f</span> || i &gt;= <span class="number">0x7f</span>) &#123;</span><br><span class="line">                BYTE2CHAR[i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                BYTE2CHAR[i] = (<span class="type">char</span>) i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印所有内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> buffer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">debugAll</span><span class="params">(ByteBuffer buffer)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oldlimit</span> <span class="operator">=</span> buffer.limit();</span><br><span class="line">        buffer.limit(buffer.capacity());</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">origin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">256</span>);</span><br><span class="line">        appendPrettyHexDump(origin, buffer, <span class="number">0</span>, buffer.capacity());</span><br><span class="line">        System.out.println(<span class="string">&quot;+--------+-------------------- all ------------------------+----------------+&quot;</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;position: [%d], limit: [%d]\n&quot;</span>, buffer.position(), oldlimit);</span><br><span class="line">        System.out.println(origin);</span><br><span class="line">        buffer.limit(oldlimit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印可读取内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> buffer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">debugRead</span><span class="params">(ByteBuffer buffer)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">256</span>);</span><br><span class="line">        appendPrettyHexDump(builder, buffer, buffer.position(), buffer.limit() - buffer.position());</span><br><span class="line">        System.out.println(<span class="string">&quot;+--------+-------------------- read -----------------------+----------------+&quot;</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;position: [%d], limit: [%d]\n&quot;</span>, buffer.position(), buffer.limit());</span><br><span class="line">        System.out.println(builder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">appendPrettyHexDump</span><span class="params">(StringBuilder dump, ByteBuffer buf, <span class="type">int</span> offset, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isOutOfBounds(offset, length, buf.capacity())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(</span><br><span class="line">                    <span class="string">&quot;expected: &quot;</span> + <span class="string">&quot;0 &lt;= offset(&quot;</span> + offset + <span class="string">&quot;) &lt;= offset + length(&quot;</span> + length</span><br><span class="line">                            + <span class="string">&quot;) &lt;= &quot;</span> + <span class="string">&quot;buf.capacity(&quot;</span> + buf.capacity() + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dump.append(</span><br><span class="line">                <span class="string">&quot;         +-------------------------------------------------+&quot;</span> +</span><br><span class="line">                        NEWLINE + <span class="string">&quot;         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |&quot;</span> +</span><br><span class="line">                        NEWLINE + <span class="string">&quot;+--------+-------------------------------------------------+----------------+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> offset;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">fullRows</span> <span class="operator">=</span> length &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">remainder</span> <span class="operator">=</span> length &amp; <span class="number">0xF</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Dump the rows which have 16 bytes.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; fullRows; row++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rowStartIndex</span> <span class="operator">=</span> (row &lt;&lt; <span class="number">4</span>) + startIndex;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Per-row prefix.</span></span><br><span class="line">            appendHexDumpRowPrefix(dump, row, rowStartIndex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Hex dump</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">rowEndIndex</span> <span class="operator">=</span> rowStartIndex + <span class="number">16</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;</span><br><span class="line">                dump.append(BYTE2HEX[getUnsignedByte(buf, j)]);</span><br><span class="line">            &#125;</span><br><span class="line">            dump.append(<span class="string">&quot; |&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ASCII dump</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;</span><br><span class="line">                dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]);</span><br><span class="line">            &#125;</span><br><span class="line">            dump.append(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Dump the last row which has less than 16 bytes.</span></span><br><span class="line">        <span class="keyword">if</span> (remainder != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rowStartIndex</span> <span class="operator">=</span> (fullRows &lt;&lt; <span class="number">4</span>) + startIndex;</span><br><span class="line">            appendHexDumpRowPrefix(dump, fullRows, rowStartIndex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Hex dump</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">rowEndIndex</span> <span class="operator">=</span> rowStartIndex + remainder;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;</span><br><span class="line">                dump.append(BYTE2HEX[getUnsignedByte(buf, j)]);</span><br><span class="line">            &#125;</span><br><span class="line">            dump.append(HEXPADDING[remainder]);</span><br><span class="line">            dump.append(<span class="string">&quot; |&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Ascii dump</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;</span><br><span class="line">                dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]);</span><br><span class="line">            &#125;</span><br><span class="line">            dump.append(BYTEPADDING[remainder]);</span><br><span class="line">            dump.append(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dump.append(NEWLINE +</span><br><span class="line">                <span class="string">&quot;+--------+-------------------------------------------------+----------------+&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">appendHexDumpRowPrefix</span><span class="params">(StringBuilder dump, <span class="type">int</span> row, <span class="type">int</span> rowStartIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (row &lt; HEXDUMP_ROWPREFIXES.length) &#123;</span><br><span class="line">            dump.append(HEXDUMP_ROWPREFIXES[row]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dump.append(NEWLINE);</span><br><span class="line">            dump.append(Long.toHexString(rowStartIndex &amp; <span class="number">0xFFFFFFFFL</span> | <span class="number">0x100000000L</span>));</span><br><span class="line">            dump.setCharAt(dump.length() - <span class="number">9</span>, <span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">            dump.append(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">short</span> <span class="title function_">getUnsignedByte</span><span class="params">(ByteBuffer buffer, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">short</span>) (buffer.get(index) &amp; <span class="number">0xFF</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ByteBuffer-常见方法"><a href="#ByteBuffer-常见方法" class="headerlink" title="ByteBuffer 常见方法"></a>ByteBuffer 常见方法</h3><h4 id="分配空间"><a href="#分配空间" class="headerlink" title="分配空间"></a>分配空间</h4><p>可以使用 allocate 方法为 ByteBuffer 分配空间，其它 buffer 类也有该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Bytebuffer</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">16</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(ByteBuffer.allocate(<span class="number">16</span>).getClass());</span><br><span class="line">    System.out.println(ByteBuffer.allocateDirect(<span class="number">16</span>).getClass());</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    class java.nio.HeapByteBuffer       - java 堆内存，读写效率低，受到GC影响</span></span><br><span class="line"><span class="comment">    class java.nio.DirectByteBuffer     - 直接内存，读写效率高（少一次拷贝），不会受GC影响，分配速率低，使用不当会发生内存泄漏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="向-buffer-写入数据"><a href="#向-buffer-写入数据" class="headerlink" title="向 buffer 写入数据"></a>向 buffer 写入数据</h4><p>有两种办法</p><ul><li>调用 channel 的 read 方法</li><li>调用 buffer 自己的 put 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">readBytes</span> <span class="operator">=</span> channel.read(buf);</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.put((<span class="type">byte</span>)<span class="number">127</span>);</span><br></pre></td></tr></table></figure><h4 id="从-buffer-读取数据"><a href="#从-buffer-读取数据" class="headerlink" title="从 buffer 读取数据"></a>从 buffer 读取数据</h4><p>同样有两种办法</p><ul><li>调用 channel 的 write 方法</li><li>调用 buffer 自己的 get 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">writeBytes</span> <span class="operator">=</span> channel.write(buf);</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> buf.get();</span><br></pre></td></tr></table></figure><p>get 方法会让 position 读指针向后走，如果想重复读取数据</p><ul><li>可以调用 rewind 方法将 position 重新置为 0</li><li>或者调用 get(int i) 方法获取索引 i 的内容，它不会移动读指针</li></ul><h4 id="mark-和-reset"><a href="#mark-和-reset" class="headerlink" title="mark 和 reset"></a>mark 和 reset</h4><p>mark 是在读取时，做一个标记，即使 position 改变，只要调用 reset 就能回到 mark 的位置</p><blockquote><p><strong>注意</strong></p><p>rewind 和 flip 都会清除 mark 位置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">    buffer.put(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;);</span><br><span class="line">    buffer.flip();<span class="comment">//切换到读模式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//rewind从头读</span></span><br><span class="line">    <span class="comment">/*buffer.get(new byte[4]);</span></span><br><span class="line"><span class="comment">    debugAll(buffer);</span></span><br><span class="line"><span class="comment">    buffer.rewind();</span></span><br><span class="line"><span class="comment">    System.out.println((char) buffer.get());*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//mark &amp; reset</span></span><br><span class="line">    <span class="comment">//mark 做一个标记，记录position位置，reset是将position重置到mark位置</span></span><br><span class="line">    <span class="comment">/*System.out.println((char) buffer.get());</span></span><br><span class="line"><span class="comment">    System.out.println((char) buffer.get());</span></span><br><span class="line"><span class="comment">    buffer.mark();//加标记，索引2 的位置</span></span><br><span class="line"><span class="comment">    System.out.println((char) buffer.get());</span></span><br><span class="line"><span class="comment">    System.out.println((char) buffer.get());</span></span><br><span class="line"><span class="comment">    buffer.reset();//将将position重置到索引2</span></span><br><span class="line"><span class="comment">    System.out.println((char) buffer.get());</span></span><br><span class="line"><span class="comment">    System.out.println((char) buffer.get());*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//get(i)不会改变读索引(position)的位置</span></span><br><span class="line">    System.out.println((<span class="type">char</span>) buffer.get(<span class="number">3</span>));</span><br><span class="line">    debugAll(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串与-ByteBuffer-互转"><a href="#字符串与-ByteBuffer-互转" class="headerlink" title="字符串与 ByteBuffer 互转"></a>字符串与 ByteBuffer 互转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer1</span> <span class="operator">=</span> StandardCharsets.UTF_8.encode(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer2</span> <span class="operator">=</span> Charset.forName(<span class="string">&quot;utf-8&quot;</span>).encode(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"></span><br><span class="line">debug(buffer1);</span><br><span class="line">debug(buffer2);</span><br><span class="line"></span><br><span class="line"><span class="type">CharBuffer</span> <span class="variable">buffer3</span> <span class="operator">=</span> StandardCharsets.UTF_8.decode(buffer1);</span><br><span class="line">System.out.println(buffer3.getClass());</span><br><span class="line">System.out.println(buffer3.toString());</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| e4 bd a0 e5 a5 bd                               |......          |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| e4 bd a0 e5 a5 bd                               |......          |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">class java.nio.HeapCharBuffer</span><br><span class="line">你好</span><br></pre></td></tr></table></figure><h4 id="⚠️-Buffer-的线程安全"><a href="#⚠️-Buffer-的线程安全" class="headerlink" title="⚠️ Buffer 的线程安全"></a>⚠️ Buffer 的线程安全</h4><blockquote><p>Buffer 是<strong>非线程安全的</strong></p></blockquote><h3 id="Scattering-Reads"><a href="#Scattering-Reads" class="headerlink" title="Scattering Reads"></a>Scattering Reads</h3><p>分散读取，有一个文本文件 3parts.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onetwothree</span><br></pre></td></tr></table></figure><p>使用如下方式读取，可以将数据填充至多个 buffer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">RandomAccessFile</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;helloword/3parts.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>)) &#123;</span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> file.getChannel();</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">a</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">b</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">c</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">    channel.read(<span class="keyword">new</span> <span class="title class_">ByteBuffer</span>[]&#123;a, b, c&#125;);</span><br><span class="line">    a.flip();</span><br><span class="line">    b.flip();</span><br><span class="line">    c.flip();</span><br><span class="line">    debug(a);</span><br><span class="line">    debug(b);</span><br><span class="line">    debug(c);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 6f 6e 65                                        |one             |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 74 77 6f                                        |two             |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 74 68 72 65 65                                  |three           |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><h3 id="Gathering-Writes"><a href="#Gathering-Writes" class="headerlink" title="Gathering Writes"></a>Gathering Writes</h3><p>使用如下方式写入，可以将多个 buffer 的数据填充至 channel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">RandomAccessFile</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;helloword/3parts.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>)) &#123;</span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> file.getChannel();</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">d</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">4</span>);</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">e</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">4</span>);</span><br><span class="line">    channel.position(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">    d.put(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;);</span><br><span class="line">    e.put(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125;);</span><br><span class="line">    d.flip();</span><br><span class="line">    e.flip();</span><br><span class="line">    debug(d);</span><br><span class="line">    debug(e);</span><br><span class="line">    channel.write(<span class="keyword">new</span> <span class="title class_">ByteBuffer</span>[]&#123;d, e&#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 66 6f 75 72                                     |four            |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 66 69 76 65                                     |five            |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p>文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onetwothreefourfive</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><blockquote><p>黏包，半包</p></blockquote><p>网络上有多条数据发送给服务端，数据之间使用 \n 进行分隔<br>但由于某种原因这些数据在接收时，被进行了重新组合，例如原始数据有3条为</p><ul><li>Hello,world\n</li><li>I’m zhangsan\n</li><li>How are you?\n</li></ul><p>变成了下面的两个 byteBuffer (黏包，半包)</p><ul><li>Hello,world\nI’m zhangsan\nHo</li><li>w are you?\n</li></ul><p>现在要求你编写程序，将错乱的数据恢复成原始的按 \n 分隔的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">source</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">32</span>);</span><br><span class="line">    <span class="comment">//                     11            24</span></span><br><span class="line">    source.put(<span class="string">&quot;Hello,world\nI&#x27;m zhangsan\nHo&quot;</span>.getBytes());</span><br><span class="line">    split(source);</span><br><span class="line"></span><br><span class="line">    source.put(<span class="string">&quot;w are you?\nhaha!\n&quot;</span>.getBytes());</span><br><span class="line">    split(source);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">split</span><span class="params">(ByteBuffer source)</span> &#123;</span><br><span class="line">    source.flip();</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldLimit</span> <span class="operator">=</span> source.limit();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; oldLimit; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source.get(i) == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">target</span> <span class="operator">=</span> ByteBuffer.allocate(i + <span class="number">1</span> - source.position());</span><br><span class="line">            <span class="comment">// 0 ~ limit</span></span><br><span class="line">            source.limit(i + <span class="number">1</span>);</span><br><span class="line">            target.put(source); <span class="comment">// 从source 读，向 target 写</span></span><br><span class="line">            debugAll(target);</span><br><span class="line">            source.limit(oldLimit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    source.compact();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件编程"><a href="#文件编程" class="headerlink" title="文件编程"></a>文件编程</h2><h3 id="FileChannel"><a href="#FileChannel" class="headerlink" title="FileChannel"></a>FileChannel</h3><h4 id="⚠️-FileChannel-工作模式"><a href="#⚠️-FileChannel-工作模式" class="headerlink" title="⚠️ FileChannel 工作模式"></a>⚠️ FileChannel 工作模式</h4><blockquote><p>FileChannel 只能工作在阻塞模式下</p></blockquote><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><p>不能直接打开 FileChannel，必须通过 FileInputStream、FileOutputStream 或者 RandomAccessFile 来获取 FileChannel，它们都有 getChannel 方法</p><ul><li>通过 FileInputStream 获取的 channel 只能读</li><li>通过 FileOutputStream 获取的 channel 只能写</li><li>通过 RandomAccessFile 是否能读写根据构造 RandomAccessFile 时的读写模式决定</li></ul><h4 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h4><p>会从 channel 读取数据填充 ByteBuffer，返回值表示读到了多少字节，-1 表示到达了文件的末尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">readBytes</span> <span class="operator">=</span> channel.read(buffer);</span><br></pre></td></tr></table></figure><h4 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h4><p>写入的正确姿势如下， SocketChannel(传输有限)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ...;</span><br><span class="line">buffer.put(...); <span class="comment">// 存入数据</span></span><br><span class="line">buffer.flip();   <span class="comment">// 切换读模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(buffer.hasRemaining()) &#123;</span><br><span class="line">    channel.write(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 while 中调用 channel.write 是因为 write 方法并不能保证一次将 buffer 中的内容全部写入 channel</p><h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><p>channel 必须关闭，不过调用了 FileInputStream、FileOutputStream 或者 RandomAccessFile 的 close 方法会间接地调用 channel 的 close 方法</p><h4 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h4><p>获取当前位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">pos</span> <span class="operator">=</span> channel.position();</span><br></pre></td></tr></table></figure><p>设置当前位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">newPos</span> <span class="operator">=</span> ...;</span><br><span class="line">channel.position(newPos);</span><br></pre></td></tr></table></figure><p>设置当前位置时，如果设置为文件的末尾</p><ul><li>这时读取会返回 -1 </li><li>这时写入，会追加内容，但要注意如果 position 超过了文件末尾，再写入时在新内容和原末尾之间会有空洞（00）</li></ul><h4 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h4><p>使用 size 方法获取文件的大小</p><h4 id="强制写入"><a href="#强制写入" class="headerlink" title="强制写入"></a>强制写入</h4><p>操作系统出于性能的考虑，会将数据缓存，不是立刻写入磁盘。可以调用 force(true)  方法将文件内容和元数据（文件的权限等信息）立刻写入磁盘</p><h3 id="3-2-两个-Channel-传输数据"><a href="#3-2-两个-Channel-传输数据" class="headerlink" title="3.2 两个 Channel 传输数据"></a>3.2 两个 Channel 传输数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">FROM</span> <span class="operator">=</span> <span class="string">&quot;helloword/data.txt&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">TO</span> <span class="operator">=</span> <span class="string">&quot;helloword/to.txt&quot;</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line"><span class="keyword">try</span> (<span class="type">FileChannel</span> <span class="variable">from</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FROM).getChannel();</span><br><span class="line">     <span class="type">FileChannel</span> <span class="variable">to</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(TO).getChannel();</span><br><span class="line">    ) &#123;</span><br><span class="line">    from.transferTo(<span class="number">0</span>, from.size(), to);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">&quot;transferTo 用时：&quot;</span> + (end - start) / <span class="number">1000_000.0</span>);</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transferTo 用时：8.2011</span><br></pre></td></tr></table></figure><p>超过 2g 大小的文件传输</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFileChannelTransferTo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">FileChannel</span> <span class="variable">from</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;data.txt&quot;</span>).getChannel();</span><br><span class="line">                <span class="type">FileChannel</span> <span class="variable">to</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;to.txt&quot;</span>).getChannel();</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="comment">// 效率高，底层会利用操作系统的零拷贝进行优化</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> from.size();</span><br><span class="line">            <span class="comment">// left 变量代表还剩余多少字节</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">left</span> <span class="operator">=</span> size; left &gt; <span class="number">0</span>; ) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;position:&quot;</span> + (size - left) + <span class="string">&quot; left:&quot;</span> + left);</span><br><span class="line">                left -= from.transferTo((size - left), left, to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际传输一个超大文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">position:0 left:7769948160</span><br><span class="line">position:2147483647 left:5622464513</span><br><span class="line">position:4294967294 left:3474980866</span><br><span class="line">position:6442450941 left:1327497219</span><br></pre></td></tr></table></figure><h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><p>jdk7 引入了 Path 和 Paths 类</p><ul><li>Path 用来表示文件路径</li><li>Paths 是工具类，用来获取 Path 实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">source</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;1.txt&quot;</span>); <span class="comment">// 相对路径 使用 user.dir 环境变量来定位 1.txt</span></span><br><span class="line"></span><br><span class="line"><span class="type">Path</span> <span class="variable">source</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;d:\\1.txt&quot;</span>); <span class="comment">// 绝对路径 代表了  d:\1.txt</span></span><br><span class="line"></span><br><span class="line"><span class="type">Path</span> <span class="variable">source</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;d:/1.txt&quot;</span>); <span class="comment">// 绝对路径 同样代表了  d:\1.txt</span></span><br><span class="line"></span><br><span class="line"><span class="type">Path</span> <span class="variable">projects</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;d:\\data&quot;</span>, <span class="string">&quot;projects&quot;</span>); <span class="comment">// 代表了  d:\data\projects</span></span><br></pre></td></tr></table></figure><ul><li><code>.</code> 代表了当前路径</li><li><code>..</code> 代表了上一级路径</li></ul><p>例如目录结构如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d:</span><br><span class="line">|- data</span><br><span class="line">|- projects</span><br><span class="line">|- a</span><br><span class="line">|- b</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;d:\\data\\projects\\a\\..\\b&quot;</span>);</span><br><span class="line">System.out.println(path);</span><br><span class="line">System.out.println(path.normalize()); <span class="comment">// 正常化路径</span></span><br></pre></td></tr></table></figure><p>会输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d:\data\projects\a\..\b</span><br><span class="line">d:\data\projects\b</span><br></pre></td></tr></table></figure><h3 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h3><p>检查文件是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/data.txt&quot;</span>);</span><br><span class="line">System.out.println(Files.exists(path));</span><br></pre></td></tr></table></figure><p>创建一级目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/d1&quot;</span>);</span><br><span class="line">Files.createDirectory(path);</span><br></pre></td></tr></table></figure><ul><li>如果目录已存在，会抛异常 FileAlreadyExistsException</li><li>不能一次创建多级目录，否则会抛异常 NoSuchFileException</li></ul><p>创建多级目录用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/d1/d2&quot;</span>);</span><br><span class="line">Files.createDirectories(path);</span><br></pre></td></tr></table></figure><p>拷贝文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">source</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/data.txt&quot;</span>);</span><br><span class="line"><span class="type">Path</span> <span class="variable">target</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/target.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">Files.copy(source, target);</span><br></pre></td></tr></table></figure><ul><li>如果文件已存在，会抛异常 FileAlreadyExistsException</li></ul><p>如果希望用 source 覆盖掉 target，需要用 StandardCopyOption 来控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Files.copy(source, target, StandardCopyOption.REPLACE_EXISTING);</span><br></pre></td></tr></table></figure><p>移动文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">source</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/data.txt&quot;</span>);</span><br><span class="line"><span class="type">Path</span> <span class="variable">target</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/data.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">Files.move(source, target, StandardCopyOption.ATOMIC_MOVE);</span><br></pre></td></tr></table></figure><ul><li>StandardCopyOption.ATOMIC_MOVE 保证文件移动的原子性</li></ul><p>删除文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">target</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/target.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">Files.delete(target);</span><br></pre></td></tr></table></figure><ul><li>如果文件不存在，会抛异常 NoSuchFileException</li></ul><p>删除目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">target</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/d1&quot;</span>);</span><br><span class="line"></span><br><span class="line">Files.delete(target);</span><br></pre></td></tr></table></figure><ul><li>如果目录还有内容，会抛异常 DirectoryNotEmptyException</li></ul><p>遍历目录文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;C:\\Program Files\\Java\\jdk1.8.0_91&quot;</span>);</span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">dirCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">fileCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">    Files.walkFileTree(path, <span class="keyword">new</span> <span class="title class_">SimpleFileVisitor</span>&lt;Path&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> FileVisitResult <span class="title function_">preVisitDirectory</span><span class="params">(Path dir, BasicFileAttributes attrs)</span> </span><br><span class="line">            <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            System.out.println(dir);</span><br><span class="line">            dirCount.incrementAndGet();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.preVisitDirectory(dir, attrs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> FileVisitResult <span class="title function_">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> </span><br><span class="line">            <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            System.out.println(file);</span><br><span class="line">            fileCount.incrementAndGet();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.visitFile(file, attrs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(dirCount); <span class="comment">// 133</span></span><br><span class="line">    System.out.println(fileCount); <span class="comment">// 1479</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统计 jar 的数目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;C:\\Program Files\\Java\\jdk1.8.0_91&quot;</span>);</span><br><span class="line"><span class="type">AtomicInteger</span> <span class="variable">fileCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">Files.walkFileTree(path, <span class="keyword">new</span> <span class="title class_">SimpleFileVisitor</span>&lt;Path&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FileVisitResult <span class="title function_">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> </span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.toFile().getName().endsWith(<span class="string">&quot;.jar&quot;</span>)) &#123;</span><br><span class="line">            fileCount.incrementAndGet();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitFile(file, attrs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(fileCount); <span class="comment">// 724</span></span><br></pre></td></tr></table></figure><p>删除多级目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;d:\\a&quot;</span>);</span><br><span class="line">Files.walkFileTree(path, <span class="keyword">new</span> <span class="title class_">SimpleFileVisitor</span>&lt;Path&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FileVisitResult <span class="title function_">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> </span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Files.delete(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitFile(file, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FileVisitResult <span class="title function_">postVisitDirectory</span><span class="params">(Path dir, IOException exc)</span> </span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Files.delete(dir);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.postVisitDirectory(dir, exc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="⚠️-删除很危险"><a href="#⚠️-删除很危险" class="headerlink" title="⚠️ 删除很危险"></a>⚠️ 删除很危险</h4><blockquote><p>删除是危险操作，确保要递归删除的文件夹没有重要内容</p></blockquote><p>拷贝多级目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> <span class="string">&quot;D:\\Snipaste-1.16.2-x64&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> <span class="string">&quot;D:\\Snipaste-1.16.2-x64aaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">Files.walk(Paths.get(source)).forEach(path -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">targetName</span> <span class="operator">=</span> path.toString().replace(source, target);</span><br><span class="line">        <span class="comment">// 是目录</span></span><br><span class="line">        <span class="keyword">if</span> (Files.isDirectory(path)) &#123;</span><br><span class="line">            Files.createDirectory(Paths.get(targetName));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 是普通文件</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Files.isRegularFile(path)) &#123;</span><br><span class="line">            Files.copy(path, Paths.get(targetName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(end - start);</span><br></pre></td></tr></table></figure><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="非阻塞-vs-阻塞"><a href="#非阻塞-vs-阻塞" class="headerlink" title="非阻塞 vs 阻塞"></a>非阻塞 vs 阻塞</h3><h4 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h4><ul><li>阻塞模式下，相关方法都会导致线程暂停<ul><li>ServerSocketChannel.accept 会在没有连接建立时让线程暂停</li><li>SocketChannel.read 会在没有数据可读时让线程暂停</li><li>阻塞的表现其实就是线程暂停了，暂停期间不会占用 cpu，但线程相当于闲置</li></ul></li><li>单线程下，阻塞方法之间相互影响，几乎不能正常工作，需要多线程支持</li><li>但多线程下，有新的问题，体现在以下方面<ul><li>32 位 jvm 一个线程 320k，64 位 jvm 一个线程 1024k，如果连接数过多，必然导致 OOM，并且线程太多，反而会因为频繁上下文切换导致性能降低</li><li>可以采用线程池技术来减少线程数和线程上下文切换，但治标不治本，如果有很多连接建立，但长时间 inactive，会阻塞线程池中所有线程，因此不适合长连接，只适合短连接</li></ul></li></ul><p><strong>阻塞模式下：一个方法的阻塞影响另一个方法的执行。</strong></p><p>服务器端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用nio来理解阻塞模式，单线程</span></span><br><span class="line">        <span class="comment">// 1. 创建ByteBuffer</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建服务器</span></span><br><span class="line">        <span class="type">ServerSocketChannel</span> <span class="variable">ssc</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">        ssc.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 绑定监听端口</span></span><br><span class="line">        ssc.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 连接集合</span></span><br><span class="line">        List&lt;SocketChannel&gt; channels = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 4. accept简历与客户端的连接， SocketChannel用来与客户端之间通信</span></span><br><span class="line">            System.out.println(<span class="string">&quot;connecting...&quot;</span>);</span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> ssc.accept(); <span class="comment">// 阻塞方法，线程停止运行</span></span><br><span class="line">            System.out.println(<span class="string">&quot;connected...&#123;&#125;&quot;</span> + sc);</span><br><span class="line">            channels.add(sc);</span><br><span class="line">            <span class="keyword">for</span> (SocketChannel channel : channels) &#123;</span><br><span class="line">                <span class="comment">// 5. 接受客户端发送的数据</span></span><br><span class="line">                System.out.println(<span class="string">&quot;before read...&#123;&#125;&quot;</span> + channel);</span><br><span class="line">                channel.read(buffer); <span class="comment">// 阻塞方法，线程停止运行</span></span><br><span class="line">                buffer.flip();</span><br><span class="line">                debugAll(buffer);</span><br><span class="line">                buffer.clear();</span><br><span class="line">                System.out.println(<span class="string">&quot;after read...&#123;&#125;&quot;</span> + channel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> SocketChannel.open();</span><br><span class="line">    sc.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;waiting...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="非阻塞"><a href="#非阻塞" class="headerlink" title="非阻塞"></a>非阻塞</h4><ul><li>非阻塞模式下，相关方法都会不会让线程暂停<ul><li>在 ServerSocketChannel.accept 在没有连接建立时，会返回 null，继续运行</li><li>SocketChannel.read 在没有数据可读时，会返回 0，但线程不必阻塞，可以去执行其它 SocketChannel 的 read 或是去执行 ServerSocketChannel.accept </li><li>写数据时，线程只是等待数据写入 Channel 即可，无需等 Channel 通过网络把数据发送出去</li></ul></li><li>但非阻塞模式下，即使没有连接建立，和可读数据，线程仍然在不断运行，白白浪费了 cpu</li><li>数据复制过程中，线程实际还是阻塞的（AIO 改进的地方）</li></ul><p>线程一直在循环，可能会过劳死。</p><p>服务器端，客户端代码不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 使用nio来理解阻塞模式，单线程</span></span><br><span class="line">    <span class="comment">// 1. 创建ByteBuffer</span></span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建服务器</span></span><br><span class="line">    <span class="type">ServerSocketChannel</span> <span class="variable">ssc</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">    ssc.configureBlocking(<span class="literal">false</span>);<span class="comment">// 切换为非阻塞模式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 绑定监听端口</span></span><br><span class="line">    ssc.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 连接集合</span></span><br><span class="line">    List&lt;SocketChannel&gt; channels = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 5. accept简历与客户端的连接， SocketChannel用来与客户端之间通信</span></span><br><span class="line">        <span class="comment">// System.out.println(&quot;connecting...&quot;);</span></span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> ssc.accept(); <span class="comment">// 非阻塞方法，线程继续运行，如果没有连接简建立，但sc为null（切换后为非阻塞模式）</span></span><br><span class="line">        <span class="keyword">if</span> (sc != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;connected...&#123;&#125;&quot;</span> + sc);</span><br><span class="line">            sc.configureBlocking(<span class="literal">false</span>);<span class="comment">// 切换为非阻塞模式</span></span><br><span class="line">            channels.add(sc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (SocketChannel channel : channels) &#123;</span><br><span class="line">            <span class="comment">// 6. 接受客户端发送的数据</span></span><br><span class="line">            <span class="comment">// System.out.println(&quot;before read...&#123;&#125;&quot; + channel);</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> channel.read(buffer);<span class="comment">// 非阻塞方法，线程让然会继续运行， 没有读到数据，read返回0</span></span><br><span class="line">            <span class="keyword">if</span> (read &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                buffer.flip();</span><br><span class="line">                debugAll(buffer);</span><br><span class="line">                buffer.clear();</span><br><span class="line">                System.out.println(<span class="string">&quot;after read...&#123;&#125;&quot;</span> + channel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h4><p>单线程可以配合 Selector 完成对多个 Channel 可读写事件的监控，这称之为多路复用</p><ul><li>多路复用仅针对网络 IO、普通文件 IO 没法利用多路复用</li><li>如果不用 Selector 的非阻塞模式，线程大部分时间都在做无用功，而 Selector 能够保证<ul><li>有可连接事件时才去连接</li><li>有可读事件才去读取</li><li>有可写事件才去写入<ul><li>限于网络传输能力，Channel 未必时时可写，一旦 Channel 可写，会触发 Selector 的可写事件</li></ul></li></ul></li></ul><h3 id="Selector-1"><a href="#Selector-1" class="headerlink" title="Selector"></a>Selector</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">subgraph selector 版</span><br><span class="line">thread --&gt; selector</span><br><span class="line">selector --&gt; c1(channel)</span><br><span class="line">selector --&gt; c2(channel)</span><br><span class="line">selector --&gt; c3(channel)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>好处</p><ul><li>一个线程配合 selector 就可以监控多个 channel 的事件，事件发生线程才去处理。避免非阻塞模式下所做无用功</li><li>让这个线程能够被充分利用</li><li>节约了线程的数量</li><li>减少了线程上下文切换</li></ul><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br></pre></td></tr></table></figure><h4 id="绑定-Channel-事件"><a href="#绑定-Channel-事件" class="headerlink" title="绑定 Channel 事件"></a>绑定 Channel 事件</h4><p>也称之为注册事件，绑定的事件 selector 才会关心 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">channel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"><span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> channel.register(selector, 绑定事件);</span><br></pre></td></tr></table></figure><ul><li>channel 必须工作在非阻塞模式</li><li>FileChannel 没有非阻塞模式，因此不能配合 selector 一起使用</li><li>绑定的事件类型可以有<ul><li>connect - 客户端连接成功时触发</li><li>accept - 服务器端成功接受连接时触发</li><li>read - 数据可读入时触发，有因为接收能力弱，数据暂不能读入的情况</li><li>write - 数据可写出时触发，有因为发送能力弱，数据暂不能写出的情况</li></ul></li></ul><h4 id="监听-Channel-事件"><a href="#监听-Channel-事件" class="headerlink" title="监听 Channel 事件"></a>监听 Channel 事件</h4><p>可以通过下面三种方法来监听是否有事件发生，方法的返回值代表有多少 channel 发生了事件</p><p>方法1，阻塞直到绑定事件发生</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> selector.select();</span><br></pre></td></tr></table></figure><p>方法2，阻塞直到绑定事件发生，或是超时（时间单位为 ms）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> selector.select(<span class="type">long</span> timeout);</span><br></pre></td></tr></table></figure><p>方法3，不会阻塞，也就是不管有没有事件，立刻返回，自己根据返回值检查是否有事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> selector.selectNow();</span><br></pre></td></tr></table></figure><h4 id="💡-select-何时不阻塞"><a href="#💡-select-何时不阻塞" class="headerlink" title="💡 select 何时不阻塞"></a>💡 select 何时不阻塞</h4><blockquote><ul><li>事件发生时<ul><li>客户端发起连接请求，会触发 accept 事件</li><li>客户端发送数据过来，客户端正常、异常关闭时，都会触发 read 事件，另外如果发送的数据大于 buffer 缓冲区，会触发多次读取事件</li><li>channel 可写，会触发 write 事件</li><li>在 linux 下 nio bug 发生时</li></ul></li><li>调用 selector.wakeup()</li><li>调用 selector.close()</li><li>selector 所在线程 interrupt</li></ul></blockquote><h3 id="对案例的分析和补充"><a href="#对案例的分析和补充" class="headerlink" title="对案例的分析和补充"></a>对案例的分析和补充</h3><p><strong>整体的流程</strong>：先注册一个ServerSocketChannel进selector里专门获取连接生成SokertChannel的，然后生成的SokertChannel注册进selector里，有事件进来就迭代处理。</p><p><strong>什么时候注册SokertChannel为read</strong>：建立连接之后在accept事件里面注册read，然后等read事件触发.</p><p><strong>ServerSocketChannel和SokertChannel的区别</strong>：</p><ul><li>ServerSocketChannel是服务器的channel。</li><li>SokertChannel是客户端的channel，用来通信。</li></ul><p><strong>为什么要删除在selectkeys上的key</strong>?</p><p><img src="/../images/Netty01-nio/image-20221123165357016.png" alt="image-20221123165357016"></p><p><img src="/../images/Netty01-nio/image-20221123170138209.png" alt="image-20221123170138209"></p><p><img src="/../images/Netty01-nio/image-20221123170207056.png" alt="image-20221123170207056"></p><p>selector内部存在一个监听集合，而selectkeys是状态发生变化的集合。从状态发生变化的集合中移除元素，不代表监听列表中的元素被移除了。而在原例题中，客户端发送数据，出现空指针异常，是因为在selectkeys（没删除第一个ssckey），该key是accept请求，进入到第一个if中，因为没有客户端连接，所以channel.accept()返回null。执行下一句就会报错。所以只要拿出了一个key，就要及时在selectkeys上删除。</p><p><strong>对读事件的处理</strong>：</p><p>客户端在关闭之后会发送一个读事件，如果不处理的话，服务起就会挂掉。</p><p>如何解决？</p><ul><li>对于异常关闭的客户端连接，通过捕获异常，在catch中调用key.cancel();关闭。</li><li>对于正常关闭的客户端连接，通过判断read的返回值，如果是-1说明已经关闭了，调用key.cancel();关闭。</li><li>因为客户端断开了，因此需要将key取消（从selector的key集合正真删除key）</li></ul><h3 id="处理-accept-事件"><a href="#处理-accept-事件" class="headerlink" title="处理 accept 事件"></a>处理 accept 事件</h3><p>客户端代码为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>)) &#123;</span><br><span class="line">            System.out.println(socket);</span><br><span class="line">            socket.getOutputStream().write(<span class="string">&quot;world&quot;</span>.getBytes());</span><br><span class="line">            System.in.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器端代码为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChannelDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ServerSocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> ServerSocketChannel.open()) &#123;</span><br><span class="line">            channel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line">            System.out.println(channel);</span><br><span class="line">            <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">            channel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">            channel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> selector.select();</span><br><span class="line"><span class="comment">//                int count = selector.selectNow();</span></span><br><span class="line">                log.debug(<span class="string">&quot;select count: &#123;&#125;&quot;</span>, count);</span><br><span class="line"><span class="comment">//                if(count &lt;= 0) &#123;</span></span><br><span class="line"><span class="comment">//                    continue;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取所有事件</span></span><br><span class="line">                Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 遍历所有事件，逐一处理</span></span><br><span class="line">                Iterator&lt;SelectionKey&gt; iter = keys.iterator();</span><br><span class="line">                <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">                    <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iter.next();</span><br><span class="line">                    <span class="comment">// 判断事件类型</span></span><br><span class="line">                    <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                        <span class="type">ServerSocketChannel</span> <span class="variable">c</span> <span class="operator">=</span> (ServerSocketChannel) key.channel();</span><br><span class="line">                        <span class="comment">// 必须处理</span></span><br><span class="line">                        <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> c.accept();</span><br><span class="line">                        log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, sc);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 处理完毕，必须将事件移除</span></span><br><span class="line">                    iter.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="💡-事件发生后能否不处理"><a href="#💡-事件发生后能否不处理" class="headerlink" title="💡 事件发生后能否不处理"></a>💡 事件发生后能否不处理</h4><blockquote><p>事件不处理，等于一直有这个事件，select方法就不会阻塞了。</p><p>所以事件发生后，要么处理(accept)，要么取消（cancel），不能什么都不做，否则下次该事件仍会触发，这是因为 nio 底层使用的是水平触发</p></blockquote><h3 id="处理-read-事件"><a href="#处理-read-事件" class="headerlink" title="处理 read 事件"></a>处理 read 事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChannelDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ServerSocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> ServerSocketChannel.open()) &#123;</span><br><span class="line">            channel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line">            System.out.println(channel);</span><br><span class="line">            <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">            channel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">            channel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> selector.select();</span><br><span class="line"><span class="comment">//                int count = selector.selectNow();</span></span><br><span class="line">                log.debug(<span class="string">&quot;select count: &#123;&#125;&quot;</span>, count);</span><br><span class="line"><span class="comment">//                if(count &lt;= 0) &#123;</span></span><br><span class="line"><span class="comment">//                    continue;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取所有事件</span></span><br><span class="line">                Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 遍历所有事件，逐一处理</span></span><br><span class="line">                Iterator&lt;SelectionKey&gt; iter = keys.iterator();</span><br><span class="line">                <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">                    <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iter.next();</span><br><span class="line">                    <span class="comment">// 判断事件类型</span></span><br><span class="line">                    <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                        <span class="type">ServerSocketChannel</span> <span class="variable">c</span> <span class="operator">=</span> (ServerSocketChannel) key.channel();</span><br><span class="line">                        <span class="comment">// 必须处理</span></span><br><span class="line">                        <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> c.accept();</span><br><span class="line">                        sc.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                        sc.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                        log.debug(<span class="string">&quot;连接已建立: &#123;&#125;&quot;</span>, sc);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                        <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">                        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">                        <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> sc.read(buffer);</span><br><span class="line">                        <span class="keyword">if</span>(read == -<span class="number">1</span>) &#123;</span><br><span class="line">                            key.cancel();</span><br><span class="line">                            sc.close();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            buffer.flip();</span><br><span class="line">                            debug(buffer);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 处理完毕，必须将事件移除</span></span><br><span class="line">                    iter.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启两个客户端，修改一下发送文字，输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sun.nio.ch.ServerSocketChannelImpl[/0:0:0:0:0:0:0:0:8080]</span><br><span class="line">21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1</span><br><span class="line">21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - 连接已建立: java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:60367]</span><br><span class="line">21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 68 65 6c 6c 6f                                  |hello           |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1</span><br><span class="line">21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - 连接已建立: java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:60378]</span><br><span class="line">21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 77 6f 72 6c 64                                  |world           |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><h4 id="💡-为何要-iter-remove"><a href="#💡-为何要-iter-remove" class="headerlink" title="💡 为何要 iter.remove()"></a>💡 为何要 iter.remove()</h4><blockquote><p>因为 select 在事件发生后，就会将相关的 key 放入 selectedKeys 集合，但不会在处理完后从 selectedKeys 集合中移除，需要我们自己编码删除。例如</p><ul><li>第一次触发了 ssckey 上的 accept 事件，没有移除 ssckey </li><li>第二次触发了 sckey 上的 read 事件，但这时 selectedKeys 中还有上次的 ssckey ，在处理时因为没有真正的 serverSocket 连上了，就会导致空指针异常</li></ul></blockquote><h4 id="💡-cancel-的作用"><a href="#💡-cancel-的作用" class="headerlink" title="💡 cancel 的作用"></a>💡 cancel 的作用</h4><blockquote><p>cancel 会取消注册在 selector 上的 channel，并从 keys 集合中删除 key 后续不会再监听事件</p></blockquote><h4 id="⚠️-不处理边界的问题"><a href="#⚠️-不处理边界的问题" class="headerlink" title="⚠️  不处理边界的问题"></a>⚠️  不处理边界的问题</h4><p>以前有同学写过这样的代码，思考注释中两个问题，以 bio 为例，其实 nio 道理是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ServerSocket ss=<span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9000</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> s.getInputStream();</span><br><span class="line">            <span class="comment">// 这里这么写，有没有问题</span></span><br><span class="line">            <span class="type">byte</span>[] arr = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> in.read(arr);</span><br><span class="line">                <span class="comment">// 这里这么写，有没有问题</span></span><br><span class="line">                <span class="keyword">if</span>(read == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(arr, <span class="number">0</span>, read));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">max</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9000</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> max.getOutputStream();</span><br><span class="line">        out.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">        out.write(<span class="string">&quot;world&quot;</span>.getBytes());</span><br><span class="line">        out.write(<span class="string">&quot;你好&quot;</span>.getBytes());</span><br><span class="line">        max.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hell</span><br><span class="line">owor</span><br><span class="line">ld�</span><br><span class="line">�好</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为什么？</p><h4 id="处理消息的边界"><a href="#处理消息的边界" class="headerlink" title="处理消息的边界"></a>处理消息的边界</h4><p><img src="/../images/Netty01-nio/0023.png"></p><p><img src="/../images/Netty01-nio/image-20221123184612089.png" alt="image-20221123184612089"></p><ul><li>一种思路是固定消息长度，数据包大小一样，服务器按预定长度读取，缺点是浪费带宽</li><li>另一种思路是按分隔符拆分，缺点是效率低</li><li>TLV 格式，即 Type 类型、Length 长度、Value 数据，类型和长度已知的情况下，就可以方便获取消息大小，分配合适的 buffer，缺点是 buffer 需要提前分配，如果内容过大，则影响 server 吞吐量<ul><li>Http 1.1 是 TLV 格式</li><li>Http 2.0 是 LTV 格式</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram </span><br><span class="line">participant c1 as 客户端1</span><br><span class="line">participant s as 服务器</span><br><span class="line">participant b1 as ByteBuffer1</span><br><span class="line">participant b2 as ByteBuffer2</span><br><span class="line">c1 -&gt;&gt; s: 发送 01234567890abcdef3333\r</span><br><span class="line">s -&gt;&gt; b1: 第一次 read 存入 01234567890abcdef</span><br><span class="line">s -&gt;&gt; b2: 扩容</span><br><span class="line">b1 -&gt;&gt; b2: 拷贝 01234567890abcdef</span><br><span class="line">s -&gt;&gt; b2: 第二次 read 存入 3333\r</span><br><span class="line">b2 -&gt;&gt; b2: 01234567890abcdef3333\r</span><br></pre></td></tr></table></figure><p>服务器端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">split</span><span class="params">(ByteBuffer source)</span> &#123;</span><br><span class="line">    source.flip();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; source.limit(); i++) &#123;</span><br><span class="line">        <span class="comment">// 找到一条完整消息</span></span><br><span class="line">        <span class="keyword">if</span> (source.get(i) == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> i + <span class="number">1</span> - source.position();</span><br><span class="line">            <span class="comment">// 把这条完整消息存入新的 ByteBuffer</span></span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">target</span> <span class="operator">=</span> ByteBuffer.allocate(length);</span><br><span class="line">            <span class="comment">// 从 source 读，向 target 写</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">                target.put(source.get());</span><br><span class="line">            &#125;</span><br><span class="line">            debugAll(target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    source.compact(); <span class="comment">// 0123456789abcdef  position 16 limit 16</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 创建 selector, 管理多个 channel</span></span><br><span class="line">    <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">    <span class="type">ServerSocketChannel</span> <span class="variable">ssc</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">    ssc.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 2. 建立 selector 和 channel 的联系（注册）</span></span><br><span class="line">    <span class="comment">// SelectionKey 就是将来事件发生后，通过它可以知道事件和哪个channel的事件</span></span><br><span class="line">    <span class="type">SelectionKey</span> <span class="variable">sscKey</span> <span class="operator">=</span> ssc.register(selector, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// key 只关注 accept 事件</span></span><br><span class="line">    sscKey.interestOps(SelectionKey.OP_ACCEPT);</span><br><span class="line">    log.debug(<span class="string">&quot;sscKey:&#123;&#125;&quot;</span>, sscKey);</span><br><span class="line">    ssc.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 3. select 方法, 没有事件发生，线程阻塞，有事件，线程才会恢复运行</span></span><br><span class="line">        <span class="comment">// select 在事件未处理时，它不会阻塞, 事件发生后要么处理，要么取消，不能置之不理</span></span><br><span class="line">        selector.select();</span><br><span class="line">        <span class="comment">// 4. 处理事件, selectedKeys 内部包含了所有发生的事件</span></span><br><span class="line">        Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator(); <span class="comment">// accept, read</span></span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">            <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iter.next();</span><br><span class="line">            <span class="comment">// 处理key 时，要从 selectedKeys 集合中删除，否则下次处理就会有问题</span></span><br><span class="line">            iter.remove();</span><br><span class="line">            log.debug(<span class="string">&quot;key: &#123;&#125;&quot;</span>, key);</span><br><span class="line">            <span class="comment">// 5. 区分事件类型</span></span><br><span class="line">            <span class="keyword">if</span> (key.isAcceptable()) &#123; <span class="comment">// 如果是 accept</span></span><br><span class="line">                <span class="type">ServerSocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (ServerSocketChannel) key.channel();</span><br><span class="line">                <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> channel.accept();</span><br><span class="line">                sc.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">16</span>); <span class="comment">// attachment</span></span><br><span class="line">                <span class="comment">// 将一个 byteBuffer 作为附件关联到 selectionKey 上</span></span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">scKey</span> <span class="operator">=</span> sc.register(selector, <span class="number">0</span>, buffer);</span><br><span class="line">                scKey.interestOps(SelectionKey.OP_READ);</span><br><span class="line">                log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, sc);</span><br><span class="line">                log.debug(<span class="string">&quot;scKey:&#123;&#125;&quot;</span>, scKey);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123; <span class="comment">// 如果是 read</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) key.channel(); <span class="comment">// 拿到触发事件的channel</span></span><br><span class="line">                    <span class="comment">// 获取 selectionKey 上关联的附件</span></span><br><span class="line">                    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> (ByteBuffer) key.attachment();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> channel.read(buffer); <span class="comment">// 如果是正常断开，read 的方法的返回值是 -1</span></span><br><span class="line">                    <span class="keyword">if</span>(read == -<span class="number">1</span>) &#123;</span><br><span class="line">                        key.cancel();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        split(buffer);</span><br><span class="line">                        <span class="comment">// 需要扩容</span></span><br><span class="line">                        <span class="keyword">if</span> (buffer.position() == buffer.limit()) &#123;</span><br><span class="line">                            <span class="type">ByteBuffer</span> <span class="variable">newBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(buffer.capacity() * <span class="number">2</span>);</span><br><span class="line">                            buffer.flip();</span><br><span class="line">                            newBuffer.put(buffer); <span class="comment">// 0123456789abcdef3333\n</span></span><br><span class="line">                            key.attach(newBuffer);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    key.cancel();  <span class="comment">// 因为客户端断开了,因此需要将 key 取消（从 selector 的 keys 集合中真正删除 key）</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> SocketChannel.open();</span><br><span class="line">sc.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>));</span><br><span class="line"><span class="type">SocketAddress</span> <span class="variable">address</span> <span class="operator">=</span> sc.getLocalAddress();</span><br><span class="line"><span class="comment">// sc.write(Charset.defaultCharset().encode(&quot;hello\nworld\n&quot;));</span></span><br><span class="line">sc.write(Charset.defaultCharset().encode(<span class="string">&quot;0123\n456789abcdef&quot;</span>));</span><br><span class="line">sc.write(Charset.defaultCharset().encode(<span class="string">&quot;0123456789abcdef3333\n&quot;</span>));</span><br><span class="line">System.in.read();</span><br></pre></td></tr></table></figure><h4 id="ByteBuffer-大小分配"><a href="#ByteBuffer-大小分配" class="headerlink" title="ByteBuffer 大小分配"></a>ByteBuffer 大小分配</h4><ul><li>每个 channel 都需要记录可能被切分的消息，因为 ByteBuffer 不能被多个 channel 共同使用，因此需要为每个 channel 维护一个独立的 ByteBuffer</li><li>ByteBuffer 不能太大，比如一个 ByteBuffer 1Mb 的话，要支持百万连接就要 1Tb 内存，因此需要设计大小可变的 ByteBuffer<ul><li>一种思路是首先分配一个较小的 buffer，例如 4k，如果发现数据不够，再分配 8k 的 buffer，将 4k buffer 内容拷贝至 8k buffer，优点是消息连续容易处理，缺点是数据拷贝耗费性能，参考实现 <a href="http://tutorials.jenkov.com/java-performance/resizable-array.html">http://tutorials.jenkov.com/java-performance/resizable-array.html</a></li><li>另一种思路是用多个数组组成 buffer，一个数组不够，把多出来的内容写入新的数组，与前面的区别是消息存储不连续解析复杂，优点是避免了拷贝引起的性能损耗</li></ul></li></ul><h3 id="4-5-处理-write-事件"><a href="#4-5-处理-write-事件" class="headerlink" title="4.5 处理 write 事件"></a>4.5 处理 write 事件</h3><h4 id="一次无法写完例子"><a href="#一次无法写完例子" class="headerlink" title="一次无法写完例子"></a>一次无法写完例子</h4><ul><li>非阻塞模式下，无法保证把 buffer 中所有数据都写入 channel，因此需要追踪 write 方法的返回值（代表实际写入字节数）</li><li>用 selector 监听所有 channel 的可写事件，每个 channel 都需要一个 key 来跟踪 buffer，但这样又会导致占用内存过多，就有两阶段策略<ul><li>当消息处理器第一次写入消息时，才将 channel 注册到 selector 上</li><li>selector 检查 channel 上的可写事件，如果所有的数据写完了，就取消 channel 的注册</li><li>如果不取消，会每次可写均会触发 write 事件</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WriteServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocketChannel</span> <span class="variable">ssc</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">        ssc.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        ssc.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">        ssc.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            selector.select();</span><br><span class="line"></span><br><span class="line">            Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator();</span><br><span class="line">            <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iter.next();</span><br><span class="line">                iter.remove();</span><br><span class="line">                <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> ssc.accept();</span><br><span class="line">                    sc.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                    <span class="type">SelectionKey</span> <span class="variable">sckey</span> <span class="operator">=</span> sc.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                    <span class="comment">// 1. 向客户端发送内容</span></span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3000000</span>; i++) &#123;</span><br><span class="line">                        sb.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> Charset.defaultCharset().encode(sb.toString());</span><br><span class="line">                    <span class="type">int</span> <span class="variable">write</span> <span class="operator">=</span> sc.write(buffer);</span><br><span class="line">                    <span class="comment">// 3. write 表示实际写了多少字节</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;实际写入字节:&quot;</span> + write);</span><br><span class="line">                    <span class="comment">// 4. 如果有剩余未读字节，才需要关注写事件</span></span><br><span class="line">                    <span class="keyword">if</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">                        <span class="comment">// read 1  write 4</span></span><br><span class="line">                        <span class="comment">// 在原有关注事件的基础上，多关注 写事件</span></span><br><span class="line">                        sckey.interestOps(sckey.interestOps() + SelectionKey.OP_WRITE);</span><br><span class="line">                        <span class="comment">// 把 buffer 作为附件加入 sckey</span></span><br><span class="line">                        sckey.attach(buffer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">                    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> (ByteBuffer) key.attachment();</span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">write</span> <span class="operator">=</span> sc.write(buffer);</span><br><span class="line">                    System.out.println(<span class="string">&quot;实际写入字节:&quot;</span> + write);</span><br><span class="line">                    <span class="keyword">if</span> (!buffer.hasRemaining()) &#123; <span class="comment">// 写完了</span></span><br><span class="line">                        key.interestOps(key.interestOps() - SelectionKey.OP_WRITE);</span><br><span class="line">                        key.attach(<span class="literal">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WriteClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> SocketChannel.open();</span><br><span class="line">        sc.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        sc.register(selector, SelectionKey.OP_CONNECT | SelectionKey.OP_READ);</span><br><span class="line">        sc.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            selector.select();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator();</span><br><span class="line">            <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iter.next();</span><br><span class="line">                iter.remove();</span><br><span class="line">                <span class="keyword">if</span> (key.isConnectable()) &#123;</span><br><span class="line">                    System.out.println(sc.finishConnect());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">                    count += sc.read(buffer);</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                    System.out.println(count);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="💡-write-为何要取消"><a href="#💡-write-为何要取消" class="headerlink" title="💡 write 为何要取消"></a>💡 write 为何要取消</h4><p>只要向 channel 发送数据时，socket 缓冲可写，这个事件会频繁触发，因此应当只在 socket 缓冲区写不下时再关注可写事件，数据写完之后再取消关注</p><h3 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h3><h4 id="💡-利用多线程优化"><a href="#💡-利用多线程优化" class="headerlink" title="💡 利用多线程优化"></a>💡 利用多线程优化</h4><blockquote><p>现在都是多核 cpu，设计时要充分考虑别让 cpu 的力量被白白浪费</p></blockquote><p><img src="/../images/Netty01-nio/image-20221124104234662.png" alt="image-20221124104234662"></p><blockquote><p>Boss负责连接</p><p>worker负责进行多写</p></blockquote><p>前面的代码只有一个选择器，没有充分利用多核 cpu，如何改进呢？</p><p>分两组选择器</p><ul><li>单线程配一个选择器，专门处理 accept 事件</li><li>创建 cpu 核心数的线程，每个线程配一个选择器，轮流处理 read 事件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChannelDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BossEventLoop</span>().register();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Slf4j</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BossEventLoop</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Selector boss;</span><br><span class="line">        <span class="keyword">private</span> WorkerEventLoop[] workers;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">start</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">index</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">if</span> (!start) &#123;</span><br><span class="line">                <span class="type">ServerSocketChannel</span> <span class="variable">ssc</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">                ssc.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line">                ssc.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                boss = Selector.open();</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">ssckey</span> <span class="operator">=</span> ssc.register(boss, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">                ssckey.interestOps(SelectionKey.OP_ACCEPT);</span><br><span class="line">                workers = initEventLoops();</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="built_in">this</span>, <span class="string">&quot;boss&quot;</span>).start();</span><br><span class="line">                log.debug(<span class="string">&quot;boss start...&quot;</span>);</span><br><span class="line">                start = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> WorkerEventLoop[] initEventLoops() &#123;</span><br><span class="line"><span class="comment">//        EventLoop[] eventLoops = new EventLoop[Runtime.getRuntime().availableProcessors()];</span></span><br><span class="line">            WorkerEventLoop[] workerEventLoops = <span class="keyword">new</span> <span class="title class_">WorkerEventLoop</span>[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; workerEventLoops.length; i++) &#123;</span><br><span class="line">                workerEventLoops[i] = <span class="keyword">new</span> <span class="title class_">WorkerEventLoop</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> workerEventLoops;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    boss.select();</span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iter = boss.selectedKeys().iterator();</span><br><span class="line">                    <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">                        <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iter.next();</span><br><span class="line">                        iter.remove();</span><br><span class="line">                        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                            <span class="type">ServerSocketChannel</span> <span class="variable">c</span> <span class="operator">=</span> (ServerSocketChannel) key.channel();</span><br><span class="line">                            <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> c.accept();</span><br><span class="line">                            sc.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                            log.debug(<span class="string">&quot;&#123;&#125; connected&quot;</span>, sc.getRemoteAddress());</span><br><span class="line">                            workers[index.getAndIncrement() % workers.length].register(sc);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Slf4j</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WorkerEventLoop</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Selector worker;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">start</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentLinkedQueue&lt;Runnable&gt; tasks = <span class="keyword">new</span> <span class="title class_">ConcurrentLinkedQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">WorkerEventLoop</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">if</span> (!start) &#123;</span><br><span class="line">                worker = Selector.open();</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="built_in">this</span>, <span class="string">&quot;worker-&quot;</span> + index).start();</span><br><span class="line">                start = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tasks.add(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">SelectionKey</span> <span class="variable">sckey</span> <span class="operator">=</span> sc.register(worker, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">                    sckey.interestOps(SelectionKey.OP_READ);</span><br><span class="line">                    worker.selectNow();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            worker.wakeup();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    worker.select();</span><br><span class="line">                    <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> tasks.poll();</span><br><span class="line">                    <span class="keyword">if</span> (task != <span class="literal">null</span>) &#123;</span><br><span class="line">                        task.run();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Set&lt;SelectionKey&gt; keys = worker.selectedKeys();</span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iter = keys.iterator();</span><br><span class="line">                    <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">                        <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iter.next();</span><br><span class="line">                        <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                            <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">                            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> sc.read(buffer);</span><br><span class="line">                                <span class="keyword">if</span> (read == -<span class="number">1</span>) &#123;</span><br><span class="line">                                    key.cancel();</span><br><span class="line">                                    sc.close();</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    buffer.flip();</span><br><span class="line">                                    log.debug(<span class="string">&quot;&#123;&#125; message:&quot;</span>, sc.getRemoteAddress());</span><br><span class="line">                                    debugAll(buffer);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                                key.cancel();</span><br><span class="line">                                sc.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        iter.remove();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="💡-如何拿到-cpu-个数"><a href="#💡-如何拿到-cpu-个数" class="headerlink" title="💡 如何拿到 cpu 个数"></a>💡 如何拿到 cpu 个数</h4><blockquote><ul><li>Runtime.getRuntime().availableProcessors() 如果工作在 docker 容器下，因为容器不是物理隔离的，会拿到物理 cpu 个数，而不是容器申请时的个数</li><li>这个问题直到 jdk 10 才修复，使用 jvm 参数 UseContainerSupport 配置， 默认开启</li></ul></blockquote><h3 id="4-7-UDP"><a href="#4-7-UDP" class="headerlink" title="4.7 UDP"></a>4.7 UDP</h3><ul><li>UDP 是无连接的，client 发送数据不会管 server 是否开启</li><li>server 这边的 receive 方法会将接收到的数据存入 byte buffer，但如果数据报文超过 buffer 大小，多出来的数据会被默默抛弃</li></ul><p>首先启动服务器端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UdpServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">DatagramChannel</span> <span class="variable">channel</span> <span class="operator">=</span> DatagramChannel.open()) &#123;</span><br><span class="line">            channel.socket().bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">9999</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;waiting...&quot;</span>);</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">32</span>);</span><br><span class="line">            channel.receive(buffer);</span><br><span class="line">            buffer.flip();</span><br><span class="line">            debug(buffer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">waiting...</span><br></pre></td></tr></table></figure><p>运行客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UdpClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">DatagramChannel</span> <span class="variable">channel</span> <span class="operator">=</span> DatagramChannel.open()) &#123;</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> StandardCharsets.UTF_8.encode(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            <span class="type">InetSocketAddress</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>);</span><br><span class="line">            channel.send(buffer, address);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来服务器端输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 68 65 6c 6c 6f                                  |hello           |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><h2 id="5-NIO-vs-BIO"><a href="#5-NIO-vs-BIO" class="headerlink" title="5. NIO vs BIO"></a>5. NIO vs BIO</h2><h3 id="5-1-stream-vs-channel"><a href="#5-1-stream-vs-channel" class="headerlink" title="5.1 stream vs channel"></a>5.1 stream vs channel</h3><ul><li>stream 不会自动缓冲数据，channel 会利用系统提供的发送缓冲区、接收缓冲区（更为底层）</li><li>stream 仅支持阻塞 API，channel 同时支持阻塞、非阻塞 API，网络 channel 可配合 selector 实现多路复用</li><li>二者均为全双工，即读写可以同时进行</li></ul><h3 id="5-2-IO-模型"><a href="#5-2-IO-模型" class="headerlink" title="5.2 IO 模型"></a>5.2 IO 模型</h3><p>同步阻塞、同步非阻塞、同步多路复用、异步阻塞（没有此情况）、异步非阻塞</p><ul><li>同步：线程自己去获取结果（一个线程）</li><li>异步：线程自己不去获取结果，而是由其它线程送结果（至少两个线程）</li></ul><p>当调用一次 channel.read 或 stream.read 后，会切换至操作系统内核态来完成真正数据读取，而读取又分为两个阶段，分别为：</p><ul><li>等待数据阶段</li><li>复制数据阶段</li></ul><p><img src="/../images/Netty01-nio/0033.png"></p><ul><li><p>阻塞 IO(用户线程被阻塞)</p><p><img src="/../images/Netty01-nio/0039.png"></p></li><li><p>非阻塞  IO</p><p><img src="/../images/Netty01-nio/0035.png"></p></li><li><p>多路复用</p><p><img src="/../images/Netty01-nio/0038.png"></p></li><li><p>信号驱动</p></li><li><p>异步 IO</p><p><img src="/../images/Netty01-nio/0037.png"></p></li><li><p>阻塞 IO vs 多路复用</p><p><img src="/../images/Netty01-nio/0034.png"></p><p><img src="/../images/Netty01-nio/0036.png"></p></li></ul><h4 id="🔖-参考"><a href="#🔖-参考" class="headerlink" title="🔖 参考"></a>🔖 参考</h4><p>UNIX 网络编程 - 卷 I</p><h3 id="5-3-零拷贝"><a href="#5-3-零拷贝" class="headerlink" title="5.3 零拷贝"></a>5.3 零拷贝</h3><h4 id="传统-IO-问题"><a href="#传统-IO-问题" class="headerlink" title="传统 IO 问题"></a>传统 IO 问题</h4><p>传统的 IO 将一个文件通过 socket 写出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;helloword/data.txt&quot;</span>);</span><br><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>)f.length()];</span><br><span class="line">file.read(buf);</span><br><span class="line"></span><br><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ...;</span><br><span class="line">socket.getOutputStream().write(buf);</span><br></pre></td></tr></table></figure><p>内部工作流程是这样的：</p><p><img src="/../images/Netty01-nio/0024.png"></p><ol><li><p>java 本身并不具备 IO 读写能力，因此 read 方法调用后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，去调用操作系统（Kernel）的读能力，将数据读入<strong>内核缓冲区</strong>。这期间用户线程阻塞，操作系统使用 DMA（Direct Memory Access）来实现文件读，其间也不会使用 cpu</p><blockquote><p>DMA 也可以理解为硬件单元，用来解放 cpu 完成文件 IO</p></blockquote></li><li><p>从<strong>内核态</strong>切换回<strong>用户态</strong>，将数据从<strong>内核缓冲区</strong>读入<strong>用户缓冲区</strong>（即 byte[] buf），这期间 cpu 会参与拷贝，无法利用 DMA</p></li><li><p>调用 write 方法，这时将数据从<strong>用户缓冲区</strong>（byte[] buf）写入 <strong>socket 缓冲区</strong>，cpu 会参与拷贝</p></li><li><p>接下来要向网卡写数据，这项能力 java 又不具备，因此又得从<strong>用户态</strong>切换至<strong>内核态</strong>，调用操作系统的写能力，使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 cpu</p></li></ol><p>可以看到中间环节较多，java 的 IO 实际不是物理设备级别的读写，而是缓存的复制，底层的真正读写是操作系统来完成的</p><ul><li>用户态与内核态的切换发生了 3 次，这个操作比较重量级</li><li>数据拷贝了共 4 次</li></ul><h4 id="NIO-优化"><a href="#NIO-优化" class="headerlink" title="NIO 优化"></a>NIO 优化</h4><p>通过 DirectByteBuf </p><ul><li>ByteBuffer.allocate(10)  HeapByteBuffer 使用的还是 java 内存</li><li>ByteBuffer.allocateDirect(10)  DirectByteBuffer 使用的是操作系统内存</li></ul><p><img src="/../images/Netty01-nio/0025.png"></p><p>大部分步骤与优化前相同，不再赘述。唯有一点：java 可以使用 DirectByteBuf 将堆外内存映射到 jvm 内存中来直接访问使用</p><ul><li>这块内存不受 jvm 垃圾回收的影响，因此内存地址固定，有助于 IO 读写</li><li>java 中的 DirectByteBuf 对象仅维护了此内存的虚引用，内存回收分成两步<ul><li>DirectByteBuf 对象被垃圾回收，将虚引用加入引用队列</li><li>通过专门线程访问引用队列，根据虚引用释放堆外内存</li></ul></li><li>减少了一次数据拷贝，用户态与内核态的切换次数没有减少</li></ul><p>进一步优化（底层采用了 linux 2.1 后提供的 sendFile 方法），java 中对应着两个 channel 调用 transferTo&#x2F;transferFrom 方法拷贝数据</p><p><img src="/../images/Netty01-nio/0026.png"></p><ol><li>java 调用 transferTo 方法后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 cpu</li><li>数据从<strong>内核缓冲区</strong>传输到 <strong>socket 缓冲区</strong>，cpu 会参与拷贝</li><li>最后使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 cpu</li></ol><p>可以看到</p><ul><li>只发生了一次用户态与内核态的切换</li><li>数据拷贝了 3 次</li></ul><p>进一步优化（linux 2.4）</p><p><img src="/../images/Netty01-nio/0027.png"></p><ol><li>java 调用 transferTo 方法后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 cpu</li><li>只会将一些 offset 和 length 信息拷入 <strong>socket 缓冲区</strong>，几乎无消耗</li><li>使用 DMA 将 <strong>内核缓冲区</strong>的数据写入网卡，不会使用 cpu</li></ol><p>整个过程仅只发生了一次用户态与内核态的切换，数据拷贝了 2 次。所谓的【零拷贝】，并不是真正无拷贝，而是在不会拷贝重复数据到 jvm 内存中，零拷贝的优点有</p><ul><li>更少的用户态与内核态的切换</li><li>不利用 cpu 计算，减少 cpu 缓存伪共享</li><li>零拷贝适合小文件传输</li></ul><h3 id="5-3-AIO"><a href="#5-3-AIO" class="headerlink" title="5.3 AIO"></a>5.3 AIO</h3><p>AIO 用来解决数据复制阶段的阻塞问题</p><ul><li>同步意味着，在进行读写操作时，线程需要等待结果，还是相当于闲置</li><li>异步意味着，在进行读写操作时，线程不必等待结果，而是将来由操作系统来通过回调方式由另外的线程来获得结果</li></ul><blockquote><p>异步模型需要底层操作系统（Kernel）提供支持</p><ul><li>Windows 系统通过 IOCP 实现了真正的异步 IO</li><li>Linux 系统异步 IO 在 2.6 版本引入，但其底层实现还是用多路复用模拟了异步 IO，性能没有优势</li></ul></blockquote><h4 id="文件-AIO"><a href="#文件-AIO" class="headerlink" title="文件 AIO"></a>文件 AIO</h4><p>先来看看 AsynchronousFileChannel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">AsynchronousFileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> AsynchronousFileChannel.open(Paths.get(<span class="string">&quot;data.txt&quot;</span>), StandardOpenOption.READ);</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">16</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; read begin...&quot;</span>);</span><br><span class="line">            <span class="comment">// 参数1 ByteBuffer</span></span><br><span class="line">            <span class="comment">// 参数2 读取的起始位置</span></span><br><span class="line">            <span class="comment">// 参数3 附件</span></span><br><span class="line">            <span class="comment">// 参数4 回调对象 CompletionHandler</span></span><br><span class="line">            channel.read(buffer, <span class="number">0</span>, buffer, <span class="keyword">new</span> <span class="title class_">CompletionHandler</span>&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completed</span><span class="params">(Integer result, ByteBuffer attachment)</span> &#123; <span class="comment">// read 成功</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; read completed...&quot;</span> + result);</span><br><span class="line">                    attachment.flip();</span><br><span class="line">                    debugAll(attachment);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(Throwable exc, ByteBuffer attachment)</span> &#123; <span class="comment">// read 失败</span></span><br><span class="line">                    exc.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; read end...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">13:44:56 [DEBUG] [main] c.i.aio.AioDemo1 - begin...</span><br><span class="line">13:44:56 [DEBUG] [main] c.i.aio.AioDemo1 - do other things...</span><br><span class="line">13:44:56 [DEBUG] [Thread-5] c.i.aio.AioDemo1 - read completed...2</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 61 0d                                           |a.              |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p>可以看到</p><ul><li>响应文件读取成功的是另一个线程 Thread-5</li><li>主线程并没有 IO 操作阻塞</li></ul><h4 id="💡-守护线程"><a href="#💡-守护线程" class="headerlink" title="💡 守护线程"></a>💡 守护线程</h4><p>默认文件 AIO 使用的线程都是守护线程，所以最后要执行 <code>System.in.read()</code> 以避免守护线程意外结束</p><h4 id="网络-AIO"><a href="#网络-AIO" class="headerlink" title="网络 AIO"></a>网络 AIO</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AioServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">AsynchronousServerSocketChannel</span> <span class="variable">ssc</span> <span class="operator">=</span> AsynchronousServerSocketChannel.open();</span><br><span class="line">        ssc.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line">        ssc.accept(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">AcceptHandler</span>(ssc));</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeChannel</span><span class="params">(AsynchronousSocketChannel sc)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;[%s] %s close\n&quot;</span>, Thread.currentThread().getName(), sc.getRemoteAddress());</span><br><span class="line">            sc.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ReadHandler</span> <span class="keyword">implements</span> <span class="title class_">CompletionHandler</span>&lt;Integer, ByteBuffer&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AsynchronousSocketChannel sc;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ReadHandler</span><span class="params">(AsynchronousSocketChannel sc)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.sc = sc;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completed</span><span class="params">(Integer result, ByteBuffer attachment)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (result == -<span class="number">1</span>) &#123;</span><br><span class="line">                    closeChannel(sc);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.printf(<span class="string">&quot;[%s] %s read\n&quot;</span>, Thread.currentThread().getName(), sc.getRemoteAddress());</span><br><span class="line">                attachment.flip();</span><br><span class="line">                System.out.println(Charset.defaultCharset().decode(attachment));</span><br><span class="line">                attachment.clear();</span><br><span class="line">                <span class="comment">// 处理完第一个 read 时，需要再次调用 read 方法来处理下一个 read 事件</span></span><br><span class="line">                sc.read(attachment, attachment, <span class="built_in">this</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(Throwable exc, ByteBuffer attachment)</span> &#123;</span><br><span class="line">            closeChannel(sc);</span><br><span class="line">            exc.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WriteHandler</span> <span class="keyword">implements</span> <span class="title class_">CompletionHandler</span>&lt;Integer, ByteBuffer&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AsynchronousSocketChannel sc;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">WriteHandler</span><span class="params">(AsynchronousSocketChannel sc)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.sc = sc;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completed</span><span class="params">(Integer result, ByteBuffer attachment)</span> &#123;</span><br><span class="line">            <span class="comment">// 如果作为附件的 buffer 还有内容，需要再次 write 写出剩余内容</span></span><br><span class="line">            <span class="keyword">if</span> (attachment.hasRemaining()) &#123;</span><br><span class="line">                sc.write(attachment);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(Throwable exc, ByteBuffer attachment)</span> &#123;</span><br><span class="line">            exc.printStackTrace();</span><br><span class="line">            closeChannel(sc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AcceptHandler</span> <span class="keyword">implements</span> <span class="title class_">CompletionHandler</span>&lt;AsynchronousSocketChannel, Object&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AsynchronousServerSocketChannel ssc;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">AcceptHandler</span><span class="params">(AsynchronousServerSocketChannel ssc)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.ssc = ssc;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completed</span><span class="params">(AsynchronousSocketChannel sc, Object attachment)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;[%s] %s connected\n&quot;</span>, Thread.currentThread().getName(), sc.getRemoteAddress());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">16</span>);</span><br><span class="line">            <span class="comment">// 读事件由 ReadHandler 处理</span></span><br><span class="line">            sc.read(buffer, buffer, <span class="keyword">new</span> <span class="title class_">ReadHandler</span>(sc));</span><br><span class="line">            <span class="comment">// 写事件由 WriteHandler 处理</span></span><br><span class="line">            sc.write(Charset.defaultCharset().encode(<span class="string">&quot;server hello!&quot;</span>), ByteBuffer.allocate(<span class="number">16</span>), <span class="keyword">new</span> <span class="title class_">WriteHandler</span>(sc));</span><br><span class="line">            <span class="comment">// 处理完第一个 accpet 时，需要再次调用 accept 方法来处理下一个 accept 事件</span></span><br><span class="line">            ssc.accept(<span class="literal">null</span>, <span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(Throwable exc, Object attachment)</span> &#123;</span><br><span class="line">            exc.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
            <tag> Netty </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> 框架 </tag>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty入门</title>
      <link href="/2022/11/22/Netty02-%E5%85%A5%E9%97%A8/"/>
      <url>/2022/11/22/Netty02-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="二-Netty-入门"><a href="#二-Netty-入门" class="headerlink" title="二. Netty 入门"></a>二. Netty 入门</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h3 id="1-1-Netty-是什么？"><a href="#1-1-Netty-是什么？" class="headerlink" title="1.1 Netty 是什么？"></a>1.1 Netty 是什么？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Netty is an asynchronous event-driven network application framework</span><br><span class="line">for rapid development of maintainable high performance protocol servers &amp; clients.</span><br></pre></td></tr></table></figure><p>Netty (通过多路复用)是一个异步的（区分异步IO，这里说的是多线程）、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端</p><h3 id="1-2-Netty-的作者"><a href="#1-2-Netty-的作者" class="headerlink" title="1.2 Netty 的作者"></a>1.2 Netty 的作者</h3><p><img src="/../images/Netty01-nio/0005.png"></p><p>他还是另一个著名网络应用框架 Mina 的重要贡献者</p><h3 id="1-3-Netty-的地位"><a href="#1-3-Netty-的地位" class="headerlink" title="1.3 Netty 的地位"></a>1.3 Netty 的地位</h3><p>Netty 在 Java 网络应用框架中的地位就好比：Spring 框架在 JavaEE 开发中的地位</p><p>以下的框架都使用了 Netty，因为它们有网络通信需求！</p><ul><li>Cassandra - nosql 数据库</li><li>Spark - 大数据分布式计算框架</li><li>Hadoop - 大数据分布式存储框架</li><li>RocketMQ - ali 开源的消息队列</li><li>ElasticSearch - 搜索引擎</li><li>gRPC - rpc 框架</li><li>Dubbo - rpc 框架</li><li>Spring 5.x - flux api 完全抛弃了 tomcat ，使用 netty 作为服务器端</li><li>Zookeeper - 分布式协调框架</li></ul><h3 id="1-4-Netty-的优势"><a href="#1-4-Netty-的优势" class="headerlink" title="1.4 Netty 的优势"></a>1.4 Netty 的优势</h3><ul><li>Netty vs NIO，工作量大，bug 多<ul><li>需要自己构建协议</li><li>解决 TCP 传输问题，如粘包、半包</li><li>epoll 空轮询导致 CPU 100%</li><li>对 API 进行增强，使之更易用，如 FastThreadLocal &#x3D;&gt; ThreadLocal，ByteBuf &#x3D;&gt; ByteBuffer</li></ul></li><li>Netty vs 其它网络应用框架<ul><li>Mina 由 apache 维护，将来 3.x 版本可能会有较大重构，破坏 API 向下兼容性，Netty 的开发迭代更迅速，API 更简洁、文档更优秀</li><li>久经考验，16年，Netty 版本<ul><li>2.x 2004</li><li>3.x 2008</li><li>4.x 2013</li><li>5.x 已废弃（没有明显的性能提升，维护成本高）</li></ul></li></ul></li></ul><h2 id="2-Hello-World"><a href="#2-Hello-World" class="headerlink" title="2. Hello World"></a>2. Hello World</h2><h3 id="2-1-目标"><a href="#2-1-目标" class="headerlink" title="2.1 目标"></a>2.1 目标</h3><p>开发一个简单的服务器端和客户端</p><ul><li>客户端向服务器端发送 hello, world</li><li>服务器仅接收，不返回</li></ul><p>加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.39.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-服务器端"><a href="#2-2-服务器端" class="headerlink" title="2.2 服务器端"></a>2.2 服务器端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>()</span><br><span class="line">    .group(<span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>()) <span class="comment">// 1</span></span><br><span class="line">    .channel(NioServerSocketChannel.class) <span class="comment">// 2</span></span><br><span class="line">    .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123; <span class="comment">// 3</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(NioSocketChannel ch)</span> &#123;</span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">StringDecoder</span>()); <span class="comment">// 5</span></span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;String&gt;() &#123; <span class="comment">// 6</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> &#123;</span><br><span class="line">                    System.out.println(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .bind(<span class="number">8080</span>); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>代码解读</p><ul><li><p>1 处，创建 NioEventLoopGroup，可以简单理解为 <code>线程池 + Selector</code> 后面会详细展开</p></li><li><p>2 处，选择服务 Scoket 实现类，其中 NioServerSocketChannel 表示基于 NIO 的服务器端实现，其它实现还有</p><p><img src="/../images/Netty01-nio/0006.png"></p></li><li><p>3 处，为啥方法叫 childHandler，是接下来添加的处理器都是给 SocketChannel 用的，而不是给 ServerSocketChannel。ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器</p></li><li><p>4 处，ServerSocketChannel 绑定的监听端口</p></li><li><p>5 处，SocketChannel 的处理器，解码 ByteBuf &#x3D;&gt; String</p></li><li><p>6 处，SocketChannel 的业务处理器，使用上一个处理器的处理结果</p></li></ul><h3 id="2-3-客户端"><a href="#2-3-客户端" class="headerlink" title="2.3 客户端"></a>2.3 客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Bootstrap</span>()</span><br><span class="line">    .group(<span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>()) <span class="comment">// 1</span></span><br><span class="line">    .channel(NioSocketChannel.class) <span class="comment">// 2</span></span><br><span class="line">    .handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;Channel&gt;() &#123; <span class="comment">// 3</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(Channel ch)</span> &#123;</span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">StringEncoder</span>()); <span class="comment">// 8</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>) <span class="comment">// 4</span></span><br><span class="line">    .sync() <span class="comment">// 5</span></span><br><span class="line">    .channel() <span class="comment">// 6</span></span><br><span class="line">    .writeAndFlush(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot;: hello world!&quot;</span>); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><p>代码解读</p><ul><li><p>1 处，创建 NioEventLoopGroup，同 Server</p></li><li><p>2 处，选择客户 Socket 实现类，NioSocketChannel 表示基于 NIO 的客户端实现，其它实现还有</p><p><img src="/../images/Netty01-nio/0007.png"></p></li><li><p>3 处，添加 SocketChannel 的处理器，ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器</p></li><li><p>4 处，指定要连接的服务器和端口</p></li><li><p>5 处，Netty 中很多方法都是异步的，如 connect，这时需要使用 sync 方法等待 connect 建立连接完毕</p></li><li><p>6 处，获取 channel 对象，它即为通道抽象，可以进行数据读写操作</p></li><li><p>7 处，写入消息并清空缓冲区</p></li><li><p>8 处，消息会经过通道 handler 处理，这里是将 String &#x3D;&gt; ByteBuf 发出</p></li><li><p>数据经过网络传输，到达服务器端，服务器端 5 和 6 处的 handler 先后被触发，走完一个流程</p></li></ul><h3 id="2-4-流程梳理"><a href="#2-4-流程梳理" class="headerlink" title="2.4 流程梳理"></a>2.4 流程梳理</h3><p><img src="/../images/Netty01-nio/0040.png"></p><h4 id="💡-提示"><a href="#💡-提示" class="headerlink" title="💡 提示"></a>💡 提示</h4><blockquote><p>一开始需要树立正确的观念</p><ul><li>把 channel 理解为数据的通道</li><li>把 msg 理解为流动的数据，最开始输入是 ByteBuf，但经过 pipeline (流水线)的加工，会变成其它类型对象，最后输出又变成 ByteBuf</li><li>把 handler 理解为数据的处理工序<ul><li>工序有多道，合在一起就是 pipeline，pipeline 负责发布事件（读、读取完成…）传播给每个 handler， handler 对自己感兴趣的事件进行处理（重写了相应事件处理方法）</li><li>handler 分 Inbound（入站）和 Outbound（出站） 两类</li><li>addLast就是加入工序</li></ul></li><li>把 eventLoop 理解为处理数据的工人(eventLoop 中的线程可以理解为真正干活的)<ul><li>工人可以管理多个 channel 的 io 操作(通过selector多路复用)，并且一旦工人负责了某个 channel，就要负责到底（绑定）（保证了安全性）</li><li>工人既可以执行 io 操作，也可以进行任务处理，每位工人有任务队列，队列里可以堆放多个 channel 的待处理任务，任务分为普通任务、定时任务</li><li>工人按照 pipeline 顺序，依次按照 handler 的规划（代码）处理数据，可以为每道工序指定不同的工人</li></ul></li></ul></blockquote><h2 id="3-组件"><a href="#3-组件" class="headerlink" title="3. 组件"></a>3. 组件</h2><h3 id="3-1-EventLoop"><a href="#3-1-EventLoop" class="headerlink" title="3.1 EventLoop"></a>3.1 EventLoop</h3><p>事件循环对象</p><p>EventLoop 本质是一个单线程执行器（同时维护了一个 Selector），里面有 run 方法处理 Channel 上源源不断的 io 事件。</p><p>它的继承关系比较复杂</p><ul><li>一条线是继承自 j.u.c.ScheduledExecutorService 因此包含了线程池中所有的方法</li><li>另一条线是继承自 netty 自己的 OrderedEventExecutor，<ul><li>提供了 boolean inEventLoop(Thread thread) 方法判断一个线程是否属于此 EventLoop</li><li>提供了 parent 方法来看看自己属于哪个 EventLoopGroup</li></ul></li></ul><p>事件循环组</p><p>EventLoopGroup 是一组 EventLoop，Channel 一般会调用 EventLoopGroup 的 register 方法来绑定其中一个 EventLoop，后续这个 Channel 上的 io 事件都由此 EventLoop 来处理（保证了 io 事件处理时的线程安全）</p><ul><li>继承自 netty 自己的 EventExecutorGroup<ul><li>实现了 Iterable 接口提供遍历 EventLoop 的能力</li><li>另有 next 方法获取集合中下一个 EventLoop</li></ul></li></ul><p>以一个简单的实现为例：</p><p>初始化核心数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建事件循环组</span></span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">2</span>); <span class="comment">// io时间、普通任务、定时任务</span></span><br><span class="line"><span class="comment">//        EventLoopGroup group = new DefaultEventLoopGroup(2); // 普通任务、定时任务</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// cpu的核心数（因为有超线程技术，原来是8核16线程，这里打印了16核）</span></span><br><span class="line">        <span class="comment">// 如果不设置EventLoop的线程数，默认的就是核心数*2 就是32</span></span><br><span class="line">        System.out.println(NettyRuntime.availableProcessors());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内部创建了两个 EventLoop, 每个 EventLoop 维护一个线程</span></span><br><span class="line"><span class="type">DefaultEventLoopGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultEventLoopGroup</span>(<span class="number">2</span>);</span><br><span class="line">System.out.println(group.next());</span><br><span class="line">System.out.println(group.next());</span><br><span class="line">System.out.println(group.next());</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">io.netty.channel.DefaultEventLoop@60f82f98</span><br><span class="line">io.netty.channel.DefaultEventLoop@35f983a6</span><br><span class="line">io.netty.channel.DefaultEventLoop@60f82f98</span><br></pre></td></tr></table></figure><p>也可以使用 for 循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DefaultEventLoopGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultEventLoopGroup</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (EventExecutor eventLoop : group) &#123;</span><br><span class="line">    System.out.println(eventLoop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">io.netty.channel.DefaultEventLoop@60f82f98</span><br><span class="line">io.netty.channel.DefaultEventLoop@35f983a6</span><br></pre></td></tr></table></figure><h4 id="💡-优雅关闭"><a href="#💡-优雅关闭" class="headerlink" title="💡 优雅关闭"></a>💡 优雅关闭</h4><p>优雅关闭 <code>shutdownGracefully</code> 方法。该方法会首先切换 <code>EventLoopGroup</code> 到关闭状态从而拒绝新的任务的加入，然后在任务队列的任务都处理完成后，停止线程的运行。从而确保整体应用是在正常有序的状态下退出的</p><h4 id="演示-NioEventLoop-处理-io-事件"><a href="#演示-NioEventLoop-处理-io-事件" class="headerlink" title="演示 NioEventLoop 处理 io 事件"></a>演示 NioEventLoop 处理 io 事件</h4><p>服务器端两个 nio worker 工人</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>()</span><br><span class="line">    .group(<span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">1</span>), <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">2</span>))</span><br><span class="line">    .channel(NioServerSocketChannel.class)</span><br><span class="line">    .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(NioSocketChannel ch)</span> &#123;</span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> &#123;</span><br><span class="line">                    <span class="type">ByteBuf</span> <span class="variable">byteBuf</span> <span class="operator">=</span> msg <span class="keyword">instanceof</span> ByteBuf ? ((ByteBuf) msg) : <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (byteBuf != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">16</span>];</span><br><span class="line">                        <span class="type">ByteBuf</span> <span class="variable">len</span> <span class="operator">=</span> byteBuf.readBytes(buf, <span class="number">0</span>, byteBuf.readableBytes());</span><br><span class="line">                        log.debug(<span class="keyword">new</span> <span class="title class_">String</span>(buf));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).bind(<span class="number">8080</span>).sync();</span><br></pre></td></tr></table></figure><p>客户端，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>()</span><br><span class="line">            .group(<span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">1</span>))</span><br><span class="line">            .handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(NioSocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.DEBUG));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .channel(NioSocketChannel.class).connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>)</span><br><span class="line">            .sync()</span><br><span class="line">            .channel();</span><br><span class="line"></span><br><span class="line">    channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(<span class="string">&quot;wangwu&quot;</span>.getBytes()));</span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(<span class="string">&quot;wangwu&quot;</span>.getBytes()));</span><br></pre></td></tr></table></figure><p>最后输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">22:03:34 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - zhangsan       </span><br><span class="line">22:03:36 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - zhangsan       </span><br><span class="line">22:05:36 [DEBUG] [nioEventLoopGroup-3-2] c.i.o.EventLoopTest - lisi           </span><br><span class="line">22:05:38 [DEBUG] [nioEventLoopGroup-3-2] c.i.o.EventLoopTest - lisi           </span><br><span class="line">22:06:09 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - wangwu        </span><br><span class="line">22:06:11 [DEBUG] [nioEventLoopGroup-3-1] c.i.o.EventLoopTest - wangwu         </span><br></pre></td></tr></table></figure><p>可以看到两个工人轮流处理 channel，但工人与 channel 之间进行了绑定</p><p><img src="/../images/Netty01-nio/0042.png"></p><p>再增加两个非 nio 工人</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DefaultEventLoopGroup</span> <span class="variable">normalWorkers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultEventLoopGroup</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>()</span><br><span class="line">    .group(<span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">1</span>), <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">2</span>))</span><br><span class="line">    .channel(NioServerSocketChannel.class)</span><br><span class="line">    .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(NioSocketChannel ch)</span>  &#123;</span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.DEBUG));</span><br><span class="line">            ch.pipeline().addLast(normalWorkers,<span class="string">&quot;myhandler&quot;</span>,</span><br><span class="line">              <span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> &#123;</span><br><span class="line">                    <span class="type">ByteBuf</span> <span class="variable">byteBuf</span> <span class="operator">=</span> msg <span class="keyword">instanceof</span> ByteBuf ? ((ByteBuf) msg) : <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (byteBuf != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">16</span>];</span><br><span class="line">                        <span class="type">ByteBuf</span> <span class="variable">len</span> <span class="operator">=</span> byteBuf.readBytes(buf, <span class="number">0</span>, byteBuf.readableBytes());</span><br><span class="line">                        log.debug(<span class="keyword">new</span> <span class="title class_">String</span>(buf));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).bind(<span class="number">8080</span>).sync();</span><br></pre></td></tr></table></figure><p>客户端代码不变，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）</p><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] REGISTERED</span><br><span class="line">22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] ACTIVE</span><br><span class="line">22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE</span><br><span class="line">22:19:48 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        </span><br><span class="line">22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE</span><br><span class="line">22:19:50 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        </span><br><span class="line">22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] REGISTERED</span><br><span class="line">22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] ACTIVE</span><br><span class="line">22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 6c 69 73 69                                     |lisi            |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE</span><br><span class="line">22:20:25 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            </span><br><span class="line">22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 6c 69 73 69                                     |lisi            |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE</span><br><span class="line">22:20:27 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            </span><br><span class="line">22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] REGISTERED</span><br><span class="line">22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] ACTIVE</span><br><span class="line">22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 77 61 6e 67 77 75                               |wangwu          |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE</span><br><span class="line">22:20:38 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          </span><br><span class="line">22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 77 61 6e 67 77 75                               |wangwu          |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE</span><br><span class="line">22:20:40 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          </span><br></pre></td></tr></table></figure><p>可以看到，nio 工人和 非 nio 工人也分别绑定了 channel（LoggingHandler 由 nio 工人执行，而我们自己的 handler 由非 nio 工人执行）</p><p><img src="/../images/Netty01-nio/0041.png"></p><h4 id="💡-handler-执行中如何换人？"><a href="#💡-handler-执行中如何换人？" class="headerlink" title="💡 handler 执行中如何换人？"></a>💡 handler 执行中如何换人？</h4><p>关键代码 <code>io.netty.channel.AbstractChannelHandlerContext#invokeChannelRead()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">invokeChannelRead</span><span class="params">(<span class="keyword">final</span> AbstractChannelHandlerContext next, Object msg)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">m</span> <span class="operator">=</span> next.pipeline.touch(ObjectUtil.checkNotNull(msg, <span class="string">&quot;msg&quot;</span>), next);</span><br><span class="line">    <span class="comment">// 下一个 handler 的事件循环是否与当前的事件循环是同一个线程</span></span><br><span class="line">    <span class="type">EventExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> next.executor();<span class="comment">//返回下一个handler的eventLoop</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是，直接调用</span></span><br><span class="line">    <span class="keyword">if</span> (executor.inEventLoop()) &#123;<span class="comment">//当前handler中的线程，是否和eventLoop是同一个线程</span></span><br><span class="line">        next.invokeChannelRead(m);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 不是，将要执行的代码作为任务提交给下一个事件循环处理（换人）</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//executor是下一个线程，执行任务</span></span><br><span class="line">        executor.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                next.invokeChannelRead(m);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果两个 handler 绑定的是同一个线程，那么就直接调用</li><li>否则，把要调用的代码封装为一个任务对象，由下一个 handler 的线程来调用</li></ul><h4 id="演示-NioEventLoop-处理普通任务"><a href="#演示-NioEventLoop-处理普通任务" class="headerlink" title="演示 NioEventLoop 处理普通任务"></a>演示 NioEventLoop 处理普通任务</h4><p>NioEventLoop 除了可以处理 io 事件，同样可以向它提交普通任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NioEventLoopGroup</span> <span class="variable">nioWorkers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">log.debug(<span class="string">&quot;server start...&quot;</span>);</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">nioWorkers.execute(()-&gt;&#123;</span><br><span class="line">    log.debug(<span class="string">&quot;normal task...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">22:30:36 [DEBUG] [main] c.i.o.EventLoopTest2 - server start...</span><br><span class="line">22:30:38 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - normal task...</span><br></pre></td></tr></table></figure><blockquote><p>可以用来执行耗时较长的任务</p></blockquote><h4 id="演示-NioEventLoop-处理定时任务"><a href="#演示-NioEventLoop-处理定时任务" class="headerlink" title="演示 NioEventLoop 处理定时任务"></a>演示 NioEventLoop 处理定时任务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NioEventLoopGroup</span> <span class="variable">nioWorkers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">log.debug(<span class="string">&quot;server start...&quot;</span>);</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">nioWorkers.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">22:35:15 [DEBUG] [main] c.i.o.EventLoopTest2 - server start...</span><br><span class="line">22:35:17 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...</span><br><span class="line">22:35:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...</span><br><span class="line">22:35:19 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...</span><br><span class="line">22:35:20 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>可以用来执行定时任务</p></blockquote><h3 id="3-2-Channel"><a href="#3-2-Channel" class="headerlink" title="3.2 Channel"></a>3.2 Channel</h3><p>channel 的主要作用</p><ul><li>close() 可以用来关闭 channel</li><li>closeFuture() 用来处理 channel 的关闭<ul><li>sync 方法作用是同步等待 channel 关闭</li><li>而 addListener 方法是异步等待 channel 关闭</li></ul></li><li>pipeline() 方法添加处理器</li><li>write() 方法将数据写入</li><li>writeAndFlush() 方法将数据写入并刷出</li></ul><h4 id="ChannelFuture"><a href="#ChannelFuture" class="headerlink" title="ChannelFuture"></a>ChannelFuture</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">ChannelFuture</span> <span class="variable">channelFuture</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>()</span><br><span class="line">            .group(<span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>())</span><br><span class="line">            .channel(NioSocketChannel.class)</span><br><span class="line">            .handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span> <span class="comment">// 在连接建立后被调用</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(NioSocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">StringEncoder</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 5. 连接到服务器</span></span><br><span class="line">            <span class="comment">// 异步阻塞，main 发起调用，真正执行connect 是nio线程</span></span><br><span class="line">            .connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>));</span><br><span class="line">    <span class="comment">// channelFuture.sync();</span></span><br><span class="line">    <span class="comment">// 无阻塞向下继续执行获取 channel</span></span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> channelFuture.channel();</span><br><span class="line">    <span class="comment">// 2. 向服务器发送数据</span></span><br><span class="line">    channel.writeAndFlush(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + channel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>要理解connect方法，还有sync方法的作用。</li></ul><p><strong>注意</strong> connect 方法是异步的，意味着不等连接建立，方法执行就返回了。因此 channelFuture 对象中不能【立刻】获得到正确的 Channel 对象</p><p>实验如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 2. 带有Future,Promise 的类型都是和异步方法配套使用，用来处理结果</span></span><br><span class="line">        <span class="type">ChannelFuture</span> <span class="variable">channelFuture</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>()</span><br><span class="line">                .group(<span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>())</span><br><span class="line">                .channel(NioSocketChannel.class)</span><br><span class="line">                .handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span> <span class="comment">// 在连接建立后被调用</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(NioSocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">StringEncoder</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 1. 连接到服务器</span></span><br><span class="line">                <span class="comment">// 异步阻塞，main 发起调用，真正执行connect 是nio线程</span></span><br><span class="line">                .connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.1 使用sync方法同步处理结果</span></span><br><span class="line">          channelFuture.sync(); <span class="comment">// 阻塞住当前线程，直到nio线程连接建立完毕</span></span><br><span class="line">          <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> channelFuture.channel();</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + channel);</span><br><span class="line">          channel.writeAndFlush(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>执行到 1 时，连接未建立，打印 <code>[id: 0x2e1884dd]</code></li><li>执行到 2 时，sync 方法是同步等待连接建立完成</li><li>执行到 3 时，连接肯定建立了，打印 <code>[id: 0x2e1884dd, L:/127.0.0.1:57191 - R:/127.0.0.1:8080]</code></li></ul><p>除了用 sync 方法可以让异步操作同步以外，还可以使用回调的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 2. 带有Future,Promise 的类型都是和异步方法配套使用，用来处理结果</span></span><br><span class="line">        <span class="type">ChannelFuture</span> <span class="variable">channelFuture</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>()</span><br><span class="line">                .group(<span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>())</span><br><span class="line">                .channel(NioSocketChannel.class)</span><br><span class="line">                .handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span> <span class="comment">// 在连接建立后被调用</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(NioSocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">StringEncoder</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 1. 连接到服务器</span></span><br><span class="line">                <span class="comment">// 异步阻塞，main 发起调用，真正执行connect 是nio线程</span></span><br><span class="line">                .connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.2 使用addListener（回调）对象 方法异步处理结果</span></span><br><span class="line">        channelFuture.addListener(<span class="keyword">new</span> <span class="title class_">ChannelFutureListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">// 使用 nio 线程连接建立好后，会调用operationComplete</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> future.channel();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + channel);</span><br><span class="line">                channel.writeAndFlush(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>执行到 1 时，连接未建立，打印 <code>[id: 0x749124ba]</code></li><li>ChannelFutureListener 会在连接建立时被调用（其中 operationComplete 方法），因此执行到 2 时，连接肯定建立了，打印 <code>[id: 0x749124ba, L:/127.0.0.1:57351 - R:/127.0.0.1:8080]</code></li></ul><h4 id="CloseFuture"><a href="#CloseFuture" class="headerlink" title="CloseFuture"></a>CloseFuture</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 ClosedFuture 对象  1. 同步处理关闭 2. 异步处理关闭</span></span><br><span class="line"><span class="type">ChannelFuture</span> <span class="variable">closeFuture</span> <span class="operator">=</span> channel.closeFuture();</span><br><span class="line">closeFuture.sync();</span><br><span class="line">System.out.println(<span class="string">&quot;处理&quot;</span>);</span><br><span class="line"></span><br><span class="line">closeFuture.addListener(<span class="keyword">new</span> <span class="title class_">ChannelFutureListener</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="💡-异步提升的是什么"><a href="#💡-异步提升的是什么" class="headerlink" title="💡 异步提升的是什么"></a>💡 异步提升的是什么</h4><ul><li><p>有些同学看到这里会有疑问：为什么不在一个线程中去执行建立连接、去执行关闭 channel，那样不是也可以吗？非要用这么复杂的异步方式：比如一个线程发起建立连接，另一个线程去真正建立连接</p></li><li><p>还有同学会笼统地回答，因为 netty 异步方式用了多线程、多线程就效率高。其实这些认识都比较片面，多线程和异步所提升的效率并不是所认为的</p></li></ul><p>思考下面的场景，4 个医生给人看病，每个病人花费 20 分钟，而且医生看病的过程中是以病人为单位的，一个病人看完了，才能看下一个病人。假设病人源源不断地来，可以计算一下 4 个医生一天工作 8 小时，处理的病人总数是：<code>4 * 8 * 3 = 96</code></p><p><img src="/../images/Netty01-nio/0044.png"></p><p>经研究发现，看病可以细分为四个步骤，经拆分后每个步骤需要 5 分钟，如下</p><p><img src="/../images/Netty01-nio/0048.png"></p><p>因此可以做如下优化，只有一开始，医生 2、3、4 分别要等待 5、10、15 分钟才能执行工作，但只要后续病人源源不断地来，他们就能够满负荷工作，并且处理病人的能力提高到了 <code>4 * 8 * 12</code> 效率几乎是原来的四倍</p><p><img src="/../images/Netty01-nio/0047.png"></p><p>要点</p><ul><li>单线程没法异步提高效率，必须配合多线程、多核 cpu 才能发挥异步的优势</li><li>异步并没有缩短响应时间，反而有所增加</li><li>合理进行任务拆分，也是利用异步的关键</li></ul><h3 id="3-3-Future-amp-Promise"><a href="#3-3-Future-amp-Promise" class="headerlink" title="3.3 Future &amp; Promise"></a>3.3 Future &amp; Promise</h3><p>在异步处理时，经常用到这两个接口</p><p>首先要说明 netty 中的 Future 与 jdk 中的 Future 同名，但是是两个接口，netty 的 Future 继承自 jdk 的 Future，而 Promise 又对 netty Future 进行了扩展</p><ul><li>jdk Future 只能同步等待任务结束（或成功、或失败）才能得到结果</li><li>netty Future 可以同步等待任务结束得到结果，也可以异步方式得到结果，但都是要等任务结束</li><li>netty Promise 不仅有 netty Future 的功能，而且脱离了任务独立存在，只作为两个线程间传递结果的容器</li></ul><table><thead><tr><th>功能&#x2F;名称</th><th>jdk Future</th><th>netty Future</th><th>Promise</th></tr></thead><tbody><tr><td>cancel</td><td>取消任务</td><td>-</td><td>-</td></tr><tr><td>isCanceled</td><td>任务是否取消</td><td>-</td><td>-</td></tr><tr><td>isDone</td><td>任务是否完成，不能区分成功失败</td><td>-</td><td>-</td></tr><tr><td>get</td><td>获取任务结果，阻塞等待</td><td>-</td><td>-</td></tr><tr><td>getNow</td><td>-</td><td>获取任务结果，非阻塞，还未产生结果时返回 null</td><td>-</td></tr><tr><td>await</td><td>-</td><td>等待任务结束，如果任务失败，不会抛异常，而是通过 isSuccess 判断</td><td>-</td></tr><tr><td>sync</td><td>-</td><td>等待任务结束，如果任务失败，抛出异常</td><td>-</td></tr><tr><td>isSuccess</td><td>-</td><td>判断任务是否成功</td><td>-</td></tr><tr><td>cause</td><td>-</td><td>获取失败信息，非阻塞，如果没有失败，返回null</td><td>-</td></tr><tr><td>addLinstener</td><td>-</td><td>添加回调，异步接收结果</td><td>-</td></tr><tr><td>setSuccess</td><td>-</td><td>-</td><td>设置成功结果</td></tr><tr><td>setFailure</td><td>-</td><td>-</td><td>设置失败结果</td></tr></tbody></table><h4 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h4><p>同步处理任务成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DefaultEventLoop</span> <span class="variable">eventExecutors</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultEventLoop</span>();</span><br><span class="line">DefaultPromise&lt;Integer&gt; promise = <span class="keyword">new</span> <span class="title class_">DefaultPromise</span>&lt;&gt;(eventExecutors);</span><br><span class="line"></span><br><span class="line">eventExecutors.execute(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    log.debug(<span class="string">&quot;set success, &#123;&#125;&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    promise.setSuccess(<span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">log.debug(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>,promise.getNow()); <span class="comment">// 还没有结果</span></span><br><span class="line">log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>,promise.get());</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">11:51:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...</span><br><span class="line">11:51:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null</span><br><span class="line">11:51:54 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set success, 10</span><br><span class="line">11:51:54 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - 10</span><br></pre></td></tr></table></figure><h4 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h4><p>异步处理任务成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DefaultEventLoop</span> <span class="variable">eventExecutors</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultEventLoop</span>();</span><br><span class="line">DefaultPromise&lt;Integer&gt; promise = <span class="keyword">new</span> <span class="title class_">DefaultPromise</span>&lt;&gt;(eventExecutors);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置回调，异步接收结果</span></span><br><span class="line">promise.addListener(future -&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里的 future 就是上面的 promise</span></span><br><span class="line">    log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>,future.getNow());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待 1000 后设置成功结果</span></span><br><span class="line">eventExecutors.execute(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    log.debug(<span class="string">&quot;set success, &#123;&#125;&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    promise.setSuccess(<span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">log.debug(<span class="string">&quot;start...&quot;</span>);</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11:49:30 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...</span><br><span class="line">11:49:31 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set success, 10</span><br><span class="line">11:49:31 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - 10</span><br></pre></td></tr></table></figure><h4 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h4><p>同步处理任务失败 - sync &amp; get</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DefaultEventLoop</span> <span class="variable">eventExecutors</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultEventLoop</span>();</span><br><span class="line">        DefaultPromise&lt;Integer&gt; promise = <span class="keyword">new</span> <span class="title class_">DefaultPromise</span>&lt;&gt;(eventExecutors);</span><br><span class="line"></span><br><span class="line">        eventExecutors.execute(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">RuntimeException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;error...&quot;</span>);</span><br><span class="line">            log.debug(<span class="string">&quot;set failure, &#123;&#125;&quot;</span>, e.toString());</span><br><span class="line">            promise.setFailure(e);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, promise.getNow());</span><br><span class="line">        promise.get(); <span class="comment">// sync() 也会出现异常，只是 get 会再用 ExecutionException 包一层异常</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">12:11:07 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...</span><br><span class="line">12:11:07 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null</span><br><span class="line">12:11:08 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error...</span><br><span class="line">Exception in thread &quot;main&quot; java.util.concurrent.ExecutionException: java.lang.RuntimeException: error...</span><br><span class="line">at io.netty.util.concurrent.AbstractFuture.get(AbstractFuture.java:41)</span><br><span class="line">at com.itcast.oio.DefaultPromiseTest2.main(DefaultPromiseTest2.java:34)</span><br><span class="line">Caused by: java.lang.RuntimeException: error...</span><br><span class="line">at com.itcast.oio.DefaultPromiseTest2.lambda$main$0(DefaultPromiseTest2.java:27)</span><br><span class="line">at io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54)</span><br><span class="line">at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)</span><br><span class="line">at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)</span><br><span class="line">at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)</span><br><span class="line">at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure><h4 id="例4"><a href="#例4" class="headerlink" title="例4"></a>例4</h4><p>同步处理任务失败 - await</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DefaultEventLoop</span> <span class="variable">eventExecutors</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultEventLoop</span>();</span><br><span class="line">DefaultPromise&lt;Integer&gt; promise = <span class="keyword">new</span> <span class="title class_">DefaultPromise</span>&lt;&gt;(eventExecutors);</span><br><span class="line"></span><br><span class="line">eventExecutors.execute(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">RuntimeException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;error...&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;set failure, &#123;&#125;&quot;</span>, e.toString());</span><br><span class="line">    promise.setFailure(e);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">log.debug(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, promise.getNow());</span><br><span class="line">promise.await(); <span class="comment">// 与 sync 和 get 区别在于，不会抛异常</span></span><br><span class="line">log.debug(<span class="string">&quot;result &#123;&#125;&quot;</span>, (promise.isSuccess() ? promise.getNow() : promise.cause()).toString());</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">12:18:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...</span><br><span class="line">12:18:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null</span><br><span class="line">12:18:54 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error...</span><br><span class="line">12:18:54 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - result java.lang.RuntimeException: error...</span><br></pre></td></tr></table></figure><h4 id="例5"><a href="#例5" class="headerlink" title="例5"></a>例5</h4><p>异步处理任务失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DefaultEventLoop</span> <span class="variable">eventExecutors</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultEventLoop</span>();</span><br><span class="line">DefaultPromise&lt;Integer&gt; promise = <span class="keyword">new</span> <span class="title class_">DefaultPromise</span>&lt;&gt;(eventExecutors);</span><br><span class="line"></span><br><span class="line">promise.addListener(future -&gt; &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;result &#123;&#125;&quot;</span>, (promise.isSuccess() ? promise.getNow() : promise.cause()).toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">eventExecutors.execute(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">RuntimeException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;error...&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;set failure, &#123;&#125;&quot;</span>, e.toString());</span><br><span class="line">    promise.setFailure(e);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">log.debug(<span class="string">&quot;start...&quot;</span>);</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12:04:57 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start...</span><br><span class="line">12:04:58 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error...</span><br><span class="line">12:04:58 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - result java.lang.RuntimeException: error...</span><br></pre></td></tr></table></figure><h4 id="例6"><a href="#例6" class="headerlink" title="例6"></a>例6</h4><p>await 死锁检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DefaultEventLoop</span> <span class="variable">eventExecutors</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultEventLoop</span>();</span><br><span class="line">DefaultPromise&lt;Integer&gt; promise = <span class="keyword">new</span> <span class="title class_">DefaultPromise</span>&lt;&gt;(eventExecutors);</span><br><span class="line"></span><br><span class="line">eventExecutors.submit(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        promise.await();</span><br><span class="line">        <span class="comment">// 注意不能仅捕获 InterruptedException 异常</span></span><br><span class="line">        <span class="comment">// 否则 死锁检查抛出的 BlockingOperationException 会继续向上传播</span></span><br><span class="line">        <span class="comment">// 而提交的任务会被包装为 PromiseTask，它的 run 方法中会 catch 所有异常然后设置为 Promise 的失败结果而不会抛出</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">eventExecutors.submit(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        promise.await();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">io.netty.util.concurrent.BlockingOperationException: DefaultPromise@47499c2a(incomplete)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:384)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.await(DefaultPromise.java:212)</span><br><span class="line">at com.itcast.oio.DefaultPromiseTest.lambda$main$0(DefaultPromiseTest.java:27)</span><br><span class="line">at io.netty.util.concurrent.PromiseTask$RunnableAdapter.call(PromiseTask.java:38)</span><br><span class="line">at io.netty.util.concurrent.PromiseTask.run(PromiseTask.java:73)</span><br><span class="line">at io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54)</span><br><span class="line">at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)</span><br><span class="line">at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)</span><br><span class="line">at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)</span><br><span class="line">at java.lang.Thread.run(Thread.java:745)</span><br><span class="line">io.netty.util.concurrent.BlockingOperationException: DefaultPromise@47499c2a(incomplete)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:384)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.await(DefaultPromise.java:212)</span><br><span class="line">at com.itcast.oio.DefaultPromiseTest.lambda$main$1(DefaultPromiseTest.java:36)</span><br><span class="line">at io.netty.util.concurrent.PromiseTask$RunnableAdapter.call(PromiseTask.java:38)</span><br><span class="line">at io.netty.util.concurrent.PromiseTask.run(PromiseTask.java:73)</span><br><span class="line">at io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54)</span><br><span class="line">at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)</span><br><span class="line">at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)</span><br><span class="line">at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)</span><br><span class="line">at java.lang.Thread.run(Thread.java:745)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-4-Handler-amp-Pipeline"><a href="#3-4-Handler-amp-Pipeline" class="headerlink" title="3.4 Handler &amp; Pipeline"></a>3.4 Handler &amp; Pipeline</h3><p>ChannelHandler 用来处理 Channel 上的各种事件，分为入站、出站两种。所有 ChannelHandler 被连成一串，就是 Pipeline</p><ul><li>入站处理器通常是 ChannelInboundHandlerAdapter 的子类，主要用来读取客户端数据，写回结果</li><li>出站处理器通常是 ChannelOutboundHandlerAdapter 的子类，主要对写回结果进行加工</li></ul><p>打个比喻，每个 Channel 是一个产品的加工车间，Pipeline 是车间中的流水线，ChannelHandler 就是流水线上的各道工序，而后面要讲的 ByteBuf 是原材料，经过很多工序的加工：先经过一道道入站工序，再经过一道道出站工序最终变成产品</p><p>先搞清楚顺序，服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>()</span><br><span class="line">    .group(<span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>())</span><br><span class="line">    .channel(NioServerSocketChannel.class)</span><br><span class="line">    .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(NioSocketChannel ch)</span> &#123;</span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> &#123;</span><br><span class="line">                    System.out.println(<span class="number">1</span>);</span><br><span class="line">                    ctx.fireChannelRead(msg); <span class="comment">// 1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> &#123;</span><br><span class="line">                    System.out.println(<span class="number">2</span>);</span><br><span class="line">                    ctx.fireChannelRead(msg); <span class="comment">// 2</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> &#123;</span><br><span class="line">                    System.out.println(<span class="number">3</span>);</span><br><span class="line">                    ctx.channel().write(msg); <span class="comment">// 3</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelOutboundHandlerAdapter</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, </span></span><br><span class="line"><span class="params">                                  ChannelPromise promise)</span> &#123;</span><br><span class="line">                    System.out.println(<span class="number">4</span>);</span><br><span class="line">                    ctx.write(msg, promise); <span class="comment">// 4</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelOutboundHandlerAdapter</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, </span></span><br><span class="line"><span class="params">                                  ChannelPromise promise)</span> &#123;</span><br><span class="line">                    System.out.println(<span class="number">5</span>);</span><br><span class="line">                    ctx.write(msg, promise); <span class="comment">// 5</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelOutboundHandlerAdapter</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, </span></span><br><span class="line"><span class="params">                                  ChannelPromise promise)</span> &#123;</span><br><span class="line">                    System.out.println(<span class="number">6</span>);</span><br><span class="line">                    ctx.write(msg, promise); <span class="comment">// 6</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .bind(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Bootstrap</span>()</span><br><span class="line">    .group(<span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>())</span><br><span class="line">    .channel(NioSocketChannel.class)</span><br><span class="line">    .handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;Channel&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(Channel ch)</span> &#123;</span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">StringEncoder</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>)</span><br><span class="line">    .addListener((ChannelFutureListener) future -&gt; &#123;</span><br><span class="line">        future.channel().writeAndFlush(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>服务器端打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>可以看到，ChannelInboundHandlerAdapter 是按照 addLast 的顺序执行的，而 ChannelOutboundHandlerAdapter 是按照 addLast 的逆序执行的。ChannelPipeline 的实现是一个 ChannelHandlerContext（包装了 ChannelHandler） 组成的双向链表</p><p><img src="/../images/Netty01-nio/0008.png"></p><ul><li>入站处理器中，ctx.fireChannelRead(msg) 是 <strong>调用下一个入站处理器</strong><ul><li>如果注释掉 1 处代码，则仅会打印 1</li><li>如果注释掉 2 处代码，则仅会打印 1 2</li></ul></li><li>3 处的 ctx.channel().write(msg) 会 <strong>从尾部开始触发</strong> 后续出站处理器的执行<ul><li>如果注释掉 3 处代码，则仅会打印 1 2 3</li></ul></li><li>类似的，出站处理器中，ctx.write(msg, promise) 的调用也会 <strong>触发上一个出站处理器</strong><ul><li>如果注释掉 6 处代码，则仅会打印 1 2 3 6</li></ul></li><li>ctx.channel().write(msg) vs ctx.write(msg)<ul><li>都是触发出站处理器的执行</li><li>ctx.channel().write(msg) 从尾部开始查找出站处理器</li><li>ctx.write(msg) 是从当前节点找上一个出站处理器</li><li>3 处的 ctx.channel().write(msg) 如果改为 ctx.write(msg) 仅会打印 1 2 3，因为节点3 之前没有其它出站处理器了</li><li>6 处的 ctx.write(msg, promise) 如果改为 ctx.channel().write(msg) 会打印 1 2 3 6 6 6… 因为 ctx.channel().write() 是从尾部开始查找，结果又是节点6 自己</li></ul></li></ul><p>图1 - 服务端 pipeline 触发的原始流程，图中数字代表了处理步骤的先后次序</p><p><img src="/../images/Netty01-nio/0009.png"></p><h4 id="EmbeddedChannel"><a href="#EmbeddedChannel" class="headerlink" title="EmbeddedChannel"></a>EmbeddedChannel</h4><p>netty封装的，用于测试Hanlder。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ChannelInboundHandlerAdapter</span> <span class="variable">h1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            <span class="built_in">super</span>.channelRead(ctx, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">ChannelInboundHandlerAdapter</span> <span class="variable">h2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">            <span class="built_in">super</span>.channelRead(ctx, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">ChannelInboundHandlerAdapter</span> <span class="variable">h3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">            <span class="built_in">super</span>.channelRead(ctx, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">ChannelOutboundHandlerAdapter</span> <span class="variable">h4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChannelOutboundHandlerAdapter</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">            <span class="built_in">super</span>.write(ctx, msg, promise);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">EmbeddedChannel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmbeddedChannel</span>(h1, h2, h3, h4);</span><br><span class="line">    <span class="comment">// 模拟入站操作</span></span><br><span class="line">    <span class="comment">//        channel.writeInbound(ByteBufAllocator.DEFAULT.buffer().writeBytes(&quot;world&quot;.getBytes(StandardCharsets.UTF_8)));</span></span><br><span class="line">    <span class="comment">// 模拟出站操作</span></span><br><span class="line">    channel.writeOutbound(ByteBufAllocator.DEFAULT.buffer().writeBytes(<span class="string">&quot;world&quot;</span>.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-ByteBuf"><a href="#3-5-ByteBuf" class="headerlink" title="3.5 ByteBuf"></a>3.5 ByteBuf</h3><p>是对字节数据的封装</p><h4 id="1）创建"><a href="#1）创建" class="headerlink" title="1）创建"></a>1）创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBufAllocator.DEFAULT.buffer();</span><br><span class="line">        System.out.println(buffer);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        buffer.writeBytes(sb.toString().getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        System.out.println(buffer);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面代码创建了一个默认的 ByteBuf（池化基于直接内存的 ByteBuf），初始容量是 10，如果不指定参数，默认是256字节。</p><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PooledUnsafeDirectByteBuf(ridx: 0, widx: 0, cap: 256)</span><br><span class="line">PooledUnsafeDirectByteBuf(ridx: 0, widx: 300, cap: 512)</span><br></pre></td></tr></table></figure><p>其中 log 方法参考如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(ByteBuf buffer)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> buffer.readableBytes();</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> length / <span class="number">16</span> + (length % <span class="number">15</span> == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>) + <span class="number">4</span>;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(rows * <span class="number">80</span> * <span class="number">2</span>)</span><br><span class="line">        .append(<span class="string">&quot;read index:&quot;</span>).append(buffer.readerIndex())</span><br><span class="line">        .append(<span class="string">&quot; write index:&quot;</span>).append(buffer.writerIndex())</span><br><span class="line">        .append(<span class="string">&quot; capacity:&quot;</span>).append(buffer.capacity())</span><br><span class="line">        .append(NEWLINE);</span><br><span class="line">    appendPrettyHexDump(buf, buffer);</span><br><span class="line">    System.out.println(buf.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）直接内存-vs-堆内存"><a href="#2）直接内存-vs-堆内存" class="headerlink" title="2）直接内存 vs 堆内存"></a>2）直接内存 vs 堆内存</h4><p>可以使用下面的代码来创建池化基于堆的 ByteBuf（分配效率比较高，读写效率较低）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuf</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBufAllocator.DEFAULT.heapBuffer(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>也可以使用下面的代码来创建池化基于直接内存的 ByteBuf（系统内存，分配效率低，读写效率高）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuf</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBufAllocator.DEFAULT.directBuffer(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul><li>直接内存创建和销毁的代价昂贵，但读写性能高（少一次内存复制），适合配合池化功能一起用</li><li>直接内存对 GC 压力小，因为这部分内存不受 JVM 垃圾回收的管理，但也要注意及时主动释放</li></ul><h4 id="3）池化-vs-非池化"><a href="#3）池化-vs-非池化" class="headerlink" title="3）池化 vs 非池化"></a>3）池化 vs 非池化</h4><p>池化的最大意义在于可以重用 ByteBuf，优点有</p><ul><li>没有池化，则每次都得创建新的 ByteBuf 实例，这个操作对直接内存代价昂贵，就算是堆内存，也会增加 GC 压力</li><li>有了池化，则可以重用池中 ByteBuf 实例，并且采用了与 jemalloc 类似的内存分配算法提升分配效率</li><li>高并发时，池化功能更节约内存，减少内存溢出的可能</li></ul><p>池化功能是否开启，可以通过下面的系统环境变量来设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dio.netty.allocator.type=&#123;unpooled|pooled&#125;</span><br></pre></td></tr></table></figure><ul><li>4.1 以后，非 Android 平台默认启用池化实现，Android 平台启用非池化实现</li><li>4.1 之前，池化功能还不成熟，默认是非池化实现</li></ul><p><img src="/../images/Netty02-%E5%85%A5%E9%97%A8/image-20221206202302894.png" alt="image-20221206202302894"></p><p>添加VM参数，测试非池化模式。</p><h4 id="4）组成"><a href="#4）组成" class="headerlink" title="4）组成"></a>4）组成</h4><p>ByteBuf 由四部分组成</p><p>默认最大值是整数的最大值</p><p><img src="/../images/Netty01-nio/0010.png"></p><blockquote><p>可扩容字节：容量和最大容量之间</p></blockquote><p>最开始读写指针都在 0 位置</p><blockquote><p>优点：</p><ul><li>不用切换读写模式</li><li>可扩容</li></ul></blockquote><h4 id="5）写入"><a href="#5）写入" class="headerlink" title="5）写入"></a>5）写入</h4><p>方法列表，省略一些不重要的方法</p><table><thead><tr><th>方法签名</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>writeBoolean(boolean value)</td><td>写入 boolean 值</td><td>用一字节 01|00 代表 true|false</td></tr><tr><td>writeByte(int value)</td><td>写入 byte 值</td><td></td></tr><tr><td>writeShort(int value)</td><td>写入 short 值</td><td></td></tr><tr><td>writeInt(int value)</td><td>写入 int 值</td><td>大端系统，Big Endian，即 0x250，写入后 00 00 02 50</td></tr><tr><td>writeIntLE(int value)</td><td>写入 int 值</td><td>小端系统， Little Endian，即 0x250，写入后 50 02 00 00</td></tr><tr><td>writeLong(long value)</td><td>写入 long 值</td><td></td></tr><tr><td>writeChar(int value)</td><td>写入 char 值</td><td></td></tr><tr><td>writeFloat(float value)</td><td>写入 float 值</td><td></td></tr><tr><td>writeDouble(double value)</td><td>写入 double 值</td><td></td></tr><tr><td>writeBytes(ByteBuf src)</td><td>写入 netty 的 ByteBuf</td><td></td></tr><tr><td>writeBytes(byte[] src)</td><td>写入 byte[]</td><td></td></tr><tr><td>writeBytes(ByteBuffer src)</td><td>写入 nio 的 ByteBuffer</td><td></td></tr><tr><td>int writeCharSequence(CharSequence sequence, Charset charset)</td><td>写入字符串</td><td></td></tr></tbody></table><blockquote><p>注意</p><ul><li>这些方法的未指明返回值的，其返回值都是 ByteBuf，意味着可以链式调用</li><li>网络传输，默认习惯是 Big Endian</li></ul></blockquote><p>先写入 4 个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buffer.writeBytes(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;);</span><br><span class="line">log(buffer);</span><br></pre></td></tr></table></figure><p>结果是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">read index:0 write index:4 capacity:10</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 01 02 03 04                                     |....            |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p>再写入一个 int 整数，也是 4 个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buffer.writeInt(<span class="number">5</span>);</span><br><span class="line">log(buffer);</span><br></pre></td></tr></table></figure><p>结果是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">read index:0 write index:8 capacity:10</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 01 02 03 04 00 00 00 05                         |........        |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p>还有一类方法是 set 开头的一系列方法，也可以写入数据，但不会改变写指针位置</p><h4 id="6）扩容"><a href="#6）扩容" class="headerlink" title="6）扩容"></a>6）扩容</h4><p>再写入一个 int 整数时，容量不够了（初始容量是 10），这时会引发扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buffer.writeInt(<span class="number">6</span>);</span><br><span class="line">log(buffer);</span><br></pre></td></tr></table></figure><p>扩容规则是</p><ul><li>如何写入后数据大小未超过 512，则选择下一个 16 的整数倍，例如写入后大小为 12 ，则扩容后 capacity 是 16</li><li>如果写入后数据大小超过 512，则选择下一个 2^n，例如写入后大小为 513，则扩容后 capacity 是 2^10&#x3D;1024（2^9&#x3D;512 已经不够了）</li><li>扩容不能超过 max capacity 会报错</li></ul><p>结果是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">read index:0 write index:12 capacity:16</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 01 02 03 04 00 00 00 05 00 00 00 06             |............    |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><h4 id="7）读取"><a href="#7）读取" class="headerlink" title="7）读取"></a>7）读取</h4><p>例如读了 4 次，每次一个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(buffer.readByte());</span><br><span class="line">System.out.println(buffer.readByte());</span><br><span class="line">System.out.println(buffer.readByte());</span><br><span class="line">System.out.println(buffer.readByte());</span><br><span class="line">log(buffer);</span><br></pre></td></tr></table></figure><p>读过的内容，就属于废弃部分了，再读只能读那些尚未读取的部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">read index:4 write index:12 capacity:16</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 00 00 00 05 00 00 00 06                         |........        |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p>如果需要重复读取 int 整数 5，怎么办？</p><p>可以在 read 前先做个标记 mark</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buffer.markReaderIndex();</span><br><span class="line">System.out.println(buffer.readInt());</span><br><span class="line">log(buffer);</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">read index:8 write index:12 capacity:16</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 00 00 00 06                                     |....            |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p>这时要重复读取的话，重置到标记位置 reset</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buffer.resetReaderIndex();</span><br><span class="line">log(buffer);</span><br></pre></td></tr></table></figure><p>这时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">read index:4 write index:12 capacity:16</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 00 00 00 05 00 00 00 06                         |........        |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p>还有种办法是采用 get 开头的一系列方法，这些方法不会改变 read index</p><h4 id="8）retain-amp-release"><a href="#8）retain-amp-release" class="headerlink" title="8）retain &amp; release"></a>8）retain &amp; release</h4><p>由于 Netty 中有堆外内存的 ByteBuf 实现，堆外内存最好是手动来释放，而不是等 GC 垃圾回收。</p><ul><li>UnpooledHeapByteBuf 使用的是 JVM 内存，只需等 GC 回收内存即可</li><li>UnpooledDirectByteBuf 使用的就是直接内存了，需要特殊的方法来回收内存</li><li>PooledByteBuf 和它的子类使用了池化机制，需要更复杂的规则来回收内存</li></ul><blockquote><p>回收内存的源码实现，请关注下面方法的不同实现</p><p><code>protected abstract void deallocate()</code></p></blockquote><p>Netty 这里采用了引用计数法来控制回收内存，每个 ByteBuf 都实现了 ReferenceCounted 接口</p><ul><li>每个 ByteBuf 对象的初始计数为 1</li><li>调用 release 方法计数减 1，如果计数为 0，ByteBuf 内存被回收</li><li>调用 retain 方法计数加 1，表示调用者没用完之前，其它 handler 即使调用了 release 也不会造成回收</li><li>当计数为 0 时，底层内存会被回收，这时即使 ByteBuf 对象还在，其各个方法均无法正常使用</li></ul><p>谁来负责 release 呢？</p><p>不是我们想象的（一般情况下）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> ...</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    buf.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请思考，因为 pipeline 的存在，一般需要将 ByteBuf 传递给下一个 ChannelHandler，如果在 finally 中 release 了，就失去了传递性（当然，如果在这个 ChannelHandler 内这个 ByteBuf 已完成了它的使命，那么便无须再传递）</p><p>基本规则是，<strong>谁是最后使用者，谁负责 release</strong>，详细分析如下</p><ul><li>起点，对于 NIO 实现来讲，在 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read 方法中首次创建 ByteBuf 放入 pipeline（line 163 pipeline.fireChannelRead(byteBuf)）</li><li>入站 ByteBuf 处理原则<ul><li>对原始 ByteBuf 不做处理，调用 ctx.fireChannelRead(msg) 向后传递，这时无须 release</li><li>将原始 ByteBuf 转换为其它类型的 Java 对象，这时 ByteBuf 就没用了，必须 release</li><li>如果不调用 ctx.fireChannelRead(msg) 向后传递，那么也必须 release</li><li>注意各种异常，如果 ByteBuf 没有成功传递到下一个 ChannelHandler，必须 release</li><li>假设消息一直向后传，那么 TailContext 会负责释放未处理消息（原始的 ByteBuf）</li></ul></li><li>出站 ByteBuf 处理原则<ul><li>出站消息最终都会转为 ByteBuf 输出，一直向前传，由 HeadContext flush 后 release</li></ul></li><li>异常处理原则<ul><li>有时候不清楚 ByteBuf 被引用了多少次，但又必须彻底释放，可以循环调用 release 直到返回 true</li></ul></li></ul><p>TailContext 释放未处理消息逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// io.netty.channel.DefaultChannelPipeline#onUnhandledInboundMessage(java.lang.Object)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onUnhandledInboundMessage</span><span class="params">(Object msg)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        logger.debug(</span><br><span class="line">            <span class="string">&quot;Discarded inbound message &#123;&#125; that reached at the tail of the pipeline. &quot;</span> +</span><br><span class="line">            <span class="string">&quot;Please check your pipeline configuration.&quot;</span>, msg);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ReferenceCountUtil.release(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// io.netty.util.ReferenceCountUtil#release(java.lang.Object)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">release</span><span class="params">(Object msg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> ReferenceCounted) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((ReferenceCounted) msg).release();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9）slice"><a href="#9）slice" class="headerlink" title="9）slice"></a>9）slice</h4><p>【零拷贝】的体现之一（共用内存），对原始 ByteBuf 进行切片成多个 ByteBuf，切片后的 ByteBuf 并没有发生内存复制，还是使用原始 ByteBuf 的内存，切片后的 ByteBuf 维护独立的 read，write 指针</p><p>仅仅在逻辑上切片，实际上还是一个物理空间。</p><p><img src="/../images/Netty01-nio/0011.png"></p><p>例，原始 ByteBuf 进行一些初始操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuf</span> <span class="variable">origin</span> <span class="operator">=</span> ByteBufAllocator.DEFAULT.buffer(<span class="number">10</span>);</span><br><span class="line">origin.writeBytes(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;);</span><br><span class="line">origin.readByte();</span><br><span class="line">System.out.println(ByteBufUtil.prettyHexDump(origin));</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 02 03 04                                        |...             |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p>这时调用 slice 进行切片，无参 slice 是从原始 ByteBuf 的 read index 到 write index 之间的内容进行切片，切片后的 max capacity 被固定为这个区间的大小，因此不能追加 write</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuf</span> <span class="variable">slice</span> <span class="operator">=</span> origin.slice();</span><br><span class="line">System.out.println(ByteBufUtil.prettyHexDump(slice));</span><br><span class="line"><span class="comment">// slice.writeByte(5); 如果执行，会报 IndexOutOfBoundsException 异常</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 02 03 04                                        |...             |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p>如果原始 ByteBuf 再次读操作（又读了一个字节）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">origin.readByte();</span><br><span class="line">System.out.println(ByteBufUtil.prettyHexDump(origin));</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 03 04                                           |..              |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p>这时的 slice 不受影响，因为它有独立的读写指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(ByteBufUtil.prettyHexDump(slice));</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 02 03 04                                        |...             |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p>如果 slice 的内容发生了更改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slice.setByte(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">System.out.println(ByteBufUtil.prettyHexDump(slice));</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 02 03 05                                        |...             |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p>这时，原始 ByteBuf 也会受影响，因为底层都是同一块内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(ByteBufUtil.prettyHexDump(origin));</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 03 05                                           |..              |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p>切片后的buf大小是固定的，不能超过，不然会报错。类似于数据库的视图修改一样。</p><p>切片的release</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBufAllocator.DEFAULT.buffer(<span class="number">10</span>);</span><br><span class="line">buf.writeBytes(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>&#125;);</span><br><span class="line">log(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在切片的过程中，没有数据的复制</span></span><br><span class="line"><span class="type">ByteBuf</span> <span class="variable">buf1</span> <span class="operator">=</span> buf.slice(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">buf1.retain();</span><br><span class="line"><span class="comment">//&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;</span></span><br><span class="line"><span class="type">ByteBuf</span> <span class="variable">buf2</span> <span class="operator">=</span> buf.slice(<span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">buf2.retain();</span><br><span class="line"></span><br><span class="line">buf.release();</span><br><span class="line"><span class="comment">//切片后的buf先retain，防止后边误删，最后要自己释放</span></span><br><span class="line">buf1.release();</span><br><span class="line">buf2.release();</span><br></pre></td></tr></table></figure><h4 id="10）duplicate"><a href="#10）duplicate" class="headerlink" title="10）duplicate"></a>10）duplicate</h4><p>【零拷贝】的体现之一，就好比截取了原始 ByteBuf 所有内容，并且没有 max capacity 的限制，也是与原始 ByteBuf 使用同一块底层内存，只是读写指针是独立的</p><p><img src="/../images/Netty01-nio/0012.png"></p><h4 id="11）copy"><a href="#11）copy" class="headerlink" title="11）copy"></a>11）copy</h4><p>会将底层内存数据进行深拷贝，因此无论读写，都与原始 ByteBuf 无关</p><h4 id="12）CompositeByteBuf"><a href="#12）CompositeByteBuf" class="headerlink" title="12）CompositeByteBuf"></a>12）CompositeByteBuf</h4><p>【零拷贝】的体现之一，可以将多个 ByteBuf 合并为一个逻辑上的 ByteBuf，避免拷贝</p><p>有两个 ByteBuf 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuf</span> <span class="variable">buf1</span> <span class="operator">=</span> ByteBufAllocator.DEFAULT.buffer(<span class="number">5</span>);</span><br><span class="line">buf1.writeBytes(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"><span class="type">ByteBuf</span> <span class="variable">buf2</span> <span class="operator">=</span> ByteBufAllocator.DEFAULT.buffer(<span class="number">5</span>);</span><br><span class="line">buf2.writeBytes(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;);</span><br><span class="line">System.out.println(ByteBufUtil.prettyHexDump(buf1));</span><br><span class="line">System.out.println(ByteBufUtil.prettyHexDump(buf2));</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 01 02 03 04 05                                  |.....           |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 06 07 08 09 0a                                  |.....           |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p>现在需要一个新的 ByteBuf，内容来自于刚才的 buf1 和 buf2，如何实现？</p><p>方法1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuf</span> <span class="variable">buf3</span> <span class="operator">=</span> ByteBufAllocator.DEFAULT</span><br><span class="line">    .buffer(buf1.readableBytes()+buf2.readableBytes());</span><br><span class="line">buf3.writeBytes(buf1);</span><br><span class="line">buf3.writeBytes(buf2);</span><br><span class="line">System.out.println(ByteBufUtil.prettyHexDump(buf3));</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p>这种方法好不好？回答是不太好，因为进行了数据的内存复制操作</p><p>方法2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CompositeByteBuf</span> <span class="variable">buf3</span> <span class="operator">=</span> ByteBufAllocator.DEFAULT.compositeBuffer();</span><br><span class="line"><span class="comment">// true 表示增加新的 ByteBuf 自动递增 write index, 否则 write index 会始终为 0</span></span><br><span class="line">buf3.addComponents(<span class="literal">true</span>, buf1, buf2);</span><br></pre></td></tr></table></figure><p>结果是一样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p>CompositeByteBuf 是一个组合的 ByteBuf，它内部维护了一个 Component 数组，每个 Component 管理一个 ByteBuf，记录了这个 ByteBuf 相对于整体偏移量等信息，代表着整体中某一段的数据。</p><ul><li>优点，对外是一个虚拟视图，组合这些 ByteBuf 不会产生内存复制</li><li>缺点，复杂了很多，多次操作会带来性能的损耗</li></ul><h4 id="13）Unpooled"><a href="#13）Unpooled" class="headerlink" title="13）Unpooled"></a>13）Unpooled</h4><p>Unpooled 是一个工具类，类如其名，提供了非池化的 ByteBuf 创建、组合、复制等操作</p><p>这里仅介绍其跟【零拷贝】相关的 wrappedBuffer 方法，可以用来包装 ByteBuf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuf</span> <span class="variable">buf1</span> <span class="operator">=</span> ByteBufAllocator.DEFAULT.buffer(<span class="number">5</span>);</span><br><span class="line">buf1.writeBytes(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"><span class="type">ByteBuf</span> <span class="variable">buf2</span> <span class="operator">=</span> ByteBufAllocator.DEFAULT.buffer(<span class="number">5</span>);</span><br><span class="line">buf2.writeBytes(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当包装 ByteBuf 个数超过一个时, 底层使用了 CompositeByteBuf</span></span><br><span class="line"><span class="type">ByteBuf</span> <span class="variable">buf3</span> <span class="operator">=</span> Unpooled.wrappedBuffer(buf1, buf2);</span><br><span class="line">System.out.println(ByteBufUtil.prettyHexDump(buf3));</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p>也可以用来包装普通字节数组，底层也不会有拷贝操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuf</span> <span class="variable">buf4</span> <span class="operator">=</span> Unpooled.wrappedBuffer(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;);</span><br><span class="line">System.out.println(buf4.getClass());</span><br><span class="line">System.out.println(ByteBufUtil.prettyHexDump(buf4));</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class io.netty.buffer.CompositeByteBuf</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 01 02 03 04 05 06                               |......          |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br></pre></td></tr></table></figure><h4 id="💡-ByteBuf-优势"><a href="#💡-ByteBuf-优势" class="headerlink" title="💡 ByteBuf 优势"></a>💡 ByteBuf 优势</h4><ul><li>池化 - 可以重用池中 ByteBuf 实例，更节约内存，减少内存溢出的可能</li><li>读写指针分离，不需要像 ByteBuffer 一样切换读写模式</li><li>可以自动扩容</li><li>支持链式调用，使用更流畅</li><li>很多地方体现零拷贝，例如 slice、duplicate、CompositeByteBuf</li></ul><h2 id="4-双向通信"><a href="#4-双向通信" class="headerlink" title="4. 双向通信"></a>4. 双向通信</h2><h3 id="4-1-练习"><a href="#4-1-练习" class="headerlink" title="4.1 练习"></a>4.1 练习</h3><p>实现一个 echo server</p><p><strong>实现功能</strong>：客户端向服务器发什么，服务端就返回什么。</p><p>存在的问题<code>bytebuf</code>的释放问题</p><ul><li><p>服务器接收到客户端发来的数据，是否要手动释放？</p><p>若是不手动调用ctx.fireChannelRead()，就不会走到tail handler！（debug测试测出来）一般两种情况，①若是在该handler中使用完了ByteBuf，那么就直接手动释放；</p><p>②若是没有进行解析之类的操作，那么可以直接传递到后面handler，也就是tail handler也会帮你进行释放操作，ctx.fireChannelRead()。</p></li><li><p>回显业务必然会创建一个ByteBuf对象，是否需要手动释放？</p><p>对于自己创建的ByteBuf，则需要进行手动释放，在这里回显业务是调用了writeAndFlush这是一个异步操作，那么添加一个监听器当写入完毕之后就进行手动释放！</p></li></ul><p><strong>关于释放bytefuf的问题</strong>：</p><p>netty提供的一个释放ByteBuf内存的方法(ReferenceCountUtil.release(msg);)，<br>如果不采用这个，直接调用ByteBuf.release方法也可以，但是因为上面调用了writeAndFlush方法，<br>已经将ByteBuf的refCnt置为0了，这个里面调用的时候又会在设置一次，但是发现已经为0了，<br>所以就抛出的该异常。</p><p>EchoServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>()</span><br><span class="line">        .group(<span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(), <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">2</span>))</span><br><span class="line">        .channel(NioServerSocketChannel.class)</span><br><span class="line">        .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(NioSocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf)msg;</span><br><span class="line">                        log.debug(<span class="string">&quot;收到客户端发送数据：&#123;&#125;&quot;</span>, buf.toString(Charset.defaultCharset()));</span><br><span class="line">                        <span class="keyword">final</span> <span class="type">ByteBuf</span> <span class="variable">response</span> <span class="operator">=</span> ctx.alloc().buffer();</span><br><span class="line">                        response.writeBytes(buf);</span><br><span class="line">                        <span class="comment">//向客户端回发数据：需要手动释放</span></span><br><span class="line">                        ctx.writeAndFlush(response);</span><br><span class="line">                        response.release();</span><br><span class="line">                        <span class="comment">// 另一种释放方式</span></span><br><span class="line">                        <span class="comment">/*ctx.writeAndFlush(response).addListener((future)-&gt;&#123;</span></span><br><span class="line"><span class="comment">                                    //释放ByteBuf</span></span><br><span class="line"><span class="comment">                                    ReferenceCountUtil.release(response);</span></span><br><span class="line"><span class="comment">                                &#125;);*/</span></span><br><span class="line">                        <span class="comment">//向后传递让Tail handler来进行释放msg</span></span><br><span class="line">                        <span class="built_in">super</span>.channelRead(ctx, msg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .bind(<span class="number">8080</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写 EchoClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>()</span><br><span class="line">                .group(group)</span><br><span class="line">                .channel(NioSocketChannel.class)</span><br><span class="line">                .handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(NioSocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">StringEncoder</span>());<span class="comment">//String=&gt;ByteBuf</span></span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                                <span class="type">ByteBuf</span> <span class="variable">buffer</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">                                log.debug(<span class="string">&quot;收到服务端发送的数据：&#123;&#125;&quot;</span>, buffer.toString(Charset.defaultCharset()));</span><br><span class="line">                                <span class="comment">//同理这里也需要进行向后传递进行释放ByteBuf</span></span><br><span class="line">                                <span class="built_in">super</span>.channelRead(ctx, msg);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>)</span><br><span class="line">                .sync()</span><br><span class="line">                .channel();</span><br><span class="line">        channel.closeFuture().addListener(future -&gt; &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;q&quot;</span>.equals(line)) &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                channel.writeAndFlush(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="💡-读和写的误解"><a href="#💡-读和写的误解" class="headerlink" title="💡 读和写的误解"></a>💡 读和写的误解</h3><p>我最初在认识上有这样的误区，认为只有在 netty，nio 这样的多路复用 IO 模型时，读写才不会相互阻塞，才可以实现高效的双向通信，但实际上，Java Socket 是全双工的：在任意时刻，线路上存在<code>A 到 B</code> 和 <code>B 到 A</code> 的双向信号传输。即使是阻塞 IO，读和写是可以同时进行的，只要分别采用读线程和写线程即可，读不会阻塞写、写也不会阻塞读</p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(s.getInputStream()));</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    System.out.println(reader.readLine());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(s.getOutputStream()));</span><br><span class="line">                <span class="comment">// 例如在这个位置加入 thread 级别断点，可以发现即使不写入数据，也不妨碍前面线程读取客户端数据</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    writer.write(String.valueOf(i));</span><br><span class="line">                    writer.newLine();</span><br><span class="line">                    writer.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(s.getInputStream()));</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    System.out.println(reader.readLine());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(s.getOutputStream()));</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    writer.write(String.valueOf(i));</span><br><span class="line">                    writer.newLine();</span><br><span class="line">                    writer.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
            <tag> Netty </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty 优化与源码</title>
      <link href="/2022/11/22/Netty04-%E4%BC%98%E5%8C%96%E4%B8%8E%E6%BA%90%E7%A0%81/"/>
      <url>/2022/11/22/Netty04-%E4%BC%98%E5%8C%96%E4%B8%8E%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="四-优化与源码"><a href="#四-优化与源码" class="headerlink" title="四. 优化与源码"></a>四. 优化与源码</h1><h2 id="1-优化"><a href="#1-优化" class="headerlink" title="1. 优化"></a>1. 优化</h2><h3 id="1-1-扩展序列化算法"><a href="#1-1-扩展序列化算法" class="headerlink" title="1.1 扩展序列化算法"></a>1.1 扩展序列化算法</h3><p>序列化，反序列化主要用在消息正文的转换上</p><ul><li>序列化时，需要将 Java 对象变为要传输的数据（可以是 byte[]，或 json 等，最终都需要变成 byte[]）</li><li>反序列化时，需要将传入的正文数据还原成 Java 对象，便于处理</li></ul><p>目前的代码仅支持 Java 自带的序列化，反序列化机制，核心代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="type">byte</span>[] body = <span class="keyword">new</span> <span class="title class_">byte</span>[bodyLength];</span><br><span class="line">byteByf.readBytes(body);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(body));</span><br><span class="line"><span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> (Message) in.readObject();</span><br><span class="line">message.setSequenceId(sequenceId);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out).writeObject(message);</span><br><span class="line"><span class="type">byte</span>[] bytes = out.toByteArray();</span><br></pre></td></tr></table></figure><p>为了支持更多序列化算法，抽象一个 Serializer 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Serializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化方法</span></span><br><span class="line">    &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(Class&lt;T&gt; clazz, <span class="type">byte</span>[] bytes)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化方法</span></span><br><span class="line">    &lt;T&gt; <span class="type">byte</span>[] serialize(T object);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供两个实现，我这里直接将实现加入了枚举类 Serializer.Algorithm 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">SerializerAlgorithm</span> <span class="keyword">implements</span> <span class="title class_">Serializer</span> &#123;</span><br><span class="line"><span class="comment">// Java 实现</span></span><br><span class="line">    Java &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(Class&lt;T&gt; clazz, <span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> </span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes));</span><br><span class="line">                <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> in.readObject();</span><br><span class="line">                <span class="keyword">return</span> (T) object;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;SerializerAlgorithm.Java 反序列化错误&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T object) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out).writeObject(object);</span><br><span class="line">                <span class="keyword">return</span> out.toByteArray();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;SerializerAlgorithm.Java 序列化错误&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="comment">// Json 实现(引入了 Gson 依赖)</span></span><br><span class="line">    Json &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(Class&lt;T&gt; clazz, <span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, StandardCharsets.UTF_8), clazz);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T object) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(object).getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要从协议的字节中得到是哪种序列化算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SerializerAlgorithm <span class="title function_">getByInt</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">        SerializerAlgorithm[] array = SerializerAlgorithm.values();</span><br><span class="line">        <span class="keyword">if</span> (type &lt; <span class="number">0</span> || type &gt; array.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;超过 SerializerAlgorithm 范围&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[type];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加配置类和配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Properties properties;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Config.class.getResourceAsStream(<span class="string">&quot;/application.properties&quot;</span>)) &#123;</span><br><span class="line">            properties = <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExceptionInInitializerError</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getServerPort</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;server.port&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">8080</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Serializer.Algorithm <span class="title function_">getSerializerAlgorithm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;serializer.algorithm&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Serializer.Algorithm.Java;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Serializer.Algorithm.valueOf(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">serializer.algorithm</span>=<span class="string">Json</span></span><br></pre></td></tr></table></figure><p>修改编解码器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 必须和 LengthFieldBasedFrameDecoder 一起使用，确保接到的 ByteBuf 消息是完整的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageCodecSharable</span> <span class="keyword">extends</span> <span class="title class_">MessageToMessageCodec</span>&lt;ByteBuf, Message&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">encode</span><span class="params">(ChannelHandlerContext ctx, Message msg, List&lt;Object&gt; outList)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">out</span> <span class="operator">=</span> ctx.alloc().buffer();</span><br><span class="line">        <span class="comment">// 1. 4 字节的魔数</span></span><br><span class="line">        out.writeBytes(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;);</span><br><span class="line">        <span class="comment">// 2. 1 字节的版本,</span></span><br><span class="line">        out.writeByte(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 3. 1 字节的序列化方式 jdk 0 , json 1</span></span><br><span class="line">        out.writeByte(Config.getSerializerAlgorithm().ordinal());</span><br><span class="line">        <span class="comment">// 4. 1 字节的指令类型</span></span><br><span class="line">        out.writeByte(msg.getMessageType());</span><br><span class="line">        <span class="comment">// 5. 4 个字节</span></span><br><span class="line">        out.writeInt(msg.getSequenceId());</span><br><span class="line">        <span class="comment">// 无意义，对齐填充</span></span><br><span class="line">        out.writeByte(<span class="number">0xff</span>);</span><br><span class="line">        <span class="comment">// 6. 获取内容的字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = Config.getSerializerAlgorithm().serialize(msg);</span><br><span class="line">        <span class="comment">// 7. 长度</span></span><br><span class="line">        out.writeInt(bytes.length);</span><br><span class="line">        <span class="comment">// 8. 写入内容</span></span><br><span class="line">        out.writeBytes(bytes);</span><br><span class="line">        outList.add(out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">magicNum</span> <span class="operator">=</span> in.readInt();</span><br><span class="line">        <span class="type">byte</span> <span class="variable">version</span> <span class="operator">=</span> in.readByte();</span><br><span class="line">        <span class="type">byte</span> <span class="variable">serializerAlgorithm</span> <span class="operator">=</span> in.readByte(); <span class="comment">// 0 或 1</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">messageType</span> <span class="operator">=</span> in.readByte(); <span class="comment">// 0,1,2...</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sequenceId</span> <span class="operator">=</span> in.readInt();</span><br><span class="line">        in.readByte();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> in.readInt();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[length];</span><br><span class="line">        in.readBytes(bytes, <span class="number">0</span>, length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到反序列化算法</span></span><br><span class="line">        Serializer.<span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Serializer.Algorithm.values()[serializerAlgorithm];</span><br><span class="line">        <span class="comment">// 确定具体消息类型</span></span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Message</span>&gt; messageClass = Message.getMessageClass(messageType);</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> algorithm.deserialize(messageClass, bytes);</span><br><span class="line"><span class="comment">//        log.debug(&quot;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;, magicNum, version, serializerType, messageType, sequenceId, length);</span></span><br><span class="line"><span class="comment">//        log.debug(&quot;&#123;&#125;&quot;, message);</span></span><br><span class="line">        out.add(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中确定具体消息类型，可以根据 <code>消息类型字节</code> 获取到对应的 <code>消息 class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Message</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据消息类型字节，获得对应的消息 class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageType 消息类型字节</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息 class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Message</span>&gt; getMessageClass(<span class="type">int</span> messageType) &#123;</span><br><span class="line">        <span class="keyword">return</span> messageClasses.get(messageType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sequenceId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> messageType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getMessageType</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LoginRequestMessage</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LoginResponseMessage</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ChatRequestMessage</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ChatResponseMessage</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GroupCreateRequestMessage</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GroupCreateResponseMessage</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GroupJoinRequestMessage</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GroupJoinResponseMessage</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GroupQuitRequestMessage</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GroupQuitResponseMessage</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GroupChatRequestMessage</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GroupChatResponseMessage</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GroupMembersRequestMessage</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GroupMembersResponseMessage</span> <span class="operator">=</span> <span class="number">13</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PingMessage</span> <span class="operator">=</span> <span class="number">14</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PongMessage</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Integer, Class&lt;? <span class="keyword">extends</span> <span class="title class_">Message</span>&gt;&gt; messageClasses = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        messageClasses.put(LoginRequestMessage, LoginRequestMessage.class);</span><br><span class="line">        messageClasses.put(LoginResponseMessage, LoginResponseMessage.class);</span><br><span class="line">        messageClasses.put(ChatRequestMessage, ChatRequestMessage.class);</span><br><span class="line">        messageClasses.put(ChatResponseMessage, ChatResponseMessage.class);</span><br><span class="line">        messageClasses.put(GroupCreateRequestMessage, GroupCreateRequestMessage.class);</span><br><span class="line">        messageClasses.put(GroupCreateResponseMessage, GroupCreateResponseMessage.class);</span><br><span class="line">        messageClasses.put(GroupJoinRequestMessage, GroupJoinRequestMessage.class);</span><br><span class="line">        messageClasses.put(GroupJoinResponseMessage, GroupJoinResponseMessage.class);</span><br><span class="line">        messageClasses.put(GroupQuitRequestMessage, GroupQuitRequestMessage.class);</span><br><span class="line">        messageClasses.put(GroupQuitResponseMessage, GroupQuitResponseMessage.class);</span><br><span class="line">        messageClasses.put(GroupChatRequestMessage, GroupChatRequestMessage.class);</span><br><span class="line">        messageClasses.put(GroupChatResponseMessage, GroupChatResponseMessage.class);</span><br><span class="line">        messageClasses.put(GroupMembersRequestMessage, GroupMembersRequestMessage.class);</span><br><span class="line">        messageClasses.put(GroupMembersResponseMessage, GroupMembersResponseMessage.class);</span><br><span class="line">        messageClasses.put(PingMessage, PingMessage.class);</span><br><span class="line">        messageClasses.put(PongMessage, PongMessage.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong>：用EmbeddedChannel模拟客户端、服务器。</p><p>添加处理器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MessageCodecSharable</span> <span class="variable">CODEC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageCodecSharable</span>(); <span class="comment">// 编解码器</span></span><br><span class="line"><span class="type">LoggingHandler</span> <span class="variable">LOGGING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(); <span class="comment">// 日志</span></span><br><span class="line"><span class="type">EmbeddedChannel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmbeddedChannel</span>(LOGGING, CODEC, LOGGING);</span><br></pre></td></tr></table></figure><p>在编解码器前后都加上日志处理器进行记录。编解码器既是入站处理器也是出站处理器。</p><p><strong>模拟出站消息</strong>，出站时要进行编码，也就是序列化，把Java对象转为可传输的对象，不管是通过jdk的byte[]还是json，最后都是转为byte[]。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LoginRequestMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginRequestMessage</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">channel.writeOutbound(message); <span class="comment">// 出站编码</span></span><br></pre></td></tr></table></figure><p><img src="/../images/Netty04-%E4%BC%98%E5%8C%96%E4%B8%8E%E6%BA%90%E7%A0%81/image-20221209160512054.png" alt="image-20221209160512054"></p><p>看以看到把json转为了可发送的消息。</p><p><strong>模拟入站消息</strong>，入站时要进行解码，也就是反序列化，把传输的byte[]转化为Java对象，不管是通过jdk的byte[]还是json。</p><p>辅助函数，先把message转成ByteBuf，再把ByteBuf入栈，转为Java对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuf <span class="title function_">messageToBuf</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">algorithm</span> <span class="operator">=</span> Config.getSerializerAlgorithm().ordinal();</span><br><span class="line">    <span class="type">ByteBuf</span> <span class="variable">out</span> <span class="operator">=</span> ByteBufAllocator.DEFAULT.buffer();</span><br><span class="line">    out.writeBytes(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;);</span><br><span class="line">    out.writeByte(<span class="number">1</span>);</span><br><span class="line">    out.writeByte(algorithm);</span><br><span class="line">    out.writeByte(msg.getMessageType());</span><br><span class="line">    out.writeInt(msg.getSequenceId());</span><br><span class="line">    out.writeByte(<span class="number">0xff</span>);</span><br><span class="line">    <span class="type">byte</span>[] bytes = Serializer.Algorithm.values()[algorithm].serialize(msg);</span><br><span class="line">    out.writeInt(bytes.length);</span><br><span class="line">    out.writeBytes(bytes);</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LoginRequestMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginRequestMessage</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> messageToBuf(message);</span><br><span class="line">channel.writeInbound(buf); <span class="comment">// 入栈，解码</span></span><br></pre></td></tr></table></figure><p><img src="/../images/Netty04-%E4%BC%98%E5%8C%96%E4%B8%8E%E6%BA%90%E7%A0%81/image-20221209161157575.png" alt="image-20221209161157575"></p><h3 id="1-2-参数调优"><a href="#1-2-参数调优" class="headerlink" title="1.2 参数调优"></a>1.2 参数调优</h3><h4 id="1）CONNECT-TIMEOUT-MILLIS"><a href="#1）CONNECT-TIMEOUT-MILLIS" class="headerlink" title="1）CONNECT_TIMEOUT_MILLIS"></a>1）CONNECT_TIMEOUT_MILLIS</h4><ul><li><p>属于 SocketChannal 参数</p></li><li><p>用在客户端建立连接时，如果在指定毫秒内无法连接，会抛出 timeout 异常</p></li><li><p>SO_TIMEOUT 主要用在阻塞 IO，阻塞 IO 中 accept，read 等都是无限等待的，如果不希望永远阻塞，使用它调整超时时间</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConnectionTimeout</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 客户端通过 .option() 方法给 SocketChannel 配置参数</span></span><br><span class="line">        <span class="comment">// 2. 服务器端</span></span><br><span class="line">        <span class="comment">// ServerBootstrap().option() 给 ServerSocketChannel 配置参数</span></span><br><span class="line">        <span class="comment">// ServerBootstrap().childOption() 给 SocketChannel 配置参数</span></span><br><span class="line"></span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>()</span><br><span class="line">                    .group(group)</span><br><span class="line">                    .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, <span class="number">300</span>)</span><br><span class="line">                    .channel(NioSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>());</span><br><span class="line">            <span class="type">ChannelFuture</span> <span class="variable">future</span> <span class="operator">=</span> bootstrap.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">            future.sync().channel().closeFuture().sync(); <span class="comment">// 断点1 future的sync会阻塞等待返回结果</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.debug(<span class="string">&quot;timeout&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动客户端，不启动服务器。设置参数5s等待，结果不到5s会结束，是因为客户端没有检测到服务器启动，会自动结束。</p><p>另外源码部分 <code>io.netty.channel.nio.AbstractNioChannel.AbstractNioUnsafe#connect</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> SocketAddress remoteAddress, <span class="keyword">final</span> SocketAddress localAddress, <span class="keyword">final</span> ChannelPromise promise)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// Schedule connect timeout.</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">connectTimeoutMillis</span> <span class="operator">=</span> config().getConnectTimeoutMillis();</span><br><span class="line">    <span class="keyword">if</span> (connectTimeoutMillis &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        connectTimeoutFuture = eventLoop().schedule(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;                </span><br><span class="line">                <span class="type">ChannelPromise</span> <span class="variable">connectPromise</span> <span class="operator">=</span> AbstractNioChannel.<span class="built_in">this</span>.connectPromise;</span><br><span class="line">                <span class="type">ConnectTimeoutException</span> <span class="variable">cause</span> <span class="operator">=</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConnectTimeoutException</span>(<span class="string">&quot;connection timed out: &quot;</span> + remoteAddress); <span class="comment">// 断点2</span></span><br><span class="line">                <span class="keyword">if</span> (connectPromise != <span class="literal">null</span> &amp;&amp; connectPromise.tryFailure(cause)) &#123;</span><br><span class="line">                    close(voidPromise());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, connectTimeoutMillis, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Netty04-%E4%BC%98%E5%8C%96%E4%B8%8E%E6%BA%90%E7%A0%81/image-20221209173440168.png" alt="image-20221209173440168"></p><p>源码：开启一个定时任务，时间完成之后，发送异常信息，通过connectPromise对象来和主线程通信，返回错误异常。返回给主线程的future，future的sync会阻塞等待返回结果。如果连接成功的话，会取消这个发送异常的任务，sync阻塞的就是连接后的channal。</p><h4 id="2）SO-BACKLOG"><a href="#2）SO-BACKLOG" class="headerlink" title="2）SO_BACKLOG"></a>2）SO_BACKLOG</h4><ul><li>属于 ServerSocketChannal 参数</li><li>服务器端通过 ServerBootstrap().option() 给 ServerSocketChannel 配置参数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"></span><br><span class="line">participant c as client </span><br><span class="line">participant s as server</span><br><span class="line">participant sq as syns queue # 半连接队列</span><br><span class="line">participant aq as accept queue # 全连接队列</span><br><span class="line"></span><br><span class="line">s -&gt;&gt; s : bind()</span><br><span class="line">s -&gt;&gt; s : listen()</span><br><span class="line">c -&gt;&gt; c : connect()</span><br><span class="line">c -&gt;&gt; s : 1. SYN</span><br><span class="line">Note left of c : SYN_SEND</span><br><span class="line">s -&gt;&gt; sq : put</span><br><span class="line">Note right of s : SYN_RCVD</span><br><span class="line">s -&gt;&gt; c : 2. SYN + ACK</span><br><span class="line">Note left of c : ESTABLISHED</span><br><span class="line">c -&gt;&gt; s : 3. ACK</span><br><span class="line">sq -&gt;&gt; aq : put</span><br><span class="line">Note right of s : ESTABLISHED</span><br><span class="line">aq --&gt;&gt; s : </span><br><span class="line">s -&gt;&gt; s : accept()</span><br></pre></td></tr></table></figure><p>sync queue 队列 存放还没有完全连接的信息</p><p>accept queue 队列 存放已经连接的信息。</p><p>有可能服务器的 accept 能力有限，三次握手后没能立即连接。所以先将连接信息放入队列中，当服务器的压力减少时，从队列拿出来进行连接。</p><ol><li>第一次握手，client 发送 SYN 到 server，状态修改为 SYN_SEND，server 收到，状态改变为 SYN_REVD，并将该请求放入 sync queue 队列</li><li>第二次握手，server 回复 SYN + ACK 给 client，client 收到，状态改变为 ESTABLISHED，并发送 ACK 给 server</li><li>第三次握手，server 收到 ACK，状态改变为 ESTABLISHED，将该请求从 sync queue 放入 accept queue</li></ol><p>其中</p><ul><li><p>在 linux 2.2 之前，backlog 大小包括了两个队列的大小，在 2.2 之后，分别用下面两个参数来控制</p></li><li><p>sync queue - 半连接队列</p><ul><li>大小通过 &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_max_syn_backlog 指定，在 <code>syncookies</code> 启用的情况下，逻辑上没有最大值限制，这个设置便被忽略</li></ul></li><li><p>accept queue - 全连接队列</p><ul><li>其大小通过 &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn 指定，在使用 listen 函数时，内核会根据传入的 backlog 参数与系统参数，取二者的较小值</li><li>如果 accpet queue 队列满了，server 将发送一个拒绝连接的错误信息到 client</li></ul></li></ul><p>netty 中</p><p>可以通过  option(ChannelOption.SO_BACKLOG, 值) 来设置大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBacklogServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>()</span><br><span class="line">                .group(<span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>())</span><br><span class="line">                .option(ChannelOption.SO_BACKLOG, <span class="number">2</span>)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>()&#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).bind(<span class="number">8080</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Netty04-%E4%BC%98%E5%8C%96%E4%B8%8E%E6%BA%90%E7%A0%81/image-20221209194354364.png" alt="image-20221209194354364"></p><p>在read添加断点，人为的让他三次握手后，不建立连接。</p><p>因为accept queue通过 ChannelOption.SO_BACKLOG 的大小设置为2，所以第三次连接时会报错。</p><p><img src="/../images/Netty04-%E4%BC%98%E5%8C%96%E4%B8%8E%E6%BA%90%E7%A0%81/image-20221209194553665.png" alt="image-20221209194553665"></p><p>可以通过下面源码查看默认大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultServerSocketChannelConfig</span> <span class="keyword">extends</span> <span class="title class_">DefaultChannelConfig</span></span><br><span class="line">                                              <span class="keyword">implements</span> <span class="title class_">ServerSocketChannelConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">backlog</span> <span class="operator">=</span> NetUtil.SOMAXCONN;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>课堂调试关键断点为：<code>io.netty.channel.nio.NioEventLoop#processSelectedKey</code></p><p>oio 中更容易说明，不用 debug 模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">accept</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">        System.out.println(accept);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端启动 4 个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>()+<span class="string">&quot; connecting...&quot;</span>);</span><br><span class="line">            s.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8888</span>),<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>()+<span class="string">&quot; connected...&quot;</span>);</span><br><span class="line">            s.getOutputStream().write(<span class="number">1</span>);</span><br><span class="line">            System.in.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>()+<span class="string">&quot; connecting timeout...&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第 1，2，3 个客户端都打印，但除了第一个处于 accpet 外，其它两个都处于 accept queue 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tue Apr <span class="number">21</span> <span class="number">20</span>:<span class="number">30</span>:<span class="number">28</span> CST <span class="number">2020</span> connecting...</span><br><span class="line">Tue Apr <span class="number">21</span> <span class="number">20</span>:<span class="number">30</span>:<span class="number">28</span> CST <span class="number">2020</span> connected...</span><br></pre></td></tr></table></figure><p>第 4 个客户端连接时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Tue Apr 21 20:53:58 CST 2020 connecting...</span><br><span class="line">Tue Apr 21 20:53:59 CST 2020 connecting timeout...</span><br><span class="line">java.net.SocketTimeoutException: connect timed out</span><br></pre></td></tr></table></figure><h4 id="3）ulimit-n"><a href="#3）ulimit-n" class="headerlink" title="3）ulimit -n"></a>3）ulimit -n</h4><ul><li>属于操作系统参数</li></ul><p>调整的是文件描述符FD(File Description)，如果 FD 达到最大值，继续打开文件就会报错。在 linux 中，一切皆文件，所以 socketchannel 也是文件。高并发情况下，需要调大一点。</p><h4 id="4）TCP-NODELAY"><a href="#4）TCP-NODELAY" class="headerlink" title="4）TCP_NODELAY"></a>4）TCP_NODELAY</h4><ul><li>属于 SocketChannal 参数</li></ul><p>对应 TCP 的 nagle 算法（不发送小窗口报文，堆积到一定的数据量再发送）。</p><ul><li>true 开启 nagle 算法</li><li>false 关闭 nagle 算法</li></ul><h4 id="5）SO-SNDBUF-amp-SO-RCVBUF"><a href="#5）SO-SNDBUF-amp-SO-RCVBUF" class="headerlink" title="5）SO_SNDBUF &amp; SO_RCVBUF"></a>5）SO_SNDBUF &amp; SO_RCVBUF</h4><p>发送缓冲区 和 接收缓冲区</p><ul><li>SO_SNDBUF 属于 SocketChannal 参数</li><li>SO_RCVBUF 既可用于 SocketChannal 参数，也可以用于 ServerSocketChannal 参数（建议设置到 ServerSocketChannal 上）</li></ul><h4 id="6）ALLOCATOR"><a href="#6）ALLOCATOR" class="headerlink" title="6）ALLOCATOR"></a>6）ALLOCATOR</h4><p>ByteBuf的分配器</p><ul><li>属于 SocketChannal 参数</li><li>用来分配 ByteBuf， ctx.alloc()</li></ul><p>ByteBufUtil 中的 io.netty.allocator.type 控制使不使用池化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">allocType</span> <span class="operator">=</span> SystemPropertyUtil.get(</span><br><span class="line">                <span class="string">&quot;io.netty.allocator.type&quot;</span>, PlatformDependent.isAndroid() ? <span class="string">&quot;unpooled&quot;</span> : <span class="string">&quot;pooled&quot;</span>);</span><br></pre></td></tr></table></figure><p>PlatformDependent 中的 io.netty.noPreferDirect 设置使不使用直接内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DIRECT_BUFFER_PREFERRED = CLEANER != NOOP</span><br><span class="line">                                  &amp;&amp; !SystemPropertyUtil.getBoolean(<span class="string">&quot;io.netty.noPreferDirect&quot;</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4 id="7）RCVBUF-ALLOCATOR"><a href="#7）RCVBUF-ALLOCATOR" class="headerlink" title="7）RCVBUF_ALLOCATOR"></a>7）RCVBUF_ALLOCATOR</h4><ul><li>属于 SocketChannal 参数</li><li>控制 netty 接收缓冲区大小</li><li>负责入站数据的分配，决定入站缓冲区的大小（并可动态调整），统一采用 direct 直接内存，具体池化还是非池化由 allocator 决定</li></ul><p><img src="/../images/Netty04-%E4%BC%98%E5%8C%96%E4%B8%8E%E6%BA%90%E7%A0%81/image-20221209205802431.png" alt="image-20221209205802431"></p><p><img src="/../images/Netty04-%E4%BC%98%E5%8C%96%E4%B8%8E%E6%BA%90%E7%A0%81/image-20221209210111407.png" alt="image-20221209210111407"></p><p>默认ByteBuf 为1024，并且可以动态调整（根据本次传入的大小，来预测下一次的大小）。最小不低于64，最大不超过65536.</p><h3 id="1-3-RPC-框架"><a href="#1-3-RPC-框架" class="headerlink" title="1.3 RPC 框架"></a>1.3 RPC 框架</h3><h4 id="1）准备工作"><a href="#1）准备工作" class="headerlink" title="1）准备工作"></a>1）准备工作</h4><p>这些代码可以认为是现成的，无需从头编写练习</p><p>为了简化起见，在原来聊天项目的基础上新增 Rpc 请求和响应消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Message</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略旧的代码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RPC_MESSAGE_TYPE_REQUEST</span> <span class="operator">=</span> <span class="number">101</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>  <span class="variable">RPC_MESSAGE_TYPE_RESPONSE</span> <span class="operator">=</span> <span class="number">102</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        messageClasses.put(RPC_MESSAGE_TYPE_REQUEST, RpcRequestMessage.class);</span><br><span class="line">        messageClasses.put(RPC_MESSAGE_TYPE_RESPONSE, RpcResponseMessage.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcRequestMessage</span> <span class="keyword">extends</span> <span class="title class_">Message</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用的接口全限定名，服务端根据它找到实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String interfaceName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用接口中的方法名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法返回类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; returnType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法参数类型数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Class[] parameterTypes;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法参数值数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object[] parameterValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RpcRequestMessage</span><span class="params">(<span class="type">int</span> sequenceId, String interfaceName, String methodName, Class&lt;?&gt; returnType, Class[] parameterTypes, Object[] parameterValue)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setSequenceId(sequenceId);</span><br><span class="line">        <span class="built_in">this</span>.interfaceName = interfaceName;</span><br><span class="line">        <span class="built_in">this</span>.methodName = methodName;</span><br><span class="line">        <span class="built_in">this</span>.returnType = returnType;</span><br><span class="line">        <span class="built_in">this</span>.parameterTypes = parameterTypes;</span><br><span class="line">        <span class="built_in">this</span>.parameterValue = parameterValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMessageType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RPC_MESSAGE_TYPE_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcResponseMessage</span> <span class="keyword">extends</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object returnValue;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Exception exceptionValue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMessageType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RPC_MESSAGE_TYPE_RESPONSE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器架子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">boss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="type">LoggingHandler</span> <span class="variable">LOGGING_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.DEBUG);</span><br><span class="line">        <span class="type">MessageCodecSharable</span> <span class="variable">MESSAGE_CODEC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageCodecSharable</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// rpc 请求消息处理器，待实现</span></span><br><span class="line">        <span class="type">RpcRequestMessageHandler</span> <span class="variable">RPC_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RpcRequestMessageHandler</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServerBootstrap</span> <span class="variable">serverBootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">            serverBootstrap.channel(NioServerSocketChannel.class);</span><br><span class="line">            serverBootstrap.group(boss, worker);</span><br><span class="line">            serverBootstrap.childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ProcotolFrameDecoder</span>());</span><br><span class="line">                    ch.pipeline().addLast(LOGGING_HANDLER);</span><br><span class="line">                    ch.pipeline().addLast(MESSAGE_CODEC);</span><br><span class="line">                    ch.pipeline().addLast(RPC_HANDLER);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> serverBootstrap.bind(<span class="number">8080</span>).sync().channel();</span><br><span class="line">            channel.closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;server error&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            boss.shutdownGracefully();</span><br><span class="line">            worker.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端架子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="type">LoggingHandler</span> <span class="variable">LOGGING_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.DEBUG);</span><br><span class="line">        <span class="type">MessageCodecSharable</span> <span class="variable">MESSAGE_CODEC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageCodecSharable</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// rpc 响应消息处理器，待实现</span></span><br><span class="line">        <span class="type">RpcResponseMessageHandler</span> <span class="variable">RPC_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RpcResponseMessageHandler</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">            bootstrap.channel(NioSocketChannel.class);</span><br><span class="line">            bootstrap.group(group);</span><br><span class="line">            bootstrap.handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ProcotolFrameDecoder</span>());</span><br><span class="line">                    ch.pipeline().addLast(LOGGING_HANDLER);</span><br><span class="line">                    ch.pipeline().addLast(MESSAGE_CODEC);</span><br><span class="line">                    ch.pipeline().addLast(RPC_HANDLER);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> bootstrap.connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>).sync().channel();</span><br><span class="line">            channel.closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;client error&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器端的 service 获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServicesFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Properties properties;</span><br><span class="line">    <span class="keyword">static</span> Map&lt;Class&lt;?&gt;, Object&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Config.class.getResourceAsStream(<span class="string">&quot;/application.properties&quot;</span>)) &#123;</span><br><span class="line">            properties = <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(in);</span><br><span class="line">            Set&lt;String&gt; names = properties.stringPropertyNames();</span><br><span class="line">            <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">                <span class="keyword">if</span> (name.endsWith(<span class="string">&quot;Service&quot;</span>)) &#123;</span><br><span class="line">                    Class&lt;?&gt; interfaceClass = Class.forName(name);</span><br><span class="line">                    Class&lt;?&gt; instanceClass = Class.forName(properties.getProperty(name));</span><br><span class="line">                    map.put(interfaceClass, instanceClass.newInstance());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException | InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExceptionInInitializerError</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getService</span><span class="params">(Class&lt;T&gt; interfaceClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) map.get(interfaceClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关配置 application.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">serializer.algorithm=Json</span><br><span class="line">cn.itcast.server.service.HelloService=cn.itcast.server.service.HelloServiceImpl</span><br></pre></td></tr></table></figure><h4 id="2）服务器-handler"><a href="#2）服务器-handler" class="headerlink" title="2）服务器 handler"></a>2）服务器 handler</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcRequestMessageHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;RpcRequestMessage&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, RpcRequestMessage message)</span> &#123;</span><br><span class="line">        <span class="type">RpcResponseMessage</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RpcResponseMessage</span>();</span><br><span class="line">        response.setSequenceId(message.getSequenceId());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取真正的实现对象</span></span><br><span class="line">            <span class="type">HelloService</span> <span class="variable">service</span> <span class="operator">=</span> (HelloService)</span><br><span class="line">                    ServicesFactory.getService(Class.forName(message.getInterfaceName()));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 获取要调用的方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> service.getClass().getMethod(message.getMethodName(), message.getParameterTypes());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 调用方法</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(service, message.getParameterValue());</span><br><span class="line">            <span class="comment">// 调用成功</span></span><br><span class="line">            response.setReturnValue(invoke);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 调用异常</span></span><br><span class="line">            response.setExceptionValue(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        ctx.writeAndFlush(response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）客户端代码第一版"><a href="#3）客户端代码第一版" class="headerlink" title="3）客户端代码第一版"></a>3）客户端代码第一版</h4><p>只发消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="type">LoggingHandler</span> <span class="variable">LOGGING_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.DEBUG);</span><br><span class="line">        <span class="type">MessageCodecSharable</span> <span class="variable">MESSAGE_CODEC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageCodecSharable</span>();</span><br><span class="line">        <span class="type">RpcResponseMessageHandler</span> <span class="variable">RPC_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RpcResponseMessageHandler</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">            bootstrap.channel(NioSocketChannel.class);</span><br><span class="line">            bootstrap.group(group);</span><br><span class="line">            bootstrap.handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ProcotolFrameDecoder</span>());</span><br><span class="line">                    ch.pipeline().addLast(LOGGING_HANDLER);</span><br><span class="line">                    ch.pipeline().addLast(MESSAGE_CODEC);</span><br><span class="line">                    ch.pipeline().addLast(RPC_HANDLER);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> bootstrap.connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>).sync().channel();</span><br><span class="line"></span><br><span class="line">            <span class="type">ChannelFuture</span> <span class="variable">future</span> <span class="operator">=</span> channel.writeAndFlush(<span class="keyword">new</span> <span class="title class_">RpcRequestMessage</span>(</span><br><span class="line">                    <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;cn.itcast.server.service.HelloService&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;sayHello&quot;</span>,</span><br><span class="line">                    String.class,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;张三&quot;</span>&#125;</span><br><span class="line">            )).addListener(promise -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (!promise.isSuccess()) &#123;</span><br><span class="line">                    <span class="type">Throwable</span> <span class="variable">cause</span> <span class="operator">=</span> promise.cause();</span><br><span class="line">                    log.error(<span class="string">&quot;error&quot;</span>, cause);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            channel.closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;client error&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4）客户端-handler-第一版"><a href="#4）客户端-handler-第一版" class="headerlink" title="4）客户端 handler 第一版"></a>4）客户端 handler 第一版</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcResponseMessageHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;RpcResponseMessage&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, RpcResponseMessage msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5）客户端代码-第二版"><a href="#5）客户端代码-第二版" class="headerlink" title="5）客户端代码 第二版"></a>5）客户端代码 第二版</h4><p>包括 channel 管理，代理，接收结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcClientManager</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HelloService</span> <span class="variable">service</span> <span class="operator">=</span> getProxyService(HelloService.class);</span><br><span class="line">        System.out.println(service.sayHello(<span class="string">&quot;zhangsan&quot;</span>));</span><br><span class="line"><span class="comment">//        System.out.println(service.sayHello(&quot;lisi&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(service.sayHello(&quot;wangwu&quot;));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建代理类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getProxyService</span><span class="params">(Class&lt;T&gt; serviceClass)</span> &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> serviceClass.getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;serviceClass&#125;;</span><br><span class="line">        <span class="comment">//                                                            sayHello  &quot;张三&quot;</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Proxy.newProxyInstance(loader, interfaces, (proxy, method, args) -&gt; &#123;</span><br><span class="line">            <span class="comment">// 1. 将方法调用转换为 消息对象</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sequenceId</span> <span class="operator">=</span> SequenceIdGenerator.nextId();</span><br><span class="line">            <span class="type">RpcRequestMessage</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RpcRequestMessage</span>(</span><br><span class="line">                    sequenceId,</span><br><span class="line">                    serviceClass.getName(),</span><br><span class="line">                    method.getName(),</span><br><span class="line">                    method.getReturnType(),</span><br><span class="line">                    method.getParameterTypes(),</span><br><span class="line">                    args</span><br><span class="line">            );</span><br><span class="line">            <span class="comment">// 2. 将消息对象发送出去</span></span><br><span class="line">            getChannel().writeAndFlush(msg);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 准备一个空 Promise 对象，来接收结果             指定 promise 对象异步接收结果线程</span></span><br><span class="line">            DefaultPromise&lt;Object&gt; promise = <span class="keyword">new</span> <span class="title class_">DefaultPromise</span>&lt;&gt;(getChannel().eventLoop());</span><br><span class="line">            RpcResponseMessageHandler.PROMISES.put(sequenceId, promise);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            promise.addListener(future -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                // 线程</span></span><br><span class="line"><span class="comment">//            &#125;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 等待 promise 结果</span></span><br><span class="line">            promise.await();</span><br><span class="line">            <span class="keyword">if</span>(promise.isSuccess()) &#123;</span><br><span class="line">                <span class="comment">// 调用正常</span></span><br><span class="line">                <span class="keyword">return</span> promise.getNow();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 调用失败</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(promise.cause());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> (T) o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">LOCK</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取唯一的 channel 对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Channel <span class="title function_">getChannel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (channel != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> channel;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (LOCK) &#123; <span class="comment">//  t2</span></span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="literal">null</span>) &#123; <span class="comment">// t1</span></span><br><span class="line">                <span class="keyword">return</span> channel;</span><br><span class="line">            &#125;</span><br><span class="line">            initChannel();</span><br><span class="line">            <span class="keyword">return</span> channel;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 channel 方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="type">LoggingHandler</span> <span class="variable">LOGGING_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.DEBUG);</span><br><span class="line">        <span class="type">MessageCodecSharable</span> <span class="variable">MESSAGE_CODEC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageCodecSharable</span>();</span><br><span class="line">        <span class="type">RpcResponseMessageHandler</span> <span class="variable">RPC_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RpcResponseMessageHandler</span>();</span><br><span class="line">        <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">        bootstrap.channel(NioSocketChannel.class);</span><br><span class="line">        bootstrap.group(group);</span><br><span class="line">        bootstrap.handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ProcotolFrameDecoder</span>());</span><br><span class="line">                ch.pipeline().addLast(LOGGING_HANDLER);</span><br><span class="line">                ch.pipeline().addLast(MESSAGE_CODEC);</span><br><span class="line">                ch.pipeline().addLast(RPC_HANDLER);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            channel = bootstrap.connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>).sync().channel();</span><br><span class="line">            channel.closeFuture().addListener(future -&gt; &#123;</span><br><span class="line">                group.shutdownGracefully();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;client error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6）客户端-handler-第二版"><a href="#6）客户端-handler-第二版" class="headerlink" title="6）客户端 handler 第二版"></a>6）客户端 handler 第二版</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcResponseMessageHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;RpcResponseMessage&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//                       序号      用来接收结果的 promise 对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Integer, Promise&lt;Object&gt;&gt; PROMISES = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, RpcResponseMessage msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, msg);</span><br><span class="line">        <span class="comment">// 拿到空的 promise</span></span><br><span class="line">        Promise&lt;Object&gt; promise = PROMISES.remove(msg.getSequenceId());</span><br><span class="line">        <span class="keyword">if</span> (promise != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> msg.getReturnValue();</span><br><span class="line">            <span class="type">Exception</span> <span class="variable">exceptionValue</span> <span class="operator">=</span> msg.getExceptionValue();</span><br><span class="line">            <span class="keyword">if</span>(exceptionValue != <span class="literal">null</span>) &#123;</span><br><span class="line">                promise.setFailure(exceptionValue);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                promise.setSuccess(returnValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="补充：gson对Class转json报错"><a href="#补充：gson对Class转json报错" class="headerlink" title="补充：gson对Class转json报错"></a>补充：gson对Class转json报错</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGson</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GsonBuilder</span>().registerTypeAdapter(Class.class, <span class="keyword">new</span> <span class="title class_">ClassCodeC</span>()).create();</span><br><span class="line">        System.out.println(gson.toJson(String.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ClassCodeC</span> <span class="keyword">implements</span> <span class="title class_">JsonSerializer</span>&lt;Class&lt;?&gt;&gt;, JsonDeserializer&lt;Class&lt;?&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) <span class="keyword">throws</span> JsonParseException &#123;</span><br><span class="line">            <span class="comment">// json--&gt;class</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> jsonElement.toString();</span><br><span class="line">                <span class="keyword">return</span> Class.forName(s);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JsonParseException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> JsonElement <span class="title function_">serialize</span><span class="params">(Class&lt;?&gt; aClass, Type type, JsonSerializationContext jsonSerializationContext)</span> &#123;</span><br><span class="line">            <span class="comment">// class--&gt;json</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonPrimitive</span>(aClass.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jdk9以上的注意，反射调用string的时候会异常，要把包打开  在JVM添加参数 –add-opens java.base&#x2F;java.lang&#x3D;ALL-UNNAMED</p><h2 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2. 源码分析"></a>2. 源码分析</h2><h3 id="2-1-启动剖析"><a href="#2-1-启动剖析" class="headerlink" title="2.1 启动剖析"></a>2.1 启动剖析</h3><p>我们就来看看 netty 中对下面的代码是怎样进行处理的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 netty 中使用 NioEventLoopGroup （简称 nio boss 线程）来封装线程和 selector</span></span><br><span class="line"><span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//2 创建 NioServerSocketChannel，同时会初始化它关联的 handler，以及为原生 ssc 存储 config</span></span><br><span class="line"><span class="type">NioServerSocketChannel</span> <span class="variable">attachment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioServerSocketChannel</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3 创建 NioServerSocketChannel 时，创建了 java 原生的 ServerSocketChannel</span></span><br><span class="line"><span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open(); </span><br><span class="line">serverSocketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4 启动 nio boss 线程执行接下来的操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5 注册（仅关联 selector 和 NioServerSocketChannel），未关注事件</span></span><br><span class="line"><span class="type">SelectionKey</span> <span class="variable">selectionKey</span> <span class="operator">=</span> serverSocketChannel.register(selector, <span class="number">0</span>, attachment);</span><br><span class="line"></span><br><span class="line"><span class="comment">//6 head -&gt; 初始化器 -&gt; ServerBootstrapAcceptor -&gt; tail，初始化器是一次性的，只为添加 acceptor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//7 绑定端口</span></span><br><span class="line">serverSocketChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//8 触发 channel active 事件，在 head 中关注 op_accept 事件</span></span><br><span class="line">selectionKey.interestOps(SelectionKey.OP_ACCEPT);</span><br></pre></td></tr></table></figure><p>入口 <code>io.netty.bootstrap.ServerBootstrap#bind</code></p><p>关键代码 <code>io.netty.bootstrap.AbstractBootstrap#doBind</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ChannelFuture <span class="title function_">doBind</span><span class="params">(<span class="keyword">final</span> SocketAddress localAddress)</span> &#123;</span><br><span class="line"><span class="comment">// 1. 执行初始化和注册 regFuture 会由 initAndRegister 设置其是否完成，从而回调 3.2 处代码</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">ChannelFuture</span> <span class="variable">regFuture</span> <span class="operator">=</span> initAndRegister();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> regFuture.channel();</span><br><span class="line">    <span class="keyword">if</span> (regFuture.cause() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> regFuture;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 因为是 initAndRegister 异步执行，需要分两种情况来看，调试时也需要通过 suspend 断点类型加以区分</span></span><br><span class="line">    <span class="comment">// 2.1 如果已经完成</span></span><br><span class="line">    <span class="keyword">if</span> (regFuture.isDone()) &#123;</span><br><span class="line">        <span class="type">ChannelPromise</span> <span class="variable">promise</span> <span class="operator">=</span> channel.newPromise();</span><br><span class="line">        <span class="comment">// 3.1 立刻调用 doBind0</span></span><br><span class="line">        doBind0(regFuture, channel, localAddress, promise);</span><br><span class="line">        <span class="keyword">return</span> promise;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 2.2 还没有完成</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">PendingRegistrationPromise</span> <span class="variable">promise</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PendingRegistrationPromise</span>(channel);</span><br><span class="line">        <span class="comment">// 3.2 回调 doBind0</span></span><br><span class="line">        regFuture.addListener(<span class="keyword">new</span> <span class="title class_">ChannelFutureListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="type">Throwable</span> <span class="variable">cause</span> <span class="operator">=</span> future.cause();</span><br><span class="line">                <span class="keyword">if</span> (cause != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 处理异常...</span></span><br><span class="line">                    promise.setFailure(cause);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    promise.registered();</span><br><span class="line"><span class="comment">// 3. 由注册线程去执行 doBind0</span></span><br><span class="line">                    doBind0(regFuture, channel, localAddress, promise);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> promise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键代码 <code>io.netty.bootstrap.AbstractBootstrap#initAndRegister</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ChannelFuture <span class="title function_">initAndRegister</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        channel = channelFactory.newChannel();</span><br><span class="line">        <span class="comment">// 1.1 初始化 - 做的事就是添加一个初始化器 ChannelInitializer</span></span><br><span class="line">        init(channel);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="comment">// 处理异常...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultChannelPromise</span>(<span class="keyword">new</span> <span class="title class_">FailedChannel</span>(), GlobalEventExecutor.INSTANCE).setFailure(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.2 注册 - 做的事就是将原生 channel 注册到 selector 上</span></span><br><span class="line">    <span class="type">ChannelFuture</span> <span class="variable">regFuture</span> <span class="operator">=</span> config().group().register(channel);</span><br><span class="line">    <span class="keyword">if</span> (regFuture.cause() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理异常...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> regFuture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键代码 <code>io.netty.bootstrap.ServerBootstrap#init</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里 channel 实际上是 NioServerSocketChannel</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">final</span> Map&lt;ChannelOption&lt;?&gt;, Object&gt; options = options0();</span><br><span class="line">    <span class="keyword">synchronized</span> (options) &#123;</span><br><span class="line">        setChannelOptions(channel, options, logger);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Map&lt;AttributeKey&lt;?&gt;, Object&gt; attrs = attrs0();</span><br><span class="line">    <span class="keyword">synchronized</span> (attrs) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: attrs.entrySet()) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            AttributeKey&lt;Object&gt; key = (AttributeKey&lt;Object&gt;) e.getKey();</span><br><span class="line">            channel.attr(key).set(e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ChannelPipeline</span> <span class="variable">p</span> <span class="operator">=</span> channel.pipeline();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">EventLoopGroup</span> <span class="variable">currentChildGroup</span> <span class="operator">=</span> childGroup;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ChannelHandler</span> <span class="variable">currentChildHandler</span> <span class="operator">=</span> childHandler;</span><br><span class="line">    <span class="keyword">final</span> Entry&lt;ChannelOption&lt;?&gt;, Object&gt;[] currentChildOptions;</span><br><span class="line">    <span class="keyword">final</span> Entry&lt;AttributeKey&lt;?&gt;, Object&gt;[] currentChildAttrs;</span><br><span class="line">    <span class="keyword">synchronized</span> (childOptions) &#123;</span><br><span class="line">        currentChildOptions = childOptions.entrySet().toArray(newOptionArray(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (childAttrs) &#123;</span><br><span class="line">        currentChildAttrs = childAttrs.entrySet().toArray(newAttrArray(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为 NioServerSocketChannel 添加初始化器</span></span><br><span class="line">    p.addLast(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;Channel&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(<span class="keyword">final</span> Channel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> ch.pipeline();</span><br><span class="line">            <span class="type">ChannelHandler</span> <span class="variable">handler</span> <span class="operator">=</span> config.handler();</span><br><span class="line">            <span class="keyword">if</span> (handler != <span class="literal">null</span>) &#123;</span><br><span class="line">                pipeline.addLast(handler);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化器的职责是将 ServerBootstrapAcceptor 加入至 NioServerSocketChannel</span></span><br><span class="line">            ch.eventLoop().execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    pipeline.addLast(<span class="keyword">new</span> <span class="title class_">ServerBootstrapAcceptor</span>(</span><br><span class="line">                            ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键代码 <code>io.netty.channel.AbstractChannel.AbstractUnsafe#register</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(EventLoop eventLoop, <span class="keyword">final</span> ChannelPromise promise)</span> &#123;</span><br><span class="line">    <span class="comment">// 一些检查，略...</span></span><br><span class="line"></span><br><span class="line">    AbstractChannel.<span class="built_in">this</span>.eventLoop = eventLoop;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (eventLoop.inEventLoop()) &#123;</span><br><span class="line">        register0(promise);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 首次执行 execute 方法时，会启动 nio 线程，之后注册等操作在 nio 线程上执行</span></span><br><span class="line">            <span class="comment">// 因为只有一个 NioServerSocketChannel 因此，也只会有一个 boss nio 线程</span></span><br><span class="line">            <span class="comment">// 这行代码完成的事实是 main -&gt; nio boss 线程的切换</span></span><br><span class="line">            eventLoop.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    register0(promise);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">// 日志记录...</span></span><br><span class="line">            closeForcibly();</span><br><span class="line">            closeFuture.setClosed();</span><br><span class="line">            safeSetFailure(promise, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>io.netty.channel.AbstractChannel.AbstractUnsafe#register0</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">register0</span><span class="params">(ChannelPromise promise)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!promise.setUncancellable() || !ensureOpen(promise)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">firstRegistration</span> <span class="operator">=</span> neverRegistered;</span><br><span class="line">        <span class="comment">// 1.2.1 原生的 nio channel 绑定到 selector 上，注意此时没有注册 selector 关注事件，附件为 NioServerSocketChannel</span></span><br><span class="line">        doRegister();</span><br><span class="line">        neverRegistered = <span class="literal">false</span>;</span><br><span class="line">        registered = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.2.2 执行 NioServerSocketChannel 初始化器的 initChannel</span></span><br><span class="line">        pipeline.invokeHandlerAddedIfNeeded();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 回调 3.2 io.netty.bootstrap.AbstractBootstrap#doBind0</span></span><br><span class="line">        safeSetSuccess(promise);</span><br><span class="line">        pipeline.fireChannelRegistered();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对应 server socket channel 还未绑定，isActive 为 false</span></span><br><span class="line">        <span class="keyword">if</span> (isActive()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (firstRegistration) &#123;</span><br><span class="line">                pipeline.fireChannelActive();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config().isAutoRead()) &#123;</span><br><span class="line">                beginRead();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="comment">// Close the channel directly to avoid FD leak.</span></span><br><span class="line">        closeForcibly();</span><br><span class="line">        closeFuture.setClosed();</span><br><span class="line">        safeSetFailure(promise, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键代码 <code>io.netty.channel.ChannelInitializer#initChannel</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">initChannel</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (initMap.add(ctx)) &#123; <span class="comment">// Guard against re-entrance.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.2.2.1 执行初始化</span></span><br><span class="line">            initChannel((C) ctx.channel());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable cause) &#123;</span><br><span class="line">            exceptionCaught(ctx, cause);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 1.2.2.2 移除初始化器</span></span><br><span class="line">            <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> ctx.pipeline();</span><br><span class="line">            <span class="keyword">if</span> (pipeline.context(<span class="built_in">this</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                pipeline.remove(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键代码 <code>io.netty.bootstrap.AbstractBootstrap#doBind0</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.1 或 3.2 执行 doBind0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doBind0</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> ChannelFuture regFuture, <span class="keyword">final</span> Channel channel,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> SocketAddress localAddress, <span class="keyword">final</span> ChannelPromise promise)</span> &#123;</span><br><span class="line"></span><br><span class="line">    channel.eventLoop().execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (regFuture.isSuccess()) &#123;</span><br><span class="line">                channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                promise.setFailure(regFuture.cause());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键代码 <code>io.netty.channel.AbstractChannel.AbstractUnsafe#bind</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">bind</span><span class="params">(<span class="keyword">final</span> SocketAddress localAddress, <span class="keyword">final</span> ChannelPromise promise)</span> &#123;</span><br><span class="line">    assertEventLoop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!promise.setUncancellable() || !ensureOpen(promise)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Boolean.TRUE.equals(config().getOption(ChannelOption.SO_BROADCAST)) &amp;&amp;</span><br><span class="line">        localAddress <span class="keyword">instanceof</span> InetSocketAddress &amp;&amp;</span><br><span class="line">        !((InetSocketAddress) localAddress).getAddress().isAnyLocalAddress() &amp;&amp;</span><br><span class="line">        !PlatformDependent.isWindows() &amp;&amp; !PlatformDependent.maybeSuperUser()) &#123;</span><br><span class="line">        <span class="comment">// 记录日志...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">wasActive</span> <span class="operator">=</span> isActive();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 3.3 执行端口绑定</span></span><br><span class="line">        doBind(localAddress);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        safeSetFailure(promise, t);</span><br><span class="line">        closeIfClosed();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!wasActive &amp;&amp; isActive()) &#123;</span><br><span class="line">        invokeLater(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// 3.4 触发 active 事件</span></span><br><span class="line">                pipeline.fireChannelActive();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    safeSetSuccess(promise);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.3 关键代码 <code>io.netty.channel.socket.nio.NioServerSocketChannel#doBind</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doBind</span><span class="params">(SocketAddress localAddress)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (PlatformDependent.javaVersion() &gt;= <span class="number">7</span>) &#123;</span><br><span class="line">        javaChannel().bind(localAddress, config.getBacklog());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        javaChannel().socket().bind(localAddress, config.getBacklog());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.4 关键代码 <code>io.netty.channel.DefaultChannelPipeline.HeadContext#channelActive</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> &#123;</span><br><span class="line">    ctx.fireChannelActive();</span><br><span class="line"><span class="comment">// 触发 read (NioServerSocketChannel 上的 read 不是读取数据，只是为了触发 channel 的事件注册)</span></span><br><span class="line">    readIfIsAutoRead();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键代码 <code>io.netty.channel.nio.AbstractNioChannel#doBeginRead</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doBeginRead</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// Channel.read() or ChannelHandlerContext.read() was called</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">SelectionKey</span> <span class="variable">selectionKey</span> <span class="operator">=</span> <span class="built_in">this</span>.selectionKey;</span><br><span class="line">    <span class="keyword">if</span> (!selectionKey.isValid()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    readPending = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">interestOps</span> <span class="operator">=</span> selectionKey.interestOps();</span><br><span class="line">    <span class="comment">// readInterestOp 取值是 16，在 NioServerSocketChannel 创建时初始化好，代表关注 accept 事件</span></span><br><span class="line">    <span class="keyword">if</span> ((interestOps &amp; readInterestOp) == <span class="number">0</span>) &#123;</span><br><span class="line">        selectionKey.interestOps(interestOps | readInterestOp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-NioEventLoop-剖析"><a href="#2-2-NioEventLoop-剖析" class="headerlink" title="2.2 NioEventLoop 剖析"></a>2.2 NioEventLoop 剖析</h3><p>NioEventLoop 线程不仅要处理 IO 事件，还要处理 Task（包括普通任务和定时任务），</p><p>提交任务代码 <code>io.netty.util.concurrent.SingleThreadEventExecutor#execute</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable task)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;task&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">inEventLoop</span> <span class="operator">=</span> inEventLoop();</span><br><span class="line">    <span class="comment">// 添加任务，其中队列使用了 jctools 提供的 mpsc 无锁队列</span></span><br><span class="line">    addTask(task);</span><br><span class="line">    <span class="keyword">if</span> (!inEventLoop) &#123;</span><br><span class="line">        <span class="comment">// inEventLoop 如果为 false 表示由其它线程来调用 execute，即首次调用，这时需要向 eventLoop 提交首个任务，启动死循环，会执行到下面的 doStartThread</span></span><br><span class="line">        startThread();</span><br><span class="line">        <span class="keyword">if</span> (isShutdown()) &#123;</span><br><span class="line">            <span class="comment">// 如果已经 shutdown，做拒绝逻辑，代码略...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!addTaskWakesUp &amp;&amp; wakesUpForTask(task)) &#123;</span><br><span class="line">        <span class="comment">// 如果线程由于 IO select 阻塞了，添加的任务的线程需要负责唤醒 NioEventLoop 线程</span></span><br><span class="line">        wakeup(inEventLoop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>唤醒 select 阻塞线程<code>io.netty.channel.nio.NioEventLoop#wakeup</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">wakeup</span><span class="params">(<span class="type">boolean</span> inEventLoop)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!inEventLoop &amp;&amp; wakenUp.compareAndSet(<span class="literal">false</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line">        selector.wakeup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 EventLoop 主循环 <code>io.netty.util.concurrent.SingleThreadEventExecutor#doStartThread</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doStartThread</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">assert</span> thread == <span class="literal">null</span>;</span><br><span class="line">    executor.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 将线程池的当前线程保存在成员变量中，以便后续使用</span></span><br><span class="line">            thread = Thread.currentThread();</span><br><span class="line">            <span class="keyword">if</span> (interrupted) &#123;</span><br><span class="line">                thread.interrupt();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            updateLastExecutionTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 调用外部类 SingleThreadEventExecutor 的 run 方法，进入死循环，run 方法见下</span></span><br><span class="line">                SingleThreadEventExecutor.<span class="built_in">this</span>.run();</span><br><span class="line">                success = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;Unexpected exception from an event executor: &quot;</span>, t);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 清理工作，代码略...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>io.netty.channel.nio.NioEventLoop#run</code> 主要任务是执行死循环，不断看有没有新任务，有没有 IO 事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// calculateStrategy 的逻辑如下：</span></span><br><span class="line">                <span class="comment">// 有任务，会执行一次 selectNow，清除上一次的 wakeup 结果，无论有没有 IO 事件，都会跳过 switch</span></span><br><span class="line">                <span class="comment">// 没有任务，会匹配 SelectStrategy.SELECT，看是否应当阻塞</span></span><br><span class="line">                <span class="keyword">switch</span> (selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) &#123;</span><br><span class="line">                    <span class="keyword">case</span> SelectStrategy.CONTINUE:</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">case</span> SelectStrategy.BUSY_WAIT:</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">case</span> SelectStrategy.SELECT:</span><br><span class="line">                        <span class="comment">// 因为 IO 线程和提交任务线程都有可能执行 wakeup，而 wakeup 属于比较昂贵的操作，因此使用了一个原子布尔对象 wakenUp，它取值为 true 时，表示该由当前线程唤醒</span></span><br><span class="line">                        <span class="comment">// 进行 select 阻塞，并设置唤醒状态为 false</span></span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">oldWakenUp</span> <span class="operator">=</span> wakenUp.getAndSet(<span class="literal">false</span>);</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 如果在这个位置，非 EventLoop 线程抢先将 wakenUp 置为 true，并 wakeup</span></span><br><span class="line">                        <span class="comment">// 下面的 select 方法不会阻塞</span></span><br><span class="line">                        <span class="comment">// 等 runAllTasks 处理完成后，到再循环进来这个阶段新增的任务会不会及时执行呢?</span></span><br><span class="line">                        <span class="comment">// 因为 oldWakenUp 为 true，因此下面的 select 方法就会阻塞，直到超时</span></span><br><span class="line">                        <span class="comment">// 才能执行，让 select 方法无谓阻塞</span></span><br><span class="line">                        select(oldWakenUp);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (wakenUp.get()) &#123;</span><br><span class="line">                            selector.wakeup();</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                rebuildSelector0();</span><br><span class="line">                handleLoopException(e);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cancelledKeys = <span class="number">0</span>;</span><br><span class="line">            needsToSelectAgain = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// ioRatio 默认是 50</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ioRatio</span> <span class="operator">=</span> <span class="built_in">this</span>.ioRatio;</span><br><span class="line">            <span class="keyword">if</span> (ioRatio == <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    processSelectedKeys();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// ioRatio 为 100 时，总是运行完所有非 IO 任务</span></span><br><span class="line">                    runAllTasks();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;                </span><br><span class="line">                <span class="keyword">final</span> <span class="type">long</span> <span class="variable">ioStartTime</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    processSelectedKeys();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 记录 io 事件处理耗时</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">ioTime</span> <span class="operator">=</span> System.nanoTime() - ioStartTime;</span><br><span class="line">                    <span class="comment">// 运行非 IO 任务，一旦超时会退出 runAllTasks</span></span><br><span class="line">                    runAllTasks(ioTime * (<span class="number">100</span> - ioRatio) / ioRatio);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            handleLoopException(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isShuttingDown()) &#123;</span><br><span class="line">                closeAll();</span><br><span class="line">                <span class="keyword">if</span> (confirmShutdown()) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            handleLoopException(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⚠️-注意"><a href="#⚠️-注意" class="headerlink" title="⚠️ 注意"></a>⚠️ 注意</h4><blockquote><p>这里有个费解的地方就是 wakeup，它既可以由提交任务的线程来调用（比较好理解），也可以由 EventLoop 线程来调用（比较费解），这里要知道 wakeup 方法的效果：</p><ul><li>由非 EventLoop 线程调用，会唤醒当前在执行 select 阻塞的 EventLoop 线程</li><li>由 EventLoop 自己调用，会本次的 wakeup 会取消下一次的 select 操作</li></ul></blockquote><p>参考下图</p><img src="../images/Netty01-nio/0032.png"  /><p><code>io.netty.channel.nio.NioEventLoop#select</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">(<span class="type">boolean</span> oldWakenUp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> <span class="built_in">this</span>.selector;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">selectCnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTimeNanos</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">        <span class="comment">// 计算等待时间</span></span><br><span class="line">        <span class="comment">// * 没有 scheduledTask，超时时间为 1s</span></span><br><span class="line">        <span class="comment">// * 有 scheduledTask，超时时间为 `下一个定时任务执行时间 - 当前时间`</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">selectDeadLineNanos</span> <span class="operator">=</span> currentTimeNanos + delayNanos(currentTimeNanos);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">timeoutMillis</span> <span class="operator">=</span> (selectDeadLineNanos - currentTimeNanos + <span class="number">500000L</span>) / <span class="number">1000000L</span>;</span><br><span class="line">            <span class="comment">// 如果超时，退出循环</span></span><br><span class="line">            <span class="keyword">if</span> (timeoutMillis &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (selectCnt == <span class="number">0</span>) &#123;</span><br><span class="line">                    selector.selectNow();</span><br><span class="line">                    selectCnt = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果期间又有 task 退出循环，如果没这个判断，那么任务就会等到下次 select 超时时才能被执行</span></span><br><span class="line">            <span class="comment">// wakenUp.compareAndSet(false, true) 是让非 NioEventLoop 不必再执行 wakeup</span></span><br><span class="line">            <span class="keyword">if</span> (hasTasks() &amp;&amp; wakenUp.compareAndSet(<span class="literal">false</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line">                selector.selectNow();</span><br><span class="line">                selectCnt = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// select 有限时阻塞</span></span><br><span class="line">            <span class="comment">// 注意 nio 有 bug，当 bug 出现时，select 方法即使没有时间发生，也不会阻塞住，导致不断空轮询，cpu 占用 100%</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">selectedKeys</span> <span class="operator">=</span> selector.select(timeoutMillis);</span><br><span class="line">            <span class="comment">// 计数加 1</span></span><br><span class="line">            selectCnt ++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 醒来后，如果有 IO 事件、或是由非 EventLoop 线程唤醒，或者有任务，退出循环</span></span><br><span class="line">            <span class="keyword">if</span> (selectedKeys != <span class="number">0</span> || oldWakenUp || wakenUp.get() || hasTasks() || hasScheduledTasks()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">               <span class="comment">// 线程被打断，退出循环</span></span><br><span class="line">                <span class="comment">// 记录日志</span></span><br><span class="line">                selectCnt = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="keyword">if</span> (time - TimeUnit.MILLISECONDS.toNanos(timeoutMillis) &gt;= currentTimeNanos) &#123;</span><br><span class="line">                <span class="comment">// 如果超时，计数重置为 1，下次循环就会 break</span></span><br><span class="line">                selectCnt = <span class="number">1</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// 计数超过阈值，由 io.netty.selectorAutoRebuildThreshold 指定，默认 512</span></span><br><span class="line">            <span class="comment">// 这是为了解决 nio 空轮询 bug</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (SELECTOR_AUTO_REBUILD_THRESHOLD &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                    selectCnt &gt;= SELECTOR_AUTO_REBUILD_THRESHOLD) &#123;</span><br><span class="line">                <span class="comment">// 重建 selector</span></span><br><span class="line">                selector = selectRebuildSelector(selectCnt);</span><br><span class="line">                selectCnt = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            currentTimeNanos = time;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (selectCnt &gt; MIN_PREMATURE_SELECTOR_RETURNS) &#123;</span><br><span class="line">            <span class="comment">// 记录日志</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CancelledKeyException e) &#123;</span><br><span class="line">        <span class="comment">// 记录日志</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理 keys <code>io.netty.channel.nio.NioEventLoop#processSelectedKeys</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processSelectedKeys</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (selectedKeys != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 通过反射将 Selector 实现类中的就绪事件集合替换为 SelectedSelectionKeySet </span></span><br><span class="line">        <span class="comment">// SelectedSelectionKeySet 底层为数组实现，可以提高遍历性能（原本为 HashSet）</span></span><br><span class="line">        processSelectedKeysOptimized();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        processSelectedKeysPlain(selector.selectedKeys());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>io.netty.channel.nio.NioEventLoop#processSelectedKey</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processSelectedKey</span><span class="params">(SelectionKey k, AbstractNioChannel ch)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> AbstractNioChannel.<span class="type">NioUnsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> ch.unsafe();</span><br><span class="line">    <span class="comment">// 当 key 取消或关闭时会导致这个 key 无效</span></span><br><span class="line">    <span class="keyword">if</span> (!k.isValid()) &#123;</span><br><span class="line">        <span class="comment">// 无效时处理...</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">readyOps</span> <span class="operator">=</span> k.readyOps();</span><br><span class="line">        <span class="comment">// 连接事件</span></span><br><span class="line">        <span class="keyword">if</span> ((readyOps &amp; SelectionKey.OP_CONNECT) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ops</span> <span class="operator">=</span> k.interestOps();</span><br><span class="line">            ops &amp;= ~SelectionKey.OP_CONNECT;</span><br><span class="line">            k.interestOps(ops);</span><br><span class="line"></span><br><span class="line">            unsafe.finishConnect();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可写事件</span></span><br><span class="line">        <span class="keyword">if</span> ((readyOps &amp; SelectionKey.OP_WRITE) != <span class="number">0</span>) &#123;</span><br><span class="line">            ch.unsafe().forceFlush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可读或可接入事件</span></span><br><span class="line">        <span class="keyword">if</span> ((readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != <span class="number">0</span> || readyOps == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是可接入 io.netty.channel.nio.AbstractNioMessageChannel.NioMessageUnsafe#read</span></span><br><span class="line">            <span class="comment">// 如果是可读 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read</span></span><br><span class="line">            unsafe.read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CancelledKeyException ignored) &#123;</span><br><span class="line">        unsafe.close(unsafe.voidPromise());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-accept-剖析"><a href="#2-3-accept-剖析" class="headerlink" title="2.3 accept 剖析"></a>2.3 accept 剖析</h3><p>nio 中如下代码，在 netty 中的流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 阻塞直到事件发生</span></span><br><span class="line">selector.select();</span><br><span class="line"></span><br><span class="line">Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;    </span><br><span class="line">    <span class="comment">//2 拿到一个事件</span></span><br><span class="line">    <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iter.next();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3 如果是 accept 事件</span></span><br><span class="line">    <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4 执行 accept</span></span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> serverSocketChannel.accept();</span><br><span class="line">        channel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5 关注 read 事件</span></span><br><span class="line">        channel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看可接入事件处理（accept）</p><p><code>io.netty.channel.nio.AbstractNioMessageChannel.NioMessageUnsafe#read</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">assert</span> <span class="title function_">eventLoop</span><span class="params">()</span>.inEventLoop();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ChannelConfig</span> <span class="variable">config</span> <span class="operator">=</span> config();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> pipeline();    </span><br><span class="line">    <span class="keyword">final</span> RecvByteBufAllocator.<span class="type">Handle</span> <span class="variable">allocHandle</span> <span class="operator">=</span> unsafe().recvBufAllocHandle();</span><br><span class="line">    allocHandle.reset(config);</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">closed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">exception</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">// doReadMessages 中执行了 accept 并创建 NioSocketChannel 作为消息放入 readBuf</span></span><br><span class="line">                <span class="comment">// readBuf 是一个 ArrayList 用来缓存消息</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">localRead</span> <span class="operator">=</span> doReadMessages(readBuf);</span><br><span class="line">                <span class="keyword">if</span> (localRead == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (localRead &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    closed = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">// localRead 为 1，就一条消息，即接收一个客户端连接</span></span><br><span class="line">                allocHandle.incMessagesRead(localRead);</span><br><span class="line">            &#125; <span class="keyword">while</span> (allocHandle.continueReading());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            exception = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> readBuf.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i ++) &#123;</span><br><span class="line">            readPending = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 触发 read 事件，让 pipeline 上的 handler 处理，这时是处理</span></span><br><span class="line">            <span class="comment">// io.netty.bootstrap.ServerBootstrap.ServerBootstrapAcceptor#channelRead</span></span><br><span class="line">            pipeline.fireChannelRead(readBuf.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        readBuf.clear();</span><br><span class="line">        allocHandle.readComplete();</span><br><span class="line">        pipeline.fireChannelReadComplete();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">            closed = closeOnReadError(exception);</span><br><span class="line"></span><br><span class="line">            pipeline.fireExceptionCaught(exception);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">            inputShutdown = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (isOpen()) &#123;</span><br><span class="line">                close(voidPromise());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!readPending &amp;&amp; !config.isAutoRead()) &#123;</span><br><span class="line">            removeReadOp();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键代码 <code>io.netty.bootstrap.ServerBootstrap.ServerBootstrapAcceptor#channelRead</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> &#123;</span><br><span class="line">    <span class="comment">// 这时的 msg 是 NioSocketChannel</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Channel</span> <span class="variable">child</span> <span class="operator">=</span> (Channel) msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// NioSocketChannel 添加  childHandler 即初始化器</span></span><br><span class="line">    child.pipeline().addLast(childHandler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置选项</span></span><br><span class="line">    setChannelOptions(child, childOptions, logger);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: childAttrs) &#123;</span><br><span class="line">        child.attr((AttributeKey&lt;Object&gt;) e.getKey()).set(e.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 注册 NioSocketChannel 到 nio worker 线程，接下来的处理也移交至 nio worker 线程</span></span><br><span class="line">        childGroup.register(child).addListener(<span class="keyword">new</span> <span class="title class_">ChannelFutureListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">if</span> (!future.isSuccess()) &#123;</span><br><span class="line">                    forceClose(child, future.cause());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        forceClose(child, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又回到了熟悉的 <code>io.netty.channel.AbstractChannel.AbstractUnsafe#register</code>  方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(EventLoop eventLoop, <span class="keyword">final</span> ChannelPromise promise)</span> &#123;</span><br><span class="line">    <span class="comment">// 一些检查，略...</span></span><br><span class="line"></span><br><span class="line">    AbstractChannel.<span class="built_in">this</span>.eventLoop = eventLoop;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (eventLoop.inEventLoop()) &#123;</span><br><span class="line">        register0(promise);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这行代码完成的事实是 nio boss -&gt; nio worker 线程的切换</span></span><br><span class="line">            eventLoop.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    register0(promise);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">// 日志记录...</span></span><br><span class="line">            closeForcibly();</span><br><span class="line">            closeFuture.setClosed();</span><br><span class="line">            safeSetFailure(promise, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>io.netty.channel.AbstractChannel.AbstractUnsafe#register0</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">register0</span><span class="params">(ChannelPromise promise)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!promise.setUncancellable() || !ensureOpen(promise)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">firstRegistration</span> <span class="operator">=</span> neverRegistered;</span><br><span class="line">        doRegister();</span><br><span class="line">        neverRegistered = <span class="literal">false</span>;</span><br><span class="line">        registered = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行初始化器，执行前 pipeline 中只有 head -&gt; 初始化器 -&gt; tail</span></span><br><span class="line">        pipeline.invokeHandlerAddedIfNeeded();</span><br><span class="line">        <span class="comment">// 执行后就是 head -&gt; logging handler -&gt; my handler -&gt; tail</span></span><br><span class="line"></span><br><span class="line">        safeSetSuccess(promise);</span><br><span class="line">        pipeline.fireChannelRegistered();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (isActive()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (firstRegistration) &#123;</span><br><span class="line">                <span class="comment">// 触发 pipeline 上 active 事件</span></span><br><span class="line">                pipeline.fireChannelActive();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config().isAutoRead()) &#123;</span><br><span class="line">                beginRead();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        closeForcibly();</span><br><span class="line">        closeFuture.setClosed();</span><br><span class="line">        safeSetFailure(promise, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到了熟悉的代码 <code>io.netty.channel.DefaultChannelPipeline.HeadContext#channelActive</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> &#123;</span><br><span class="line">    ctx.fireChannelActive();</span><br><span class="line"><span class="comment">// 触发 read (NioSocketChannel 这里 read，只是为了触发 channel 的事件注册，还未涉及数据读取)</span></span><br><span class="line">    readIfIsAutoRead();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>io.netty.channel.nio.AbstractNioChannel#doBeginRead</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doBeginRead</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// Channel.read() or ChannelHandlerContext.read() was called</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">SelectionKey</span> <span class="variable">selectionKey</span> <span class="operator">=</span> <span class="built_in">this</span>.selectionKey;</span><br><span class="line">    <span class="keyword">if</span> (!selectionKey.isValid()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    readPending = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 这时候 interestOps 是 0</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">interestOps</span> <span class="operator">=</span> selectionKey.interestOps();</span><br><span class="line">    <span class="keyword">if</span> ((interestOps &amp; readInterestOp) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 关注 read 事件</span></span><br><span class="line">        selectionKey.interestOps(interestOps | readInterestOp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-read-剖析"><a href="#2-4-read-剖析" class="headerlink" title="2.4 read 剖析"></a>2.4 read 剖析</h3><p>再来看可读事件 <code>io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read</code>，注意发送的数据未必能够一次读完，因此会触发多次 nio read 事件，一次事件内会触发多次 pipeline read，一次事件会触发一次 pipeline read complete</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ChannelConfig</span> <span class="variable">config</span> <span class="operator">=</span> config();</span><br><span class="line">    <span class="keyword">if</span> (shouldBreakReadReady(config)) &#123;</span><br><span class="line">        clearReadPending();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> pipeline();</span><br><span class="line">    <span class="comment">// io.netty.allocator.type 决定 allocator 的实现</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">ByteBufAllocator</span> <span class="variable">allocator</span> <span class="operator">=</span> config.getAllocator();</span><br><span class="line">    <span class="comment">// 用来分配 byteBuf，确定单次读取大小</span></span><br><span class="line">    <span class="keyword">final</span> RecvByteBufAllocator.<span class="type">Handle</span> <span class="variable">allocHandle</span> <span class="operator">=</span> recvBufAllocHandle();</span><br><span class="line">    allocHandle.reset(config);</span><br><span class="line"></span><br><span class="line">    <span class="type">ByteBuf</span> <span class="variable">byteBuf</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">close</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            byteBuf = allocHandle.allocate(allocator);</span><br><span class="line">            <span class="comment">// 读取</span></span><br><span class="line">            allocHandle.lastBytesRead(doReadBytes(byteBuf));</span><br><span class="line">            <span class="keyword">if</span> (allocHandle.lastBytesRead() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                byteBuf.release();</span><br><span class="line">                byteBuf = <span class="literal">null</span>;</span><br><span class="line">                close = allocHandle.lastBytesRead() &lt; <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (close) &#123;</span><br><span class="line">                    readPending = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            allocHandle.incMessagesRead(<span class="number">1</span>);</span><br><span class="line">            readPending = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 触发 read 事件，让 pipeline 上的 handler 处理，这时是处理 NioSocketChannel 上的 handler</span></span><br><span class="line">            pipeline.fireChannelRead(byteBuf);</span><br><span class="line">            byteBuf = <span class="literal">null</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 是否要继续循环</span></span><br><span class="line">        <span class="keyword">while</span> (allocHandle.continueReading());</span><br><span class="line"></span><br><span class="line">        allocHandle.readComplete();</span><br><span class="line">        <span class="comment">// 触发 read complete 事件</span></span><br><span class="line">        pipeline.fireChannelReadComplete();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (close) &#123;</span><br><span class="line">            closeOnRead(pipeline);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        handleReadException(pipeline, byteBuf, t, close, allocHandle);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!readPending &amp;&amp; !config.isAutoRead()) &#123;</span><br><span class="line">            removeReadOp();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator.MaxMessageHandle#continueReading(io.netty.util.UncheckedBooleanSupplier)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">continueReading</span><span class="params">(UncheckedBooleanSupplier maybeMoreDataSupplier)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">           <span class="comment">// 一般为 true</span></span><br><span class="line">           config.isAutoRead() &amp;&amp;</span><br><span class="line">           <span class="comment">// respectMaybeMoreData 默认为 true</span></span><br><span class="line">           <span class="comment">// maybeMoreDataSupplier 的逻辑是如果预期读取字节与实际读取字节相等，返回 true</span></span><br><span class="line">           (!respectMaybeMoreData || maybeMoreDataSupplier.get()) &amp;&amp;</span><br><span class="line">           <span class="comment">// 小于最大次数，maxMessagePerRead 默认 16</span></span><br><span class="line">           totalMessages &lt; maxMessagePerRead &amp;&amp;</span><br><span class="line">           <span class="comment">// 实际读到了数据</span></span><br><span class="line">           totalBytesRead &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 中间件 </tag>
            
            <tag> Netty </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/22/Netty03-%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/11/22/Netty03-%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p>title: Netty 进阶<br>date: 2022-12-06 12:12:57<br>categories: </p><ul><li>JAVA<br>tags:</li><li>中间件</li><li>Netty</li><li>网络编程</li><li>框架</li></ul><h1 id="三-Netty-进阶"><a href="#三-Netty-进阶" class="headerlink" title="三. Netty 进阶"></a>三. Netty 进阶</h1><h2 id="1-粘包与半包"><a href="#1-粘包与半包" class="headerlink" title="1. 粘包与半包"></a>1. 粘包与半包</h2><h3 id="1-1-粘包现象"><a href="#1-1-粘包现象" class="headerlink" title="1.1 粘包现象"></a>1.1 粘包现象</h3><p>服务端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldServer</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(HelloWorldServer.class);</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">boss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServerBootstrap</span> <span class="variable">serverBootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">            serverBootstrap.channel(NioServerSocketChannel.class);</span><br><span class="line">            serverBootstrap.group(boss, worker);</span><br><span class="line">            serverBootstrap.childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.DEBUG));</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                            log.debug(<span class="string">&quot;connected &#123;&#125;&quot;</span>, ctx.channel());</span><br><span class="line">                            <span class="built_in">super</span>.channelActive(ctx);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                            log.debug(<span class="string">&quot;disconnect &#123;&#125;&quot;</span>, ctx.channel());</span><br><span class="line">                            <span class="built_in">super</span>.channelInactive(ctx);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="type">ChannelFuture</span> <span class="variable">channelFuture</span> <span class="operator">=</span> serverBootstrap.bind(<span class="number">8080</span>);</span><br><span class="line">            log.debug(<span class="string">&quot;&#123;&#125; binding...&quot;</span>, channelFuture.channel());</span><br><span class="line">            channelFuture.sync();</span><br><span class="line">            log.debug(<span class="string">&quot;&#123;&#125; bound...&quot;</span>, channelFuture.channel());</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;server error&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            boss.shutdownGracefully();</span><br><span class="line">            worker.shutdownGracefully();</span><br><span class="line">            log.debug(<span class="string">&quot;stoped&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HelloWorldServer</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端代码希望发送 10 个消息，每个消息是 16 字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldClient</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(HelloWorldClient.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">            bootstrap.channel(NioSocketChannel.class);</span><br><span class="line">            bootstrap.group(worker);</span><br><span class="line">            bootstrap.handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;connetted...&quot;</span>);</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                            log.debug(<span class="string">&quot;sending...&quot;</span>);</span><br><span class="line">                            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">                            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                                <span class="type">ByteBuf</span> <span class="variable">buffer</span> <span class="operator">=</span> ctx.alloc().buffer();</span><br><span class="line">                                buffer.writeBytes(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;);</span><br><span class="line">                                ctx.writeAndFlush(buffer);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="type">ChannelFuture</span> <span class="variable">channelFuture</span> <span class="operator">=</span> bootstrap.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;client error&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            worker.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器端的某次输出，可以看到一次就接收了 160 个字节，而非分 10 次接收</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">08:24:46 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x81e0fda5] binding...</span><br><span class="line">08:24:46 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x81e0fda5, L:/0:0:0:0:0:0:0:0:8080] bound...</span><br><span class="line">08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] REGISTERED</span><br><span class="line">08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] ACTIVE</span><br><span class="line">08:24:55 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177]</span><br><span class="line">08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] READ: 160B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|</span><br><span class="line">|00000010| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|</span><br><span class="line">|00000020| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|</span><br><span class="line">|00000030| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|</span><br><span class="line">|00000040| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|</span><br><span class="line">|00000050| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|</span><br><span class="line">|00000060| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|</span><br><span class="line">|00000070| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|</span><br><span class="line">|00000080| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|</span><br><span class="line">|00000090| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] READ COMPLETE</span><br></pre></td></tr></table></figure><h3 id="1-2-半包现象"><a href="#1-2-半包现象" class="headerlink" title="1.2 半包现象"></a>1.2 半包现象</h3><p>客户端代码希望发送 1 个消息，这个消息是 160 字节，代码改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuf</span> <span class="variable">buffer</span> <span class="operator">=</span> ctx.alloc().buffer();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    buffer.writeBytes(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line">ctx.writeAndFlush(buffer);</span><br></pre></td></tr></table></figure><p>为现象明显，服务端修改一下接收缓冲区，其它代码不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serverBootstrap.option(ChannelOption.SO_RCVBUF, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>服务器端的某次输出，可以看到接收的消息被分为两节，第一次 20 字节，第二次 140 字节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">08:43:49 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x4d6c6a84] binding...</span><br><span class="line">08:43:49 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x4d6c6a84, L:/0:0:0:0:0:0:0:0:8080] bound...</span><br><span class="line">08:44:23 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] REGISTERED</span><br><span class="line">08:44:23 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] ACTIVE</span><br><span class="line">08:44:23 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221]</span><br><span class="line">08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ: 20B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f |................|</span><br><span class="line">|00000010| 00 01 02 03                                     |....            |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ COMPLETE</span><br><span class="line">08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ: 140B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|</span><br><span class="line">|00000010| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|</span><br><span class="line">|00000020| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|</span><br><span class="line">|00000030| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|</span><br><span class="line">|00000040| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|</span><br><span class="line">|00000050| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|</span><br><span class="line">|00000060| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|</span><br><span class="line">|00000070| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00 01 02 03 |................|</span><br><span class="line">|00000080| 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f             |............    |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ COMPLETE</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><p>serverBootstrap.option(ChannelOption.SO_RCVBUF, 10) 影响的底层接收缓冲区（即滑动窗口）大小，仅决定了 netty 读取的最小单位，netty 实际每次读取的一般是它的整数倍</p></blockquote><h3 id="1-3-现象分析"><a href="#1-3-现象分析" class="headerlink" title="1.3 现象分析"></a>1.3 现象分析</h3><p>粘包</p><ul><li>现象，发送 abc def，接收 abcdef</li><li>原因<ul><li>应用层：接收方 ByteBuf 设置太大（Netty 默认 1024）</li><li>TCP滑动窗口：假设发送方 256 bytes 表示一个完整报文，但由于接收方处理不及时且窗口大小足够大，这 256 bytes 字节就会缓冲在接收方的滑动窗口中，当滑动窗口中缓冲了多个报文就会粘包</li><li>Nagle 算法：会造成粘包</li></ul></li></ul><p>半包</p><ul><li>现象，发送 abcdef，接收 abc def</li><li>原因<ul><li>应用层：接收方 ByteBuf 小于实际发送数据量</li><li>TCP滑动窗口：假设接收方的窗口只剩了 128 bytes，发送方的报文大小是 256 bytes，这时放不下了，只能先发送前 128 bytes，等待 ack 后才能发送剩余部分，这就造成了半包</li><li>MSS 限制：当发送的数据超过 MSS 限制后，会将数据切分发送，就会造成半包</li></ul></li></ul><p>TCP协议的编程，都会受到TCP编程的影响。</p><p>本质是因为 TCP 是流式协议，消息无边界</p><blockquote><p>滑动窗口</p><ul><li><p>TCP 以一个段（segment）为单位，每发送一个段就需要进行一次确认应答（ack）处理，但如果这么做，缺点是包的往返时间越长性能就越差</p><p><img src="/../images/Netty01-nio/0049.png"></p></li><li><p>为了解决此问题，引入了窗口概念，窗口大小即决定了无需等待应答而可以继续发送的数据最大值</p><p><img src="/../images/Netty01-nio/0051.png"></p></li><li><p>窗口实际就起到一个缓冲区的作用，同时也能起到流量控制的作用</p><ul><li>图中深色的部分即要发送的数据，高亮的部分即窗口</li><li>窗口内的数据才允许被发送，当应答未到达前，窗口必须停止滑动</li><li>如果 1001~2000 这个段的数据 ack 回来了，窗口就可以向前滑动</li><li>接收方也会维护一个窗口，只有落在窗口内的数据才能允许接收</li></ul></li></ul></blockquote><blockquote><p> MSS 限制</p><ul><li>链路层对一次能够发送的最大数据有限制，这个限制称之为 MTU（maximum transmission unit），不同的链路设备的 MTU 值也有所不同，例如</li><li>以太网的 MTU 是 1500</li><li>FDDI（光纤分布式数据接口）的 MTU 是 4352</li><li>本地回环地址的 MTU 是 65535 - 本地测试不走网卡</li><li>MSS（Maximum Segment Size）是传输层分段的单位，一般是1480字节，是根据数据链路层的MTU：Maximum Transmission Unit，最大传输单元  计算而来</li><li>MSS 是最大段长度（maximum segment size），它是 MTU 刨去 tcp 头和 ip 头后剩余能够作为数据传输的字节数</li><li>ipv4 tcp 头占用 20 bytes，ip 头占用 20 bytes，因此以太网 MSS 的值为 1500 - 40 &#x3D; 1460</li><li>TCP 在传递大量数据时，会按照 MSS 大小将数据进行分割发送</li><li>MSS 的值在三次握手时通知对方自己 MSS 的值，然后在两者之间选择一个小值作为 MSS</li></ul><p> <img src="/../images/Netty03-%E8%BF%9B%E9%98%B6/0031.jpg"></p></blockquote><blockquote><p>Nagle 算法</p><ul><li>即使发送一个字节，也需要加入 tcp 头和 ip 头，也就是总字节数会使用 41 bytes，非常不经济。因此为了提高网络利用率，tcp 希望尽可能发送足够大的数据，这就是 Nagle 算法产生的缘由</li><li>该算法是指发送端即使还有应该发送的数据，但如果这部分数据很少的话，则进行延迟发送<ul><li>如果 SO_SNDBUF 的数据达到 MSS，则需要发送</li><li>如果 SO_SNDBUF 中含有 FIN（表示需要连接关闭）这时将剩余数据发送，再关闭</li><li>如果 TCP_NODELAY &#x3D; true，则需要发送</li><li>已发送的数据都收到 ack 时，则需要发送</li><li>上述条件不满足，但发生超时（一般为 200ms）则需要发送</li><li>除上述情况，延迟发送</li></ul></li></ul></blockquote><h3 id="1-4-解决方案"><a href="#1-4-解决方案" class="headerlink" title="1.4 解决方案"></a>1.4 解决方案</h3><ol><li>短链接，发一个包建立一次连接，这样连接建立到连接断开之间就是消息的边界，缺点效率太低</li><li>每一条消息采用固定长度，缺点浪费空间</li><li>每一条消息采用分隔符，例如 \n，缺点需要转义</li><li>每一条消息分为 head 和 body，head 中包含 body 的长度</li></ol><h4 id="方法1，短链接"><a href="#方法1，短链接" class="headerlink" title="方法1，短链接"></a>方法1，短链接</h4><p>以解决粘包为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldClient</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(HelloWorldClient.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 分 10 次发送</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            send();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">            bootstrap.channel(NioSocketChannel.class);</span><br><span class="line">            bootstrap.group(worker);</span><br><span class="line">            bootstrap.handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;conneted...&quot;</span>);</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.DEBUG));</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                            log.debug(<span class="string">&quot;sending...&quot;</span>);</span><br><span class="line">                            <span class="type">ByteBuf</span> <span class="variable">buffer</span> <span class="operator">=</span> ctx.alloc().buffer();</span><br><span class="line">                            buffer.writeBytes(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;);</span><br><span class="line">                            ctx.writeAndFlush(buffer);</span><br><span class="line">                            <span class="comment">// 发完即关</span></span><br><span class="line">                            ctx.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="type">ChannelFuture</span> <span class="variable">channelFuture</span> <span class="operator">=</span> bootstrap.connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;client error&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            worker.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出，略</p><blockquote><p>半包用这种办法还是不好解决，因为接收方的缓冲区大小是有限的</p></blockquote><h4 id="方法2，固定长度"><a href="#方法2，固定长度" class="headerlink" title="方法2，固定长度"></a>方法2，固定长度</h4><p>让所有数据包长度固定（假设长度为 8 字节），服务器端加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">FixedLengthFrameDecoder</span>(<span class="number">8</span>));</span><br></pre></td></tr></table></figure><p>客户端测试代码，注意, 采用这种方法后，客户端什么时候 flush 都可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldClient</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(HelloWorldClient.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">            bootstrap.channel(NioSocketChannel.class);</span><br><span class="line">            bootstrap.group(worker);</span><br><span class="line">            bootstrap.handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;connetted...&quot;</span>);</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.DEBUG));</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                            log.debug(<span class="string">&quot;sending...&quot;</span>);</span><br><span class="line">                            <span class="comment">// 发送内容随机的数据包</span></span><br><span class="line">                            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">                            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                            <span class="type">ByteBuf</span> <span class="variable">buffer</span> <span class="operator">=</span> ctx.alloc().buffer();</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>];</span><br><span class="line">                                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; r.nextInt(<span class="number">8</span>); j++) &#123;</span><br><span class="line">                                    bytes[j] = (<span class="type">byte</span>) c;</span><br><span class="line">                                &#125;</span><br><span class="line">                                c++;</span><br><span class="line">                                buffer.writeBytes(bytes);</span><br><span class="line">                            &#125;</span><br><span class="line">                            ctx.writeAndFlush(buffer);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="type">ChannelFuture</span> <span class="variable">channelFuture</span> <span class="operator">=</span> bootstrap.connect(<span class="string">&quot;192.168.0.103&quot;</span>, <span class="number">9090</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;client error&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            worker.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted...</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2] REGISTERED</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2] CONNECT: /192.168.0.103:9090</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] ACTIVE</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending...</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] WRITE: 80B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 61 61 61 61 00 00 00 00 62 00 00 00 00 00 00 00 |aaaa....b.......|</span><br><span class="line">|00000010| 63 63 00 00 00 00 00 00 64 00 00 00 00 00 00 00 |cc......d.......|</span><br><span class="line">|00000020| 00 00 00 00 00 00 00 00 66 66 66 66 00 00 00 00 |........ffff....|</span><br><span class="line">|00000030| 67 67 67 00 00 00 00 00 68 00 00 00 00 00 00 00 |ggg.....h.......|</span><br><span class="line">|00000040| 69 69 69 69 69 00 00 00 6a 6a 6a 6a 00 00 00 00 |iiiii...jjjj....|</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] FLUSH</span><br></pre></td></tr></table></figure><p>服务端输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">12:06:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xe3d9713f] binding...</span><br><span class="line">12:06:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xe3d9713f, L:/192.168.0.103:9090] bound...</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] REGISTERED</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] ACTIVE</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155]</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 61 61 61 61 00 00 00 00                         |aaaa....        |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 62 00 00 00 00 00 00 00                         |b.......        |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 63 63 00 00 00 00 00 00                         |cc......        |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 64 00 00 00 00 00 00 00                         |d.......        |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 00 00 00 00 00 00 00 00                         |........        |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 66 66 66 66 00 00 00 00                         |ffff....        |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 67 67 67 00 00 00 00 00                         |ggg.....        |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 68 00 00 00 00 00 00 00                         |h.......        |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 69 69 69 69 69 00 00 00                         |iiiii...        |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 6a 6a 6a 6a 00 00 00 00                         |jjjj....        |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ COMPLETE</span><br></pre></td></tr></table></figure><p>缺点是，数据包的大小不好把握</p><ul><li>长度定的太大，浪费</li><li>长度定的太小，对某些数据包又显得不够</li></ul><h4 id="方法3，分隔符"><a href="#方法3，分隔符" class="headerlink" title="方法3，分隔符"></a>方法3，分隔符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LineBasedFrameDecoder L1; <span class="comment">// 回车作为换行符 \n 或者 \r\n</span></span><br><span class="line">DelimiterBasedFrameDecoder d1;<span class="comment">// 自定义换行符</span></span><br></pre></td></tr></table></figure><p>服务端加入，默认以 \n 或 \r\n 作为分隔符，如果超出指定长度仍未出现分隔符，则抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">LineBasedFrameDecoder</span>(<span class="number">1024</span>));</span><br></pre></td></tr></table></figure><p>客户端在每条消息之后，加入 \n 分隔符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldClient</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(HelloWorldClient.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">            bootstrap.channel(NioSocketChannel.class);</span><br><span class="line">            bootstrap.group(worker);</span><br><span class="line">            bootstrap.handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;connetted...&quot;</span>);</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.DEBUG));</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                            log.debug(<span class="string">&quot;sending...&quot;</span>);</span><br><span class="line">                            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">                            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                            <span class="type">ByteBuf</span> <span class="variable">buffer</span> <span class="operator">=</span> ctx.alloc().buffer();</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= r.nextInt(<span class="number">16</span>)+<span class="number">1</span>; j++) &#123;</span><br><span class="line">                                    buffer.writeByte((<span class="type">byte</span>) c);</span><br><span class="line">                                &#125;</span><br><span class="line">                                buffer.writeByte(<span class="number">10</span>);</span><br><span class="line">                                c++;</span><br><span class="line">                            &#125;</span><br><span class="line">                            ctx.writeAndFlush(buffer);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="type">ChannelFuture</span> <span class="variable">channelFuture</span> <span class="operator">=</span> bootstrap.connect(<span class="string">&quot;192.168.0.103&quot;</span>, <span class="number">9090</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;client error&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            worker.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted...</span><br><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755] REGISTERED</span><br><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755] CONNECT: /192.168.0.103:9090</span><br><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] ACTIVE</span><br><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending...</span><br><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] WRITE: 60B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 61 0a 62 62 62 0a 63 63 63 0a 64 64 0a 65 65 65 |a.bbb.ccc.dd.eee|</span><br><span class="line">|00000010| 65 65 65 65 65 65 65 0a 66 66 0a 67 67 67 67 67 |eeeeeee.ff.ggggg|</span><br><span class="line">|00000020| 67 67 0a 68 68 68 68 0a 69 69 69 69 69 69 69 0a |gg.hhhh.iiiiiii.|</span><br><span class="line">|00000030| 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 0a             |jjjjjjjjjjj.    |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] FLUSH</span><br></pre></td></tr></table></figure><p>服务端输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-3-5] c.i.n.HelloWorldServer - connected [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641]</span><br><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 1B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 61                                              |a               |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 3B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 62 62 62                                        |bbb             |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 3B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 63 63 63                                        |ccc             |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 2B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 64 64                                           |dd              |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 10B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 65 65 65 65 65 65 65 65 65 65                   |eeeeeeeeee      |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 2B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 66 66                                           |ff              |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 7B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 67 67 67 67 67 67 67                            |ggggggg         |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 4B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 68 68 68 68                                     |hhhh            |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 7B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 69 69 69 69 69 69 69                            |iiiiiii         |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 11B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a                |jjjjjjjjjjj     |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ COMPLETE</span><br></pre></td></tr></table></figure><p>缺点，处理字符数据比较合适，但如果内容本身包含了分隔符（字节数据常常会有此情况），那么就会解析错误</p><h4 id="方法4，预设长度"><a href="#方法4，预设长度" class="headerlink" title="方法4，预设长度"></a>方法4，预设长度</h4><p>在发送消息前，先约定用定长字节表示接下来数据的长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最大长度，长度偏移，长度占用字节，长度调整，剥离字节数</span></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">LengthFieldBasedFrameDecoder</span>(<span class="number">1024</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLengthFieldDecoder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">EmbeddedChannel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmbeddedChannel</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LengthFieldBasedFrameDecoder</span>(<span class="number">1024</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.DEBUG)</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 4个字节的内容长度int 内容</span></span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBufAllocator.DEFAULT.buffer();</span><br><span class="line">        send(buf, <span class="string">&quot;hello,world!&quot;</span>);</span><br><span class="line">        send(buf, <span class="string">&quot;hi!&quot;</span>);</span><br><span class="line">        channel.writeInbound(buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(ByteBuf buf, String content)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = content.getBytes(); <span class="comment">// 实际内容</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> bytes.length;<span class="comment">// 实际内容长度</span></span><br><span class="line">        buf.writeInt(length);</span><br><span class="line">        buf.writeByte(<span class="number">1</span>);</span><br><span class="line">        buf.writeBytes(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 00 00 00 0c 01 68 65 6c 6c 6f 2c 77 6f 72 6c 64 |.....hello,world|</span><br><span class="line">|00000010| 21                                              |!               |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">16:53:31.123 [main] DEBUG io.netty.handler.logging.LoggingHandler - [id: 0xembedded, L:embedded - R:embedded] READ: 8B</span><br><span class="line">         +-------------------------------------------------+</span><br><span class="line">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">|00000000| 00 00 00 03 01 68 69 21                         |.....hi!        |</span><br><span class="line">+--------+-------------------------------------------------+----------------+</span><br><span class="line">16:53:31.123 [main] DEBUG io.netty.handler.logging.LoggingHandler - [id: 0xembedded, L:embedded - R:embedded] READ COMPLETE</span><br></pre></td></tr></table></figure><h2 id="2-协议设计与解析"><a href="#2-协议设计与解析" class="headerlink" title="2. 协议设计与解析"></a>2. 协议设计与解析</h2><h3 id="2-1-为什么需要协议？"><a href="#2-1-为什么需要协议？" class="headerlink" title="2.1 为什么需要协议？"></a>2.1 为什么需要协议？</h3><p>TCP&#x2F;IP 中消息传输基于流的方式，没有边界。</p><p>协议的目的就是划定消息的边界，制定通信双方要共同遵守的通信规则</p><p>例如：在网络上传输</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下雨天留客天留我不留</span><br></pre></td></tr></table></figure><p>是中文一句著名的无标点符号句子，在没有标点符号情况下，这句话有数种拆解方式，而意思却是完全不同，所以常被用作讲述标点符号的重要性</p><p>一种解读</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下雨天留客，天留，我不留</span><br></pre></td></tr></table></figure><p>另一种解读</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下雨天，留客天，留我不？留</span><br></pre></td></tr></table></figure><p>如何设计协议呢？其实就是给网络传输的信息加上“标点符号”。但通过分隔符来断句不是很好，因为分隔符本身如果用于传输，那么必须加以区分。因此，下面一种协议较为常用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定长字节表示内容长度 + 实际内容</span><br></pre></td></tr></table></figure><p>例如，假设一个中文字符长度为 3，按照上述协议的规则，发送信息方式如下，就不会被接收方弄错意思了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0f下雨天留客06天留09我不留</span><br></pre></td></tr></table></figure><blockquote><p>小故事</p><p>很久很久以前，一位私塾先生到一家任教。双方签订了一纸协议：“无鸡鸭亦可无鱼肉亦可白菜豆腐不可少不得束修金”。此后，私塾先生虽然认真教课，但主人家则总是给私塾先生以白菜豆腐为菜，丝毫未见鸡鸭鱼肉的款待。私塾先生先是很不解，可是后来也就想通了：主人把鸡鸭鱼肉的钱都会换为束修金的，也罢。至此双方相安无事。</p><p>年关将至，一个学年段亦告结束。私塾先生临行时，也不见主人家为他交付束修金，遂与主家理论。然主家亦振振有词：“有协议为证——无鸡鸭亦可，无鱼肉亦可，白菜豆腐不可少，不得束修金。这白纸黑字明摆着的，你有什么要说的呢？”</p><p>私塾先生据理力争：“协议是这样的——无鸡，鸭亦可；无鱼，肉亦可；白菜豆腐不可，少不得束修金。”</p><p>双方唇枪舌战，你来我往，真个是不亦乐乎！</p><p>这里的束修金，也作“束脩”，应当是泛指教师应当得到的报酬</p></blockquote><h3 id="2-2-redis-协议举例"><a href="#2-2-redis-协议举例" class="headerlink" title="2.2 redis 协议举例"></a>2.2 redis 协议举例</h3><p>set key value</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set name zhangsan</span><br><span class="line">$3 </span><br><span class="line">set</span><br><span class="line">$4</span><br><span class="line">name</span><br><span class="line">$8</span><br><span class="line">zhangsan </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NioEventLoopGroup</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line"><span class="type">byte</span>[] LINE = &#123;<span class="number">13</span>, <span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">    bootstrap.channel(NioSocketChannel.class);</span><br><span class="line">    bootstrap.group(worker);</span><br><span class="line">    bootstrap.handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> &#123;</span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>());</span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>() &#123;</span><br><span class="line">                <span class="comment">// 会在连接 channel 建立成功后，会触发 active 事件</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> &#123;</span><br><span class="line">                    set(ctx);</span><br><span class="line">                    get(ctx);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(ChannelHandlerContext ctx)</span> &#123;</span><br><span class="line">                    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> ctx.alloc().buffer();</span><br><span class="line">                    buf.writeBytes(<span class="string">&quot;*2&quot;</span>.getBytes());</span><br><span class="line">                    buf.writeBytes(LINE);</span><br><span class="line">                    buf.writeBytes(<span class="string">&quot;$3&quot;</span>.getBytes());</span><br><span class="line">                    buf.writeBytes(LINE);</span><br><span class="line">                    buf.writeBytes(<span class="string">&quot;get&quot;</span>.getBytes());</span><br><span class="line">                    buf.writeBytes(LINE);</span><br><span class="line">                    buf.writeBytes(<span class="string">&quot;$3&quot;</span>.getBytes());</span><br><span class="line">                    buf.writeBytes(LINE);</span><br><span class="line">                    buf.writeBytes(<span class="string">&quot;aaa&quot;</span>.getBytes());</span><br><span class="line">                    buf.writeBytes(LINE);</span><br><span class="line">                    ctx.writeAndFlush(buf);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(ChannelHandlerContext ctx)</span> &#123;</span><br><span class="line">                    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> ctx.alloc().buffer();</span><br><span class="line">                    buf.writeBytes(<span class="string">&quot;*3&quot;</span>.getBytes());</span><br><span class="line">                    buf.writeBytes(LINE);</span><br><span class="line">                    buf.writeBytes(<span class="string">&quot;$3&quot;</span>.getBytes());</span><br><span class="line">                    buf.writeBytes(LINE);</span><br><span class="line">                    buf.writeBytes(<span class="string">&quot;set&quot;</span>.getBytes());</span><br><span class="line">                    buf.writeBytes(LINE);</span><br><span class="line">                    buf.writeBytes(<span class="string">&quot;$3&quot;</span>.getBytes());</span><br><span class="line">                    buf.writeBytes(LINE);</span><br><span class="line">                    buf.writeBytes(<span class="string">&quot;aaa&quot;</span>.getBytes());</span><br><span class="line">                    buf.writeBytes(LINE);</span><br><span class="line">                    buf.writeBytes(<span class="string">&quot;$3&quot;</span>.getBytes());</span><br><span class="line">                    buf.writeBytes(LINE);</span><br><span class="line">                    buf.writeBytes(<span class="string">&quot;bbb&quot;</span>.getBytes());</span><br><span class="line">                    buf.writeBytes(LINE);</span><br><span class="line">                    ctx.writeAndFlush(buf);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">                    System.out.println(buf.toString(Charset.defaultCharset()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">ChannelFuture</span> <span class="variable">channelFuture</span> <span class="operator">=</span> bootstrap.connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>).sync();</span><br><span class="line">    channelFuture.channel().closeFuture().sync();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;client error&quot;</span>, e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    worker.shutdownGracefully();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">NioEventLoopGroup</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">byte</span>[] LINE = &#123;<span class="number">13</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">        bootstrap.channel(NioSocketChannel.class);</span><br><span class="line">        bootstrap.group(worker);</span><br><span class="line">        bootstrap.handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> &#123;</span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>());</span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>() &#123;</span><br><span class="line">                    <span class="comment">// 会在连接 channel 建立成功后，会触发 active 事件</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> &#123;</span><br><span class="line">                        <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> ctx.alloc().buffer();</span><br><span class="line">                        buf.writeBytes(<span class="string">&quot;*3&quot;</span>.getBytes());</span><br><span class="line">                        buf.writeBytes(LINE);</span><br><span class="line">                        buf.writeBytes(<span class="string">&quot;$3&quot;</span>.getBytes());</span><br><span class="line">                        buf.writeBytes(LINE);</span><br><span class="line">                        buf.writeBytes(<span class="string">&quot;set&quot;</span>.getBytes());</span><br><span class="line">                        buf.writeBytes(LINE);</span><br><span class="line">                        buf.writeBytes(<span class="string">&quot;$4&quot;</span>.getBytes());</span><br><span class="line">                        buf.writeBytes(LINE);</span><br><span class="line">                        buf.writeBytes(<span class="string">&quot;name&quot;</span>.getBytes());</span><br><span class="line">                        buf.writeBytes(LINE);</span><br><span class="line">                        buf.writeBytes(<span class="string">&quot;$8&quot;</span>.getBytes());</span><br><span class="line">                        buf.writeBytes(LINE);</span><br><span class="line">                        buf.writeBytes(<span class="string">&quot;zhangsan&quot;</span>.getBytes());</span><br><span class="line">                        buf.writeBytes(LINE);</span><br><span class="line">                        ctx.writeAndFlush(buf);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">                        System.out.println(buf.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">ChannelFuture</span> <span class="variable">channelFuture</span> <span class="operator">=</span> bootstrap.connect(<span class="string">&quot;192.168.184.100&quot;</span>, <span class="number">6379</span>).sync();</span><br><span class="line">        channelFuture.channel().closeFuture().sync();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;client error&quot;</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        worker.shutdownGracefully();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-http-协议举例"><a href="#2-3-http-协议举例" class="headerlink" title="2.3 http 协议举例"></a>2.3 http 协议举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NioEventLoopGroup</span> <span class="variable">boss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line"><span class="type">NioEventLoopGroup</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">ServerBootstrap</span> <span class="variable">serverBootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">    serverBootstrap.channel(NioServerSocketChannel.class);</span><br><span class="line">    serverBootstrap.group(boss, worker);</span><br><span class="line">    serverBootstrap.childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.DEBUG));</span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">HttpServerCodec</span>());</span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;HttpRequest&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, HttpRequest msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    <span class="comment">// 获取请求</span></span><br><span class="line">                    log.debug(msg.uri());</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 返回响应</span></span><br><span class="line">                    <span class="type">DefaultFullHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span></span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">DefaultFullHttpResponse</span>(msg.protocolVersion(), HttpResponseStatus.OK);</span><br><span class="line"></span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="string">&quot;&lt;h1&gt;Hello, world!&lt;/h1&gt;&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line">                    response.headers().setInt(CONTENT_LENGTH, bytes.length);</span><br><span class="line">                    response.content().writeBytes(bytes);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 写回响应</span></span><br><span class="line">                    ctx.writeAndFlush(response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">/*ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span></span><br><span class="line"><span class="comment">                @Override</span></span><br><span class="line"><span class="comment">                public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span></span><br><span class="line"><span class="comment">                    log.debug(&quot;&#123;&#125;&quot;, msg.getClass());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    if (msg instanceof HttpRequest) &#123; // 请求行，请求头</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    &#125; else if (msg instanceof HttpContent) &#123; //请求体</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;);*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">ChannelFuture</span> <span class="variable">channelFuture</span> <span class="operator">=</span> serverBootstrap.bind(<span class="number">8080</span>).sync();</span><br><span class="line">    channelFuture.channel().closeFuture().sync();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;server error&quot;</span>, e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    boss.shutdownGracefully();</span><br><span class="line">    worker.shutdownGracefully();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-自定义协议要素"><a href="#2-4-自定义协议要素" class="headerlink" title="2.4 自定义协议要素"></a>2.4 自定义协议要素</h3><ul><li>魔数，用来在第一时间判定是否是无效数据包</li><li>版本号，可以支持协议的升级</li><li>序列化算法，消息正文到底采用哪种序列化反序列化方式，可以由此扩展，例如：json、protobuf、hessian、jdk</li><li>指令类型，是登录、注册、单聊、群聊… 跟业务相关</li><li>请求序号，为了双工通信，提供异步能力</li><li>正文长度</li><li>消息正文</li></ul><h4 id="编解码器"><a href="#编解码器" class="headerlink" title="编解码器"></a>编解码器</h4><p>根据上面的要素，设计一个登录请求消息和登录响应消息，并使用 Netty 完成收发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageCodec</span> <span class="keyword">extends</span> <span class="title class_">ByteToMessageCodec</span>&lt;Message&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">encode</span><span class="params">(ChannelHandlerContext ctx, Message msg, ByteBuf out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 4 字节的魔数</span></span><br><span class="line">        out.writeBytes(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;);</span><br><span class="line">        <span class="comment">// 2. 1 字节的版本,</span></span><br><span class="line">        out.writeByte(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 3. 1 字节的序列化方式 jdk 0 , json 1</span></span><br><span class="line">        out.writeByte(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 4. 1 字节的指令类型</span></span><br><span class="line">        out.writeByte(msg.getMessageType());</span><br><span class="line">        <span class="comment">// 5. 4 个字节</span></span><br><span class="line">        out.writeInt(msg.getSequenceId());</span><br><span class="line">        <span class="comment">// 无意义，对齐填充</span></span><br><span class="line">        out.writeByte(<span class="number">0xff</span>);</span><br><span class="line">        <span class="comment">// 6. 获取内容的字节数组</span></span><br><span class="line">        <span class="comment">// 把对象转成字节数组</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(msg);<span class="comment">// 其实会写到ByteArrayOutputStream中</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = bos.toByteArray();</span><br><span class="line">        <span class="comment">// 7. 长度</span></span><br><span class="line">        out.writeInt(bytes.length);</span><br><span class="line">        <span class="comment">// 8. 写入内容</span></span><br><span class="line">        out.writeBytes(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">magicNum</span> <span class="operator">=</span> in.readInt();</span><br><span class="line">        <span class="type">byte</span> <span class="variable">version</span> <span class="operator">=</span> in.readByte();</span><br><span class="line">        <span class="type">byte</span> <span class="variable">serializerType</span> <span class="operator">=</span> in.readByte();</span><br><span class="line">        <span class="type">byte</span> <span class="variable">messageType</span> <span class="operator">=</span> in.readByte();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sequenceId</span> <span class="operator">=</span> in.readInt();</span><br><span class="line">        in.readByte();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> in.readInt();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[length];</span><br><span class="line">        in.readBytes(bytes, <span class="number">0</span>, length);</span><br><span class="line">        <span class="comment">// 字节数组转对象</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes));</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> (Message) ois.readObject();</span><br><span class="line">        log.debug(<span class="string">&quot;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;</span>, magicNum, version, serializerType, messageType, sequenceId, length);</span><br><span class="line">        <span class="comment">// netty解析出来的数据要加入到out，为了给下一个handler使用</span></span><br><span class="line">        log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, message);</span><br><span class="line">        out.add(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">EmbeddedChannel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmbeddedChannel</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(),<span class="comment">//日志</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">LengthFieldBasedFrameDecoder</span>(</span><br><span class="line">        <span class="number">1024</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>),<span class="comment">//帧解码器，解决粘包半包</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MessageCodec</span>()</span><br><span class="line">);</span><br><span class="line"><span class="comment">// encode</span></span><br><span class="line"><span class="type">LoginRequestMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginRequestMessage</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="comment">//        channel.writeOutbound(message);</span></span><br><span class="line"><span class="comment">// decode</span></span><br><span class="line"><span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBufAllocator.DEFAULT.buffer();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MessageCodec</span>().encode(<span class="literal">null</span>, message, buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟半包现象，不加帧解码器会报错</span></span><br><span class="line"><span class="type">ByteBuf</span> <span class="variable">s1</span> <span class="operator">=</span> buf.slice(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"><span class="type">ByteBuf</span> <span class="variable">s2</span> <span class="operator">=</span> buf.slice(<span class="number">100</span>, buf.readableBytes() - <span class="number">100</span>);</span><br><span class="line">s1.retain(); <span class="comment">// 引用计数 2</span></span><br><span class="line">channel.writeInbound(s1); <span class="comment">// release 1</span></span><br><span class="line">channel.writeInbound(s2); <span class="comment">//channel.writeInbound 会 调用release方法，让引用技术减为0，因此之前要用retation</span></span><br></pre></td></tr></table></figure><p>解读</p><p><img src="/../images/Netty01-nio/0013.png"></p><h4 id="💡-什么时候可以加-Sharable"><a href="#💡-什么时候可以加-Sharable" class="headerlink" title="💡 什么时候可以加 @Sharable"></a>💡 什么时候可以加 @Sharable</h4><ul><li>当 handler 不保存状态时，就可以安全地在多线程下被共享</li><li>但要注意对于编解码器类，不能继承 ByteToMessageCodec 或 CombinedChannelDuplexHandler 父类，他们的构造方法对 @Sharable 有限制</li><li>如果能确保编解码器不会保存状态，可以继承 MessageToMessageCodec 父类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 必须和 LengthFieldBasedFrameDecoder 一起使用，确保接到的 ByteBuf 消息是完整的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageCodecSharable</span> <span class="keyword">extends</span> <span class="title class_">MessageToMessageCodec</span>&lt;ByteBuf, Message&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">encode</span><span class="params">(ChannelHandlerContext ctx, Message msg, List&lt;Object&gt; outList)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">out</span> <span class="operator">=</span> ctx.alloc().buffer();</span><br><span class="line">        <span class="comment">// 1. 4 字节的魔数</span></span><br><span class="line">        out.writeBytes(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;);</span><br><span class="line">        <span class="comment">// 2. 1 字节的版本,</span></span><br><span class="line">        out.writeByte(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 3. 1 字节的序列化方式 jdk 0 , json 1</span></span><br><span class="line">        out.writeByte(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 4. 1 字节的指令类型</span></span><br><span class="line">        out.writeByte(msg.getMessageType());</span><br><span class="line">        <span class="comment">// 5. 4 个字节</span></span><br><span class="line">        out.writeInt(msg.getSequenceId());</span><br><span class="line">        <span class="comment">// 无意义，对齐填充</span></span><br><span class="line">        out.writeByte(<span class="number">0xff</span>);</span><br><span class="line">        <span class="comment">// 6. 获取内容的字节数组</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(msg);</span><br><span class="line">        <span class="type">byte</span>[] bytes = bos.toByteArray();</span><br><span class="line">        <span class="comment">// 7. 长度</span></span><br><span class="line">        out.writeInt(bytes.length);</span><br><span class="line">        <span class="comment">// 8. 写入内容</span></span><br><span class="line">        out.writeBytes(bytes);</span><br><span class="line">        outList.add(out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">magicNum</span> <span class="operator">=</span> in.readInt();</span><br><span class="line">        <span class="type">byte</span> <span class="variable">version</span> <span class="operator">=</span> in.readByte();</span><br><span class="line">        <span class="type">byte</span> <span class="variable">serializerType</span> <span class="operator">=</span> in.readByte();</span><br><span class="line">        <span class="type">byte</span> <span class="variable">messageType</span> <span class="operator">=</span> in.readByte();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sequenceId</span> <span class="operator">=</span> in.readInt();</span><br><span class="line">        in.readByte();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> in.readInt();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[length];</span><br><span class="line">        in.readBytes(bytes, <span class="number">0</span>, length);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes));</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> (Message) ois.readObject();</span><br><span class="line">        log.debug(<span class="string">&quot;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;</span>, magicNum, version, serializerType, messageType, sequenceId, length);</span><br><span class="line">        log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, message);</span><br><span class="line">        out.add(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-聊天室案例"><a href="#3-聊天室案例" class="headerlink" title="3. 聊天室案例"></a>3. 聊天室案例</h2><h3 id="3-1-聊天室业务介绍"><a href="#3-1-聊天室业务介绍" class="headerlink" title="3.1 聊天室业务介绍"></a>3.1 聊天室业务介绍</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户管理接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 登录成功返回 true, 否则返回 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(String username, String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 会话管理接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Session</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定会话</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel 哪个 channel 要绑定会话</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 会话绑定用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bind</span><span class="params">(Channel channel, String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解绑会话</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel 哪个 channel 要解绑会话</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> channel对应的用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">unbind</span><span class="params">(Channel channel)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel 哪个 channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 属性名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 属性值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">getAttribute</span><span class="params">(Channel channel, String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel 哪个 channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 属性名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 属性值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(Channel channel, String name, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名获取 channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> channel</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Channel <span class="title function_">getChannel</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天组会话管理接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GroupSession</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个聊天组, 如果不存在才能创建成功, 否则返回 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 组名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> members 成员</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功时返回组对象, 失败返回 null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Group <span class="title function_">createGroup</span><span class="params">(String name, Set&lt;String&gt; members)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加入聊天组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 组名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member 成员名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果组不存在返回 null, 否则返回组对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Group <span class="title function_">joinMember</span><span class="params">(String name, String member)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除组成员</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 组名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member 成员名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果组不存在返回 null, 否则返回组对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Group <span class="title function_">removeMember</span><span class="params">(String name, String member)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除聊天组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 组名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果组不存在返回 null, 否则返回组对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Group <span class="title function_">removeGroup</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取组成员</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 组名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成员集合, 没有成员会返回 empty set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Set&lt;String&gt; <span class="title function_">getMembers</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取组成员的 channel 集合, 只有在线的 channel 才会返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 组名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成员 channel 集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Channel&gt; <span class="title function_">getMembersChannel</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-聊天室业务-登录"><a href="#3-2-聊天室业务-登录" class="headerlink" title="3.2 聊天室业务-登录"></a>3.2 聊天室业务-登录</h3><p>什么时候进行登录？</p><p>连接建立好的时候进行登录，什么时候连接建立好呢？</p><ol><li>sync()阻塞，之后链接就建立完成。</li><li>在ChannelInitializer添加自己的handler，handler都有channelActive事件(channel连接建立好，会触发active事件，在active事件发送登陆消息)。</li></ol><p>选用第二种方式，针对不同的消息创建只针对该类型消息处理的hanlder，这些类都继承SimpleChannelInboundHandler来处理不同的业务逻辑，所有没用加入特定的数据因此可以共享加入@Sharable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">boss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="type">LoggingHandler</span> <span class="variable">LOGGING_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.DEBUG);</span><br><span class="line">        <span class="type">MessageCodecSharable</span> <span class="variable">MESSAGE_CODEC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageCodecSharable</span>();</span><br><span class="line">        <span class="type">LoginRequestMessageHandler</span> <span class="variable">LOGIN_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginRequestMessageHandler</span>();</span><br><span class="line">        <span class="type">ChatRequestMessageHandler</span> <span class="variable">CHAT_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChatRequestMessageHandler</span>();</span><br><span class="line">        <span class="type">GroupCreateRequestMessageHandler</span> <span class="variable">GROUP_CREATE_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroupCreateRequestMessageHandler</span>();</span><br><span class="line">        <span class="type">GroupJoinRequestMessageHandler</span> <span class="variable">GROUP_JOIN_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroupJoinRequestMessageHandler</span>();</span><br><span class="line">        <span class="type">GroupMembersRequestMessageHandler</span> <span class="variable">GROUP_MEMBER_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroupMembersRequestMessageHandler</span>();</span><br><span class="line">        <span class="type">GroupQuitRequestMessageHandler</span> <span class="variable">GROUP_QUIT_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroupQuitRequestMessageHandler</span>();</span><br><span class="line">        <span class="type">GroupChatRequestMessageHandler</span> <span class="variable">GROUP_CHAT_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroupChatRequestMessageHandler</span>();</span><br><span class="line">        <span class="type">QuitHandler</span> <span class="variable">QUIT_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QuitHandler</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServerBootstrap</span> <span class="variable">serverBootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">            serverBootstrap.channel(NioServerSocketChannel.class);</span><br><span class="line">            serverBootstrap.group(boss, worker);</span><br><span class="line">            serverBootstrap.childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ProcotolFrameDecoder</span>());</span><br><span class="line">                    ch.pipeline().addLast(LOGGING_HANDLER);</span><br><span class="line">                    ch.pipeline().addLast(MESSAGE_CODEC);</span><br><span class="line">                    <span class="comment">// 用来判断是不是 读空闲时间过长， 或者 写空闲时间过长</span></span><br><span class="line">                    <span class="comment">// 5秒内，如果没读到channel的数据，会触发一个事件IdleState.READER_IDLE</span></span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">IdleStateHandler</span>(<span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">                    <span class="comment">// ChannelDuplexHandler可以同时作为 入站处理器 和 出站处理器</span></span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelDuplexHandler</span>() &#123;</span><br><span class="line">                        <span class="comment">// 用来触发特殊事件</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                            <span class="type">IdleStateEvent</span> <span class="variable">event</span> <span class="operator">=</span> (IdleStateEvent) evt;</span><br><span class="line">                            <span class="comment">// 触发了读空闲时间</span></span><br><span class="line">                            <span class="keyword">if</span> (event.state() == IdleState.READER_IDLE) &#123;</span><br><span class="line">                                log.debug(<span class="string">&quot;已经 5s 没有读到数据了&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="built_in">super</span>.userEventTriggered(ctx, evt);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="comment">// 用SimpleChannelInboundHandler，因为可以选择自己接受信息的类型，来对该类型的信息进行处理</span></span><br><span class="line">                    ch.pipeline().addLast(LOGIN_HANDLER);</span><br><span class="line">                    ch.pipeline().addLast(CHAT_HANDLER);</span><br><span class="line">                    ch.pipeline().addLast(GROUP_CREATE_HANDLER);</span><br><span class="line">                    ch.pipeline().addLast(GROUP_JOIN_HANDLER);</span><br><span class="line">                    ch.pipeline().addLast(GROUP_MEMBER_HANDLER);</span><br><span class="line">                    ch.pipeline().addLast(GROUP_QUIT_HANDLER);</span><br><span class="line">                    ch.pipeline().addLast(GROUP_CHAT_HANDLER);</span><br><span class="line">                    ch.pipeline().addLast(QUIT_HANDLER);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> serverBootstrap.bind(<span class="number">8080</span>).sync().channel();</span><br><span class="line">            channel.closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;server error&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            boss.shutdownGracefully();</span><br><span class="line">            worker.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端：</p><p>如何让system in 线程直到已经登陆了？</p><p>进行线程间通信，用到了CountDownLatch和AtomicBoolean。CountDownLatch的await方法是等到计数器为0，继续执行该线程。AtomicBoolean则可以在线程间进行共享。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="type">LoggingHandler</span> <span class="variable">LOGGING_HANDLER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.DEBUG);</span><br><span class="line">        <span class="type">MessageCodecSharable</span> <span class="variable">MESSAGE_CODEC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageCodecSharable</span>();</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">WAIT_FOR_LOGIN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">AtomicBoolean</span> <span class="variable">LOGIN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">            bootstrap.channel(NioSocketChannel.class);</span><br><span class="line">            bootstrap.group(group);</span><br><span class="line">            bootstrap.handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ProcotolFrameDecoder</span>());</span><br><span class="line"><span class="comment">//                    ch.pipeline().addLast(LOGGING_HANDLER);</span></span><br><span class="line">                    ch.pipeline().addLast(MESSAGE_CODEC);</span><br><span class="line">                    ch.pipeline().addLast(<span class="string">&quot;client handler&quot;</span>, <span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>() &#123;</span><br><span class="line">                        <span class="comment">// 接收响应消息</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                            log.debug(<span class="string">&quot;msg: &#123;&#125;&quot;</span>, msg);</span><br><span class="line">                            <span class="keyword">if</span> ((msg <span class="keyword">instanceof</span> LoginResponseMessage)) &#123;</span><br><span class="line">                                <span class="type">LoginResponseMessage</span> <span class="variable">response</span> <span class="operator">=</span> (LoginResponseMessage) msg;</span><br><span class="line">                                <span class="keyword">if</span> (response.isSuccess()) &#123;</span><br><span class="line">                                    <span class="comment">// 如果登录成功</span></span><br><span class="line">                                    LOGIN.set(<span class="literal">true</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="comment">// 唤醒 system in 线程</span></span><br><span class="line">                                WAIT_FOR_LOGIN.countDown();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 在连接建立后触发 active 事件</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                            <span class="comment">// 负责接收用户在控制台的输入，负责向服务器发送各种消息</span></span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                                <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">                                System.out.println(<span class="string">&quot;请输入用户名:&quot;</span>);</span><br><span class="line">                                <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                                System.out.println(<span class="string">&quot;请输入密码:&quot;</span>);</span><br><span class="line">                                <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                                <span class="comment">// 构造消息对象</span></span><br><span class="line">                                <span class="type">LoginRequestMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginRequestMessage</span>(username, password);</span><br><span class="line">                                <span class="comment">// 发送消息</span></span><br><span class="line">                                ctx.writeAndFlush(message);</span><br><span class="line">                                System.out.println(<span class="string">&quot;等待后续操作...&quot;</span>);</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    WAIT_FOR_LOGIN.await();</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                    e.printStackTrace();</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="comment">// 如果登录失败</span></span><br><span class="line">                                <span class="keyword">if</span> (!LOGIN.get()) &#123;</span><br><span class="line">                                    ctx.channel().close();</span><br><span class="line">                                    <span class="keyword">return</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                                    System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">                                    System.out.println(<span class="string">&quot;send [username] [content]&quot;</span>);</span><br><span class="line">                                    System.out.println(<span class="string">&quot;gsend [group name] [content]&quot;</span>);</span><br><span class="line">                                    System.out.println(<span class="string">&quot;gcreate [group name] [m1,m2,m3...]&quot;</span>);</span><br><span class="line">                                    System.out.println(<span class="string">&quot;gmembers [group name]&quot;</span>);</span><br><span class="line">                                    System.out.println(<span class="string">&quot;gjoin [group name]&quot;</span>);</span><br><span class="line">                                    System.out.println(<span class="string">&quot;gquit [group name]&quot;</span>);</span><br><span class="line">                                    System.out.println(<span class="string">&quot;quit&quot;</span>);</span><br><span class="line">                                    System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">                                    <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                                    String[] s = command.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                                    <span class="keyword">switch</span> (s[<span class="number">0</span>])&#123;</span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">&quot;send&quot;</span>:</span><br><span class="line">                                            ctx.writeAndFlush(<span class="keyword">new</span> <span class="title class_">ChatRequestMessage</span>(username, s[<span class="number">1</span>], s[<span class="number">2</span>]));</span><br><span class="line">                                            <span class="keyword">break</span>;</span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">&quot;gsend&quot;</span>:</span><br><span class="line">                                            ctx.writeAndFlush(<span class="keyword">new</span> <span class="title class_">GroupChatRequestMessage</span>(username, s[<span class="number">1</span>], s[<span class="number">2</span>]));</span><br><span class="line">                                            <span class="keyword">break</span>;</span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">&quot;gcreate&quot;</span>:</span><br><span class="line">                                            Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(s[<span class="number">2</span>].split(<span class="string">&quot;,&quot;</span>)));</span><br><span class="line">                                            set.add(username); <span class="comment">// 加入自己</span></span><br><span class="line">                                            ctx.writeAndFlush(<span class="keyword">new</span> <span class="title class_">GroupCreateRequestMessage</span>(s[<span class="number">1</span>], set));</span><br><span class="line">                                            <span class="keyword">break</span>;</span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">&quot;gmembers&quot;</span>:</span><br><span class="line">                                            ctx.writeAndFlush(<span class="keyword">new</span> <span class="title class_">GroupMembersRequestMessage</span>(s[<span class="number">1</span>]));</span><br><span class="line">                                            <span class="keyword">break</span>;</span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">&quot;gjoin&quot;</span>:</span><br><span class="line">                                            ctx.writeAndFlush(<span class="keyword">new</span> <span class="title class_">GroupJoinRequestMessage</span>(username, s[<span class="number">1</span>]));</span><br><span class="line">                                            <span class="keyword">break</span>;</span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">&quot;gquit&quot;</span>:</span><br><span class="line">                                            ctx.writeAndFlush(<span class="keyword">new</span> <span class="title class_">GroupQuitRequestMessage</span>(username, s[<span class="number">1</span>]));</span><br><span class="line">                                            <span class="keyword">break</span>;</span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">&quot;quit&quot;</span>:</span><br><span class="line">                                            ctx.channel().close();</span><br><span class="line">                                            <span class="keyword">return</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;, <span class="string">&quot;system in&quot;</span>).start();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> bootstrap.connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>).sync().channel();</span><br><span class="line">            channel.closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;client error&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-聊天室业务-单聊"><a href="#3-3-聊天室业务-单聊" class="headerlink" title="3.3 聊天室业务-单聊"></a>3.3 聊天室业务-单聊</h3><p>服务器端将 handler 独立出来</p><p>登录消息处理器LoginRequestMessageHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录消息处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginRequestMessageHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;LoginRequestMessage&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, LoginRequestMessage msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> msg.getUsername();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> msg.getPassword();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">login</span> <span class="operator">=</span> UserServiceFactory.getUserService().login(username, password);</span><br><span class="line">        LoginResponseMessage message;</span><br><span class="line">        <span class="keyword">if</span> (login) &#123;</span><br><span class="line">            SessionFactory.getSession().bind(ctx.channel(), username);</span><br><span class="line">            message = <span class="keyword">new</span> <span class="title class_">LoginResponseMessage</span>(<span class="literal">true</span>, <span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            message = <span class="keyword">new</span> <span class="title class_">LoginResponseMessage</span>(<span class="literal">false</span>, <span class="string">&quot;用户名或密码不正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.writeAndFlush(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>聊天请求消息处理器ChatRequestMessageHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天请求消息处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatRequestMessageHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;ChatRequestMessage&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, ChatRequestMessage msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">to</span> <span class="operator">=</span> msg.getTo();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> SessionFactory.getSession().getChannel(to);</span><br><span class="line">        <span class="keyword">if</span> (channel != <span class="literal">null</span>) &#123; <span class="comment">// 对方在线，连接没断开,给目的用户发送信息</span></span><br><span class="line">            channel.writeAndFlush(<span class="keyword">new</span> <span class="title class_">ChatResponseMessage</span>(msg.getFrom(), msg.getContent()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 对方不在线，连接断开，给发送方发送消息提示</span></span><br><span class="line">            ctx.writeAndFlush(<span class="keyword">new</span> <span class="title class_">ChatResponseMessage</span>(<span class="literal">false</span>, <span class="string">&quot;对方用户不在线&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-聊天室业务-群聊"><a href="#3-4-聊天室业务-群聊" class="headerlink" title="3.4 聊天室业务-群聊"></a>3.4 聊天室业务-群聊</h3><p>创建组请求消息处理器GroupCreateRequestMessageHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建组请求消息处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GroupCreateRequestMessageHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;GroupCreateRequestMessage&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, GroupCreateRequestMessage msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">groupName</span> <span class="operator">=</span> msg.getGroupName();</span><br><span class="line">        Set&lt;String&gt; members = msg.getMembers();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 群管理器</span></span><br><span class="line">        <span class="type">GroupSession</span> <span class="variable">groupSession</span> <span class="operator">=</span> GroupSessionFactory.getGroupSession();</span><br><span class="line">        <span class="type">Group</span> <span class="variable">group</span> <span class="operator">=</span> groupSession.createGroup(groupName, members);</span><br><span class="line">        <span class="keyword">if</span> (group == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 发送成功消息</span></span><br><span class="line">            ctx.writeAndFlush(<span class="keyword">new</span> <span class="title class_">GroupCreateResponseMessage</span>(<span class="literal">true</span>, groupName + <span class="string">&quot;创建成功&quot;</span>));</span><br><span class="line">            <span class="comment">// 发送拉群消息</span></span><br><span class="line">            List&lt;Channel&gt; channels = groupSession.getMembersChannel(groupName);</span><br><span class="line">            <span class="keyword">for</span> (Channel channel : channels) &#123;</span><br><span class="line">                channel.writeAndFlush(<span class="keyword">new</span> <span class="title class_">GroupCreateResponseMessage</span>(<span class="literal">true</span>, <span class="string">&quot;你已被拉入群聊：&quot;</span> + groupName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ctx.writeAndFlush(<span class="keyword">new</span> <span class="title class_">GroupCreateResponseMessage</span>(<span class="literal">false</span>, groupName + <span class="string">&quot;已经存在&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组聊天消息处理器GroupChatRequestMessageHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组聊天消息处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GroupChatRequestMessageHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;GroupChatRequestMessage&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, GroupChatRequestMessage msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        List&lt;Channel&gt; channels = GroupSessionFactory.getGroupSession().getMembersChannel(msg.getGroupName());</span><br><span class="line">        <span class="keyword">for</span> (Channel channel : channels) &#123;</span><br><span class="line">            channel.writeAndFlush(<span class="keyword">new</span> <span class="title class_">GroupChatResponseMessage</span>(msg.getFrom(), msg.getContent()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入群聊处理器GroupJoinRequestMessageHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加入群聊处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GroupJoinRequestMessageHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;GroupJoinRequestMessage&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, GroupJoinRequestMessage msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Group</span> <span class="variable">group</span> <span class="operator">=</span> GroupSessionFactory.getGroupSession().joinMember(msg.getGroupName(), msg.getUsername());</span><br><span class="line">        <span class="keyword">if</span> (group != <span class="literal">null</span>) &#123;</span><br><span class="line">            ctx.writeAndFlush(<span class="keyword">new</span> <span class="title class_">GroupJoinResponseMessage</span>(<span class="literal">true</span>, msg.getGroupName()) + <span class="string">&quot;群聊加入成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ctx.writeAndFlush(<span class="keyword">new</span> <span class="title class_">GroupJoinResponseMessage</span>(<span class="literal">false</span>, msg.getGroupName() + <span class="string">&quot;群聊不存在！&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>退出群聊处理器GroupQuitRequestMessageHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 退出群聊处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GroupQuitRequestMessageHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;GroupQuitRequestMessage&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, GroupQuitRequestMessage msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Group</span> <span class="variable">group</span> <span class="operator">=</span> GroupSessionFactory.getGroupSession().removeMember(msg.getGroupName(), msg.getUsername());</span><br><span class="line">        <span class="keyword">if</span> (group != <span class="literal">null</span>) &#123;</span><br><span class="line">            ctx.writeAndFlush(<span class="keyword">new</span> <span class="title class_">GroupQuitResponseMessage</span>(<span class="literal">true</span>, <span class="string">&quot;已退出群&quot;</span> + msg.getGroupName()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ctx.writeAndFlush(<span class="keyword">new</span> <span class="title class_">GroupQuitResponseMessage</span>(<span class="literal">true</span>, msg.getGroupName() + <span class="string">&quot;群不存在&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看群聊成员处理器GroupMembersRequestMessageHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查看群聊成员处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GroupMembersRequestMessageHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;GroupMembersRequestMessage&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, GroupMembersRequestMessage msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Set&lt;String&gt; members = GroupSessionFactory.getGroupSession().getMembers(msg.getGroupName());</span><br><span class="line">        ctx.writeAndFlush(<span class="keyword">new</span> <span class="title class_">GroupMembersResponseMessage</span>(members));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-聊天室业务-退出"><a href="#3-5-聊天室业务-退出" class="headerlink" title="3.5 聊天室业务-退出"></a>3.5 聊天室业务-退出</h3><p>断开连接时处理器QuitHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 断开连接时处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuitHandler</span> <span class="keyword">extends</span> <span class="title class_">ChannelInboundHandlerAdapter</span> &#123;</span><br><span class="line">    <span class="comment">// 当连接断开时，触发inactive事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> SessionFactory.getSession().unbind(ctx.channel());</span><br><span class="line">        log.debug(<span class="string">&quot;&#123;&#125; 已经断开了&quot;</span>, username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异常时断开连接，触发exceptionCaught</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> SessionFactory.getSession().unbind(ctx.channel());</span><br><span class="line">        log.debug(<span class="string">&quot;&#123;&#125; 已经断开了,异常是 &#123;&#125;&quot;</span>, username, cause.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-聊天室业务-空闲检测"><a href="#3-6-聊天室业务-空闲检测" class="headerlink" title="3.6 聊天室业务-空闲检测"></a>3.6 聊天室业务-空闲检测</h3><h4 id="连接假死"><a href="#连接假死" class="headerlink" title="连接假死"></a>连接假死</h4><p>原因</p><ul><li>网络设备出现故障，例如网卡，机房等，底层的 TCP 连接已经断开了，但应用程序没有感知到，仍然占用着资源。</li><li>公网网络不稳定，出现丢包。如果连续出现丢包，这时现象就是客户端数据发不出去，服务端也一直收不到数据，就这么一直耗着</li><li>应用程序线程阻塞，无法进行数据读写</li></ul><p>问题</p><ul><li>假死的连接占用的资源不能自动释放</li><li>向假死的连接发送数据，得到的反馈是发送超时</li></ul><p>服务器端解决</p><ul><li>怎么判断客户端连接是否假死呢？如果能收到客户端数据，说明没有假死。因此策略就可以定为，每隔一段时间就检查这段时间内是否接收到客户端数据，没有就可以判定为连接假死</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用来判断是不是 读空闲时间过长，或 写空闲时间过长</span></span><br><span class="line"><span class="comment">// 5s 内如果没有收到 channel 的数据，会触发一个 IdleState#READER_IDLE 事件</span></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">IdleStateHandler</span>(<span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"><span class="comment">// ChannelDuplexHandler 可以同时作为入站和出站处理器</span></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelDuplexHandler</span>() &#123;</span><br><span class="line">    <span class="comment">// 用来触发特殊事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">IdleStateEvent</span> <span class="variable">event</span> <span class="operator">=</span> (IdleStateEvent) evt;</span><br><span class="line">        <span class="comment">// 触发了读空闲事件</span></span><br><span class="line">        <span class="keyword">if</span> (event.state() == IdleState.READER_IDLE) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;已经 5s 没有读到数据了&quot;</span>);</span><br><span class="line">            ctx.channel().close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>客户端定时心跳</p><ul><li>客户端可以定时向服务器端发送数据，只要这个时间间隔小于服务器定义的空闲检测的时间间隔，那么就能防止前面提到的误判，客户端可以定义如下心跳处理器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用来判断是不是 读空闲时间过长，或 写空闲时间过长</span></span><br><span class="line"><span class="comment">// 3s 内如果没有向服务器写数据，会触发一个 IdleState#WRITER_IDLE 事件</span></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">IdleStateHandler</span>(<span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>));</span><br><span class="line"><span class="comment">// ChannelDuplexHandler 可以同时作为入站和出站处理器</span></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelDuplexHandler</span>() &#123;</span><br><span class="line">    <span class="comment">// 用来触发特殊事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">IdleStateEvent</span> <span class="variable">event</span> <span class="operator">=</span> (IdleStateEvent) evt;</span><br><span class="line">        <span class="comment">// 触发了写空闲事件</span></span><br><span class="line">        <span class="keyword">if</span> (event.state() == IdleState.WRITER_IDLE) &#123;</span><br><span class="line">            <span class="comment">//                                log.debug(&quot;3s 没有写数据了，发送一个心跳包&quot;);</span></span><br><span class="line">            ctx.writeAndFlush(<span class="keyword">new</span> <span class="title class_">PingMessage</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>真正死亡的服务器，不能发送心跳包，因此服务器会在5s后断开连接。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验</title>
      <link href="/2022/11/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/"/>
      <url>/2022/11/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构实验"><a href="#数据结构实验" class="headerlink" title="数据结构实验"></a>数据结构实验</h1><h2 id="线性表的应用"><a href="#线性表的应用" class="headerlink" title="线性表的应用"></a>线性表的应用</h2><h3 id="一．实验目的"><a href="#一．实验目的" class="headerlink" title="一．实验目的"></a>一．实验目的</h3><ol><li><p>掌握线性表的单链表实现与静态链表实现。 </p></li><li><p>掌握线性表的应用：运动会信息管理系统。</p></li></ol><h3 id="二-实验要求、内容"><a href="#二-实验要求、内容" class="headerlink" title="二. 实验要求、内容"></a>二. 实验要求、内容</h3><ol><li>基于单链表实现线性表 List1 的典型操作（判空、判满、求表长、插入、删除、查找、修改、遍历、置空、普</li></ol><p>通构造、拷贝构造、赋值运算符重载、析构），编写简单程序使用该线性表，测试和调试程序。 </p><ol start="2"><li>基于静态链表实现线性表 List2 的典型操作（判空、判满、求表长、插入、删除、查找、修改、遍历、置空、</li></ol><p>普通构造），编写简单程序使用该线性表，测试和调试程序。 </p><ol start="3"><li><p>基于线性表 List1、线性表 List2 实现线性表的应用：运动会信息管理，测试和调试程序。 </p></li><li><p>按要求撰写实验报告、录制程序运行以及讲解程序的视频。报告中要包含算法性能的讨论以及根据实现效率</p></li></ol><p>在问题的多种解决方案中进行比较、选择的说明。</p><h3 id="三．实验设备"><a href="#三．实验设备" class="headerlink" title="三．实验设备"></a>三．实验设备</h3><p>计算机、Windows 操作系统、C++语言集成开发环境。</p><h3 id="四．实验原理（或程序框图）及步骤"><a href="#四．实验原理（或程序框图）及步骤" class="headerlink" title="四．实验原理（或程序框图）及步骤"></a>四．实验原理（或程序框图）及步骤</h3><p><em><strong>*实验1*</strong></em></p><p>1.问题分解</p><p> <img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps2.jpg" alt="img"></p><p>链表中每个节点包含 1 个数据域(entry)和 1 个指针域(next)，指向下一个节点。采用模板完成节点的定义。</p><ol start="2"><li>对问题一基于单链表实现线性表List1的典型操作。</li></ol><p>(1) .构造方法</p><p>对线性表进行初始化，因为是单链表，就让count计数器为0，让next指针为空。</p><p>时间复杂度：O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; List1&lt;List_entry&gt;::<span class="built_in">List1</span>() &#123;</span><br><span class="line">  <span class="comment">//对线性表初始化</span></span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">  head = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) .析构方法</p><p>对线性表进行清空，析构借助他的clear（）方法，如果线性表不为空，则把线性表清空。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; List1&lt;List_entry&gt;::~<span class="built_in">List1</span>() &#123;</span><br><span class="line">  <span class="comment">//借助clear()方法清空</span></span><br><span class="line">  <span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) .clear()置空方法</p><p>相当于单链表的清空表，从表头遍历链表，途中对每一个节点进行置空，并通过delete来删除节点，最后对count计数器和head头指针进行初始化。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; <span class="type">void</span> List1&lt;List_entry&gt;::<span class="built_in">clear</span>() &#123;</span><br><span class="line">  Node&lt;List_entry&gt;* p, * q;</span><br><span class="line">  <span class="comment">//p 当前节点   q next节点</span></span><br><span class="line">  <span class="keyword">for</span> (p = head; p; p = q) &#123;</span><br><span class="line">    q = p-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">  &#125;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">  head = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4) .size()求表长</p><p>通过返回count计数器。时间复杂度：O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; <span class="type">int</span> List1&lt;List_entry&gt;::<span class="built_in">size</span>()<span class="type">const</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(5) .full()判满</p><p>因为是单链表实现所以只要一直有内存空间就不可能存在满的情况，直接返回false。</p><p>时间复杂度：O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; <span class="type">bool</span> List1&lt;List_entry&gt;::<span class="built_in">full</span>() <span class="type">const</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(6) .empty()判空</p><p>如果头节点为空，则说明线性表为空，如果头节点不为空，则说明线性表不为空。</p><p>时间复杂度：O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; <span class="type">bool</span> List1&lt;List_entry&gt;::<span class="built_in">empty</span>()<span class="type">const</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (head != <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(7) .set_position()找位置</p><p>先判断找的位置的下标是否符合规范，当符合规范时，把链表从表头开始，遍历position次，来到要找的节点位置，返回当前位置。时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; Node&lt;List_entry&gt;* List1&lt;List_entry&gt;::<span class="built_in">set_position</span>(<span class="type">int</span> position) <span class="type">const</span> &#123;</span><br><span class="line">  Node&lt;List_entry&gt;* q = head;</span><br><span class="line">  <span class="comment">//遍历position次就来到了position的节点位置</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; position; i++) q = q-&gt;next;</span><br><span class="line">  <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(8) .insert()插入方法</p><p>先看插入的位置是否符合规范，如果符合规范，通过set_position()方法找到前一个节点，new一个新的节点，让前一个节点的next指针域指向新节点，而让新节点的next指针域指向前一个结点老的next域（也就是下一个节点）。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; Error_code List1&lt;List_entry&gt;::<span class="built_in">insert</span>(<span class="type">int</span> position, <span class="type">const</span> List_entry&amp; x) &#123;</span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; count) <span class="comment">//position的位置不合法</span></span><br><span class="line">    <span class="keyword">return</span> range_errors;</span><br><span class="line">  Node&lt;List_entry&gt;* new_node, <span class="comment">//新节点</span></span><br><span class="line">          \* previous, <span class="comment">//前驱节点</span></span><br><span class="line">          \* following;<span class="comment">//后继节点</span></span><br><span class="line">  previous = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">if</span> (position &gt; <span class="number">0</span>) &#123; <span class="comment">//不是头插</span></span><br><span class="line">    previous = <span class="built_in">set_position</span>(position - <span class="number">1</span>);<span class="comment">//找到他的前驱节点</span></span><br><span class="line">    following = previous-&gt;next;<span class="comment">//后继节点</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> following = head;<span class="comment">//是头插的话，没有前驱，后继就是原来的头节点</span></span><br><span class="line">  new_node = <span class="keyword">new</span> <span class="built_in">Node</span>&lt;List_entry&gt;(x, following);<span class="comment">//借用了node的构造方法 //node-&gt;next = following</span></span><br><span class="line">  <span class="keyword">if</span> (new_node == <span class="literal">nullptr</span>)</span><br><span class="line">    <span class="keyword">return</span> overflow;</span><br><span class="line">  <span class="keyword">if</span> (position == <span class="number">0</span>)<span class="comment">//如果是头插的话，头节点就是插入的new_node</span></span><br><span class="line">    head = new_node;</span><br><span class="line">  <span class="keyword">else</span><span class="comment">//不是头插的话，就让前驱节点的next指向new_node</span></span><br><span class="line">    previous-&gt;next = new_node;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(9) .traverse()方法</p><p>遍历当前列表，通过传入的指针函数，对每一个节点都用传入的函数来操作。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; <span class="type">void</span> List1&lt;List_entry&gt;::<span class="built_in">traverse</span>(<span class="built_in">void</span> (*visit) (List_entry&amp;)) &#123;</span><br><span class="line">  Node&lt;List_entry&gt;* q;</span><br><span class="line">  <span class="keyword">for</span> (q = head; q; q = q-&gt;next) &#123; <span class="comment">//遍历每一个节点 对每一个节点 通过函数指针来进行操作</span></span><br><span class="line">    (*visit) (q-&gt;entry);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(10) .remove()删除节点</p><p>先判断表是否为空，再判断要删除的位置是否符合规范，如果都满足，判断是不是头节点(删除的位置是不是0)，如果不是就通过set_position()方法来找到要删除节点的前一个节点，让前一个节点的next指针域指向要删除节点的next指针域。如果要删除的是头节点，就直接让下一个节点作为头结点。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; Error_code List1&lt;List_entry&gt;::<span class="built_in">remove</span>(<span class="type">int</span> position, List_entry&amp; x) &#123;</span><br><span class="line">  Node&lt;List_entry&gt;* prior,<span class="comment">//前驱节点</span></span><br><span class="line">          \* current;<span class="comment">//当前节点</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">empty</span>()) <span class="keyword">return</span> fail;</span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= count) <span class="keyword">return</span> range_errors;<span class="comment">//position位置是否合法</span></span><br><span class="line">  <span class="keyword">if</span> (position &gt; <span class="number">0</span>) &#123; <span class="comment">//删的不是头节点</span></span><br><span class="line">    prior = <span class="built_in">set_position</span>(position - <span class="number">1</span>);<span class="comment">//前驱</span></span><br><span class="line">    current = prior-&gt;next;<span class="comment">//当前</span></span><br><span class="line">    prior-&gt;next = current-&gt;next;<span class="comment">//让前驱节点绕过当前节点直接指到后继节点</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123; <span class="comment">//删除头节点</span></span><br><span class="line">    current = head;</span><br><span class="line">    head = head-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  x = current-&gt;entry;<span class="comment">//x带出要删除节点的值</span></span><br><span class="line">  <span class="keyword">delete</span> current;<span class="comment">//通过delete删除节点</span></span><br><span class="line">  count--;</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(11) .retrieve()访问方法</p><p>先判断要访问的位置是否符合规范，如果符合规范就通过set_position方法来找到当前节点，通过x把当前节点的值带出去。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; Error_code List1&lt;List_entry&gt;::<span class="built_in">retrieve</span>(<span class="type">int</span> position,List_entry&amp; x) <span class="type">const</span> &#123;</span><br><span class="line">  Node&lt;List_entry&gt;* current;</span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= count) <span class="keyword">return</span> range_errors;<span class="comment">//position位置是否合法</span></span><br><span class="line">  current = <span class="built_in">set_position</span>(position);<span class="comment">//通过set_position拿到当前节点</span></span><br><span class="line">  x = current-&gt;entry;</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(12) .replace()替换方法</p><p>先判断要替换的位置是否符合规范，如果符合规范就通过set_position方法来找到当前节点，把x的值赋给当前节点的数据域完成替换。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; Error_code List1&lt;List_entry&gt;::<span class="built_in">replace</span>(<span class="type">int</span> position, <span class="type">const</span> List_entry&amp; x) &#123;</span><br><span class="line">  Node&lt;List_entry&gt;* current;</span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= count) <span class="keyword">return</span> range_errors;</span><br><span class="line">  current = <span class="built_in">set_position</span>(position);</span><br><span class="line">  current-&gt;entry = x;</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(13) .拷贝构造</p><p>和链表的拷贝构造类似，先通过头节点创造一个新节点，再遍历老链表，Node结构体有一个构造方法，会把上一个点的next指针域指向当前新建的节点，通过该方法不断创造新节点来对老链表进行拷贝。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; List1&lt;List_entry&gt;::<span class="built_in">List1</span>(<span class="type">const</span> List1&lt;List_entry&gt;&amp; copy) &#123;<span class="comment">//拷贝构造</span></span><br><span class="line">  count = copy.count;</span><br><span class="line">  Node&lt;List_entry&gt;* new_node, * old_node = copy.head;</span><br><span class="line">  <span class="keyword">if</span> (old_node == <span class="literal">nullptr</span>) head = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    new_node = <span class="keyword">new</span> <span class="built_in">Node</span>&lt;List_entry&gt;();</span><br><span class="line">    head = new_node;</span><br><span class="line">    <span class="keyword">while</span> (old_node != <span class="literal">nullptr</span>) &#123; <span class="comment">//遍历拷贝的线性表</span></span><br><span class="line">      old_node = old_node-&gt;next;</span><br><span class="line">      new_node-&gt;next = <span class="keyword">new</span> <span class="built_in">Node</span>&lt;List_entry&gt;(old_node-&gt;entry);</span><br><span class="line">      new_node = new_node-&gt;next;<span class="comment">//new_node往后拨一个</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(14) .赋值运算符重载</p><p>借助拷贝构造函数，拷贝一个新线性表，把当前线性表置空，让新线性表的指针域作为当前线性表的指针域，删除新的线性表头节点，即可。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="type">void</span> List1&lt;List_entry&gt;::<span class="keyword">operator</span> =(<span class="type">const</span> List1&lt;List_entry&gt;&amp; copy) &#123; <span class="comment">//赋值运算符重载</span></span><br><span class="line">  List1 <span class="built_in">new_copy</span>(copy);<span class="comment">//借用拷贝构造</span></span><br><span class="line">  <span class="built_in">clear</span>();<span class="comment">//清空当前表</span></span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">  head = <span class="literal">nullptr</span>;</span><br><span class="line">  new_copy.count = copy.count;</span><br><span class="line">  new_copy.head = head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>*实验2*</strong></em></p><p>1.问题分解</p><p> <img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps3.jpg" alt="img"></p><p>静态链表的底层实际上是数组，每个节点包含 1 个数据域(entry 数组存放的值)和 1 个“指针域”(next 其实不是指针，是指下标)，指向下一个节点。</p><p>\2. 对问题一基于单链表实现线性表List2的典型操作。</p><p>(1) .构造方法</p><p>对线性表进行初始化，首先要弄清楚他的属性available（可获得的空间链表的头指针 数组的下标）, last_used（上一次使用的空间 相当于指针 数组下标）, head（静态链表的头指针 也是数组下标）。在对线性表初始化的时候，就让上边的三个指针全部设初值为-1，在数组中表示无空间，就是nullptr的意思，让count的计数器的值为0。</p><p>时间复杂度：O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line">List2&lt;List_entry&gt;::<span class="built_in">List2</span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//初始化</span></span><br><span class="line">  <span class="comment">//都假定为空 -1</span></span><br><span class="line">  available = <span class="number">-1</span>;</span><br><span class="line">  last_used = <span class="number">-1</span>;</span><br><span class="line">  head = <span class="number">-1</span>;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>(2) .clear()置空方法</p><p>静态链表的的清空操作，从表头遍历静态链表，通过delete_node()方法删除节点(其实是加到了available链表中)。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="type">void</span> List2&lt;List_entry&gt;::<span class="built_in">clear</span>()</span><br><span class="line">&#123;</span><br><span class="line">  index p, q;</span><br><span class="line">  <span class="keyword">for</span> (p = head; p != <span class="number">-1</span>; p = workspace[p].next) &#123; <span class="comment">//遍历链表 对每一个节点进行delete_node</span></span><br><span class="line">    q = p;</span><br><span class="line">    <span class="built_in">delete_node</span>(p);</span><br><span class="line">  &#125;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">  head = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) .size()求表长</p><p>通过返回count计数器。</p><p>时间复杂度：O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="type">int</span> List2&lt;List_entry&gt;::<span class="built_in">size</span>() <span class="type">const</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4) .full()判满</p><p>静态链表的底层是数组实现的，所以比较count计数器和max_list(数组容量)的大小。</p><p>时间复杂度：O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="type">bool</span> List2&lt;List_entry&gt;::<span class="built_in">full</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> count &lt; max_list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(5) .empty()判空</p><p>判断count计数器是否为0。时间复杂度：O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="type">bool</span> List2&lt;List_entry&gt;::<span class="built_in">empty</span>() <span class="type">const</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(6) .set_position()找位置</p><p>把静态链表从表头开始，遍历position次，来到要找的节点位置，返回当前位置。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line">index List2&lt;List_entry&gt;::<span class="built_in">set_position</span>(<span class="type">int</span> position) <span class="type">const</span> &#123; <span class="comment">//根据下标，获得当前的值</span></span><br><span class="line">  <span class="comment">//Node2&lt;List_entry&gt; p;</span></span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (!(position&lt;<span class="number">0</span> || position&gt;max_list)) &#123;</span><br><span class="line">    <span class="comment">//遍历position次 拿到position的节点</span></span><br><span class="line">    <span class="keyword">for</span> (i = head; cnt &lt; position; cnt++, i = workspace[i].next);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(7) .insert()插入方法</p><p>先看插入的位置是否符合规范，如果符合规范，通过set_position()方法找到前一个节点，通过new_node()方法创建一个新的节点，让前一个节点的next指针域指向新节点，而让新节点的next指针域指向前一个结点老的next域（也就是下一个节点）。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line">Error_code List2&lt;List_entry&gt;::<span class="built_in">insert</span>(<span class="type">int</span> position, <span class="type">const</span> List_entry&amp; x) &#123;</span><br><span class="line">  index new_index, previous, following;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断position位置是否合法</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; count) <span class="keyword">return</span> range_errors;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//不是头插</span></span><br><span class="line">  <span class="keyword">if</span> (position &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//找到前驱节点 和 后继节点</span></span><br><span class="line">    previous = <span class="built_in">set_position</span>(position - <span class="number">1</span>);</span><br><span class="line">    following = workspace[previous].next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//头插  后继就是头节点</span></span><br><span class="line">  <span class="keyword">else</span> following = head;</span><br><span class="line">  <span class="keyword">if</span> ((new_index = <span class="built_in">new_node</span>()) == <span class="number">-1</span>) <span class="keyword">return</span> overflow;<span class="comment">//新建节点</span></span><br><span class="line">  workspace[new_index].entry = x;</span><br><span class="line">  workspace[new_index].next = following;<span class="comment">//next域为他的后继</span></span><br><span class="line">  <span class="keyword">if</span> (position == <span class="number">0</span>) <span class="comment">//如果是头插 新的头节点就是new_node</span></span><br><span class="line">    head = new_index;</span><br><span class="line">  <span class="keyword">else</span> <span class="comment">//不是头插的话 处理他的前驱节点</span></span><br><span class="line">    workspace[previous].next = new_index;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(8) .traverse()方法</p><p>遍历当前列表，通过传入的指针函数，对每一个节点都用传入的函数来操作。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="type">void</span> List2&lt;List_entry&gt;::<span class="built_in">traverse</span>(<span class="built_in">void</span> (*visit)(List_entry&amp;)) &#123;</span><br><span class="line">  <span class="comment">//遍历链表</span></span><br><span class="line">  <span class="keyword">for</span> (index n = head; n != <span class="number">-1</span>; n = workspace[n].next)<span class="comment">//n != -1   n != nullptr</span></span><br><span class="line">    (*visit)(workspace[n].entry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(9) .remove()删除节点</p><p>通过set_position()方法来找到要当前要删除节点的节点，通过x把当前要删除结点的值带出来，通过delete_node()方法删除节点。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line">Error_code List2&lt;List_entry&gt;::<span class="built_in">remove</span>(<span class="type">int</span> position, List_entry&amp; x) &#123; <span class="comment">//析出position位置的节点</span></span><br><span class="line">  x = workspace[<span class="built_in">set_position</span>(position)].entry;<span class="comment">//set_position找到节点</span></span><br><span class="line">  <span class="built_in">delete_node</span>(<span class="built_in">set_position</span>(position));<span class="comment">//set_position找到节点 delete_node进行删除</span></span><br><span class="line">  count--;</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(10) .retrieve()访问方法</p><p>先判断要访问的位置是否符合规范，如果符合规范就通过set_position方法来找到当前节点，通过x把当前节点的值带出去。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line">Error_code List2&lt;List_entry&gt;::<span class="built_in">retrieve</span>(<span class="type">int</span> position, List_entry&amp; x) <span class="type">const</span> &#123; <span class="comment">//访问position位置的值，通过x带出来</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; count) <span class="keyword">return</span> range_errors;<span class="comment">//判断position位置合不合法</span></span><br><span class="line">  <span class="type">int</span> cnt = <span class="number">0</span>, i;</span><br><span class="line">  <span class="keyword">for</span> (i = head; cnt != position; cnt++, i = workspace[i].next);<span class="comment">//遍历的方式找到position位置</span></span><br><span class="line">  x = workspace[i].entry;</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(11) .replace()替换方法</p><p>先判断要替换的位置是否符合规范，如果符合规范就通过set_position方法来找到当前节点，把x的值赋给当前节点的数据域完成替换。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line">Error_code List2&lt;List_entry&gt;::<span class="built_in">replace</span>(<span class="type">int</span> position, <span class="type">const</span> List_entry &amp;x) &#123;</span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; count) <span class="keyword">return</span> range_errors;<span class="comment">//判断下标合不合法</span></span><br><span class="line">  workspace[<span class="built_in">set_position</span>(position)].entry = x;<span class="comment">//set_position找到position位置的节点 替换值</span></span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(12) .new_node()方法创建一个新空间</p><p>先看可用空间链表available是不是还有剩余的空间，如果有的话就把available链表的下一个元素给返回，如果available链表没有剩余空间了，就看整个表的空间是不是满了，如果没满的话，就把last_used++，完成新建节点。</p><p>时间复杂度：O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line">index List2&lt;List_entry&gt;::<span class="built_in">new_node</span>()&#123;</span><br><span class="line">  index new_index;</span><br><span class="line">  <span class="comment">//因为是数组下标 用-1代替nullptr</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   \* 1. 先看available有没有空间可以用</span></span><br><span class="line"><span class="comment">   \* 2. available表没空间了，看能不能新建</span></span><br><span class="line"><span class="comment">   \* */</span></span><br><span class="line">  <span class="keyword">if</span> (available != <span class="number">-1</span>) &#123; <span class="comment">//available有空间可以用</span></span><br><span class="line">    new_index = available;<span class="comment">//available把头节点给new_node</span></span><br><span class="line">    available = workspace[available].next;<span class="comment">//自己跳到下一个节点</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (last_used &lt; max_list - <span class="number">1</span>) &#123; <span class="comment">//available表没有空间可以用  链表的容量没超过最大容量</span></span><br><span class="line">    new_index = ++last_used;<span class="comment">//新建</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//如果方式1、2都没有新建成功，返回-1表示失败</span></span><br><span class="line">  workspace[new_index].next = <span class="number">-1</span>;<span class="comment">//新节点的next域置空</span></span><br><span class="line">  <span class="keyword">return</span> new_index;<span class="comment">//成功的话 返回新节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(13) .delete_node()方法删除节点</p><p>删除节点要注意的是：并不是真的删除，而是把当前的链表的节点加到available链表（可用空间链表）中去。</p><p>时间复杂度：O(N^2)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="type">void</span> List2&lt;List_entry&gt;::<span class="built_in">delete_node</span>(index old_index) &#123;</span><br><span class="line">  index previous;</span><br><span class="line">  <span class="keyword">if</span> (old_index == head) <span class="comment">//删头节点 让head为原来头结点的next</span></span><br><span class="line">    head = workspace[old_index].next;</span><br><span class="line">  <span class="keyword">else</span> &#123; <span class="comment">//删除的其他节点</span></span><br><span class="line">    previous = <span class="built_in">set_position</span>(<span class="built_in">current_position</span>(old_index) - <span class="number">1</span>);<span class="comment">//通过set_position拿到前驱节点</span></span><br><span class="line">    workspace[previous].next = workspace[old_index].next;<span class="comment">//让前驱节点等于待删节点的后继</span></span><br><span class="line">  &#125;</span><br><span class="line">  workspace[old_index].next = available;<span class="comment">//通过头插的方式把节点添加在available表中</span></span><br><span class="line">  available = old_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(14) .current_position()方法 返回当前的位置</p><p>通过把静态链表遍历count次，来返回当前位置的节点。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="type">int</span> List2&lt;List_entry&gt;::<span class="built_in">current_position</span>(index n) <span class="type">const</span> &#123; <span class="comment">//根据节点 来获取下标</span></span><br><span class="line">  <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = head; i != n; cnt++, i = workspace[i].next);</span><br><span class="line">  <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验3</p><p>\1. 问题分解</p><p>运动会项目类：</p><p>​         <img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps4.jpg" alt="img"></p><p>运动员类：</p><p>​          <img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps5.jpg" alt="img"></p><p>学院类：</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps6.jpg" alt="img"> </p><p>创建三个类的线性表进行操作，通过目录连接起来。</p><ol start="2"><li>基于线性表 List1、线性表 List2 实现线性表的应用：运动会信息管理，测试和调试程序。</li></ol><p>l 用List1来存放运动会项目</p><p>l 用List2来存放运动员</p><p>l 用STL库中的vector存放学院</p><p>get()set()方法较为简单，见程序源代码。</p><p>分析相关的函数操作：</p><p>注：分析时间复杂度时，不考虑线性表本身的时间开销。</p><p>(1) .运动会项目</p><p>A. void setMatch()新建项目</p><p>利用线性表的插入功能，通过构造一个match对象来把match对象通过insert()到matchs线性表中。通过IO流写道磁盘中。</p><p>时间复杂度：O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">setMatch</span><span class="params">()</span> <span class="comment">//新建项目</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;D:\\比赛项目.dat&quot;</span>,ios::app)</span></span>;</span><br><span class="line">  <span class="type">char</span> ch;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123; cout&lt;&lt;<span class="string">&quot;请分别输入比赛项目名称、编号（假设为 6 位数字）、参与该项目的运动员性别、比赛 日期、比赛时间、比赛人数.&quot;</span>&lt;&lt;endl;</span><br><span class="line">    string call;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    string sex;</span><br><span class="line">    string date;</span><br><span class="line">    string time;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    cin&gt;&gt;call&gt;&gt;number&gt;&gt;sex&gt;&gt;date&gt;&gt;time&gt;&gt;num;<span class="comment">//输入相关属性</span></span><br><span class="line">    Match temp = <span class="built_in">Match</span>(call,number,sex,date,time,num);<span class="comment">//创建一个temp临时变量</span></span><br><span class="line">    matchs.<span class="built_in">insert</span>(<span class="number">0</span>,temp);<span class="comment">//头插在链表中</span></span><br><span class="line"></span><br><span class="line">​    fout.<span class="built_in">write</span>((<span class="type">char</span> *)&amp;temp,<span class="built_in">sizeof</span>(Match));<span class="comment">//写入文件流</span></span><br><span class="line">​    cout&lt;&lt;<span class="string">&quot;是否继续输入，如果继续键入Y|y&quot;</span>&lt;&lt;endl;</span><br><span class="line">​    cin&gt;&gt;ch;</span><br><span class="line">  &#125;<span class="keyword">while</span>(ch==<span class="string">&#x27;y&#x27;</span>||ch==<span class="string">&#x27;Y&#x27;</span>);</span><br><span class="line">  fout.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps7.jpg" alt="img"> </p><p>B. int changeMatch()修改一个项目</p><p>因为所有项目中最特殊的就是项目的id唯一，所以修改只能通过查询id来完成，遍历线性表，找到要修改的项目，根据提示完成要修改的信息，通过replace()函数，完成修改的操作。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">changeMatch</span><span class="params">()</span>  <span class="comment">//修改一个项目</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;您正在进行修改比赛项目有关事项操作!&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;请输入要修改比赛项目的编号:&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="type">int</span> number1;    <span class="comment">//要修改的比赛项目编号</span></span><br><span class="line">  <span class="type">int</span> sign=<span class="number">0</span>;     <span class="comment">//设置的标记变量</span></span><br><span class="line">  cin&gt;&gt;number1;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; matchs.<span class="built_in">size</span>(); i++) &#123; <span class="comment">//遍历表 找指定的项目编号</span></span><br><span class="line">    Match temp;</span><br><span class="line">    matchs.<span class="built_in">retrieve</span>(i,temp);</span><br><span class="line">    <span class="keyword">if</span> (number1 == temp.<span class="built_in">getNumber</span>())&#123;</span><br><span class="line">      sign = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//没找到的话 输出信息提示</span></span><br><span class="line">  <span class="keyword">if</span> (sign==<span class="number">0</span>)</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;没有找到要修改的记录！&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">else</span> <span class="comment">//找到了项目</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请选择要修改比赛项目的那些信息&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改比赛项目的名称----1&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改比赛项目的编号----2&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改比赛项目的性别----3&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改比赛日期----4&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改比赛时间----5&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改比赛人数----6&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入对应信息的编号&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    <span class="keyword">switch</span>(a) <span class="comment">//switch case 控制修改的那一部分</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的比赛项目名称:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string name;</span><br><span class="line">        cin&gt;&gt;name;</span><br><span class="line">        Match temp;</span><br><span class="line">        matchs.<span class="built_in">retrieve</span>(i,temp);<span class="comment">//通过上次标记的i 拿出来找到的项目</span></span><br><span class="line">        temp.<span class="built_in">setCall</span>(name);<span class="comment">//修改项目姓名</span></span><br><span class="line">        matchs.<span class="built_in">replace</span>(i,temp);<span class="comment">//对表中的数据进行替换</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;比赛项目名称修改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入新的比赛编号:&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="type">int</span> number;</span><br><span class="line">        cin&gt;&gt;number;</span><br><span class="line">        Match match;</span><br><span class="line">        matchs.<span class="built_in">remove</span>(i,match);</span><br><span class="line">        match.<span class="built_in">setNumber</span>(number);</span><br><span class="line">        matchs.<span class="built_in">insert</span>(i,match);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;比赛项目编号修改成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的参赛选手性别:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string sex;</span><br><span class="line">        cin&gt;&gt;sex;</span><br><span class="line">        Match match;</span><br><span class="line">        matchs.<span class="built_in">remove</span>(i,match);</span><br><span class="line">        match.<span class="built_in">setSex</span>(sex);</span><br><span class="line">        matchs.<span class="built_in">insert</span>(i,match);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;参赛选手性别修改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的日期:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string date;</span><br><span class="line">        cin&gt;&gt;date;</span><br><span class="line">        Match match;</span><br><span class="line">        matchs.<span class="built_in">remove</span>(i,match);</span><br><span class="line">        match.<span class="built_in">setDate</span>(date);</span><br><span class="line">        matchs.<span class="built_in">insert</span>(i,match);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;比赛日期修改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的比赛时间:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string time;</span><br><span class="line">        cin&gt;&gt;time;</span><br><span class="line">        Match match;</span><br><span class="line">        matchs.<span class="built_in">remove</span>(i,match);</span><br><span class="line">        match.<span class="built_in">setDate</span>(time);</span><br><span class="line">        matchs.<span class="built_in">insert</span>(i,match);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;比赛时间修改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的参赛人数:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        cin&gt;&gt;num;</span><br><span class="line">        Match match;</span><br><span class="line">        matchs.<span class="built_in">remove</span>(i,match);</span><br><span class="line">        match.<span class="built_in">setNum</span>(num);</span><br><span class="line">        matchs.<span class="built_in">insert</span>(i,match);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;参赛人数修改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试:</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps8.jpg" alt="img"> </p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps9.jpg" alt="img"> </p><p>C. void deleteMatch()删除一个项目</p><p>删除一个项目，可以通过id来进行删除，也可以通过项目名称来删除，遍历线性表，找到需要删除的数据，通过线性表的remove()操作对项目进行删除。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteMatch</span><span class="params">()</span>  <span class="comment">//删除一个项目</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;------根据比赛项目的编号删除----1&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;------根据比赛项目的名称删除----2&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  <span class="keyword">switch</span>(n) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;请输入要删除的比赛编号&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="type">int</span> number;</span><br><span class="line">      cin &gt;&gt; number;</span><br><span class="line">      Match temp;</span><br><span class="line">      <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="type">bool</span> isFind = <span class="literal">false</span>;<span class="comment">//标记</span></span><br><span class="line">      <span class="keyword">for</span> (; i &lt; matchs.<span class="built_in">size</span>(); i++) &#123; <span class="comment">//遍历整个表 如果找到 就通过remove进行删除</span></span><br><span class="line">        matchs.<span class="built_in">retrieve</span>(i, temp);</span><br><span class="line">        <span class="keyword">if</span> (temp.<span class="built_in">getNumber</span>() == number) &#123;</span><br><span class="line">          cout &lt;&lt; <span class="string">&quot;找到信息&quot;</span> &lt;&lt; endl;</span><br><span class="line">          matchs.<span class="built_in">remove</span>(i, temp);</span><br><span class="line">          cout &lt;&lt; <span class="string">&quot;删除成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">          isFind = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//没找到的话 输出信息提示</span></span><br><span class="line">      <span class="keyword">if</span> (!isFind) cout &lt;&lt; <span class="string">&quot;未找到该项目&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;请输入要删除的比赛名称&quot;</span> &lt;&lt; endl;</span><br><span class="line">      string name;</span><br><span class="line">      cin &gt;&gt; name;</span><br><span class="line">      Match temp;</span><br><span class="line">      <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="type">bool</span> isFind = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">for</span> (; i &lt; matchs.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        matchs.<span class="built_in">retrieve</span>(i, temp);</span><br><span class="line">        <span class="keyword">if</span> (temp.<span class="built_in">getCall</span>() == name) &#123;</span><br><span class="line">          cout &lt;&lt; <span class="string">&quot;找到信息&quot;</span> &lt;&lt; endl;</span><br><span class="line">          matchs.<span class="built_in">remove</span>(i, temp);</span><br><span class="line">          cout &lt;&lt; <span class="string">&quot;删除成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">          isFind = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//没找到的话 输出信息提示</span></span><br><span class="line">      <span class="keyword">if</span> (!isFind) cout &lt;&lt; <span class="string">&quot;未找到该项目&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试:</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps10.jpg" alt="img"> </p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps11.jpg" alt="img"> </p><p>D. void selectMatch()查询一个项目</p><p>查询一个项目，可以通过id来进行查询，也可以通过项目名称来查询，遍历线性表，找到需要查询的数据，将该信息进行输出。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectMatch</span><span class="params">()</span> <span class="comment">//查询一个项目</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;------根据比赛项目的编号查找----1&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;------根据比赛项目的名称查找----2&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  <span class="keyword">switch</span>(n) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;请输入要查找的比赛编号&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="type">int</span> number;</span><br><span class="line">      cin &gt;&gt; number;</span><br><span class="line">      Match temp;</span><br><span class="line">      <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="type">bool</span> isFind = <span class="literal">false</span>;<span class="comment">//标志位</span></span><br><span class="line">      <span class="keyword">for</span> (; i &lt; matchs.<span class="built_in">size</span>(); i++) &#123; <span class="comment">//遍历整张表 如果找到 让标志位设为true</span></span><br><span class="line">        matchs.<span class="built_in">retrieve</span>(i, temp);</span><br><span class="line">        <span class="keyword">if</span> (temp.<span class="built_in">getNumber</span>() == number) &#123; <span class="comment">//找到信息的话 就把相关的信息进行输出</span></span><br><span class="line">          cout &lt;&lt; <span class="string">&quot;找到信息：&quot;</span> &lt;&lt; endl;</span><br><span class="line">          cout&lt;&lt;temp.<span class="built_in">getNumber</span>()&lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt;temp.<span class="built_in">getCall</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;temp.<span class="built_in">getSex</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;temp.<span class="built_in">getDate</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;temp.<span class="built_in">getTime</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;temp.<span class="built_in">getNum</span>()&lt;&lt;endl;</span><br><span class="line">          isFind = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//没找到的话 输出信息提示</span></span><br><span class="line">      <span class="keyword">if</span> (!isFind) cout &lt;&lt; <span class="string">&quot;未找到该项目&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;请输入要删除的比赛名称&quot;</span> &lt;&lt; endl;</span><br><span class="line">      string name;</span><br><span class="line">      cin &gt;&gt; name;</span><br><span class="line">      Match temp;</span><br><span class="line">      <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="type">bool</span> isFind = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">for</span> (; i &lt; matchs.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        matchs.<span class="built_in">retrieve</span>(i, temp);</span><br><span class="line">        <span class="keyword">if</span> (temp.<span class="built_in">getCall</span>() == name) &#123;</span><br><span class="line">          cout &lt;&lt; <span class="string">&quot;找到信息：&quot;</span> &lt;&lt; endl;</span><br><span class="line">          cout&lt;&lt;temp.<span class="built_in">getNumber</span>()&lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt;temp.<span class="built_in">getCall</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;temp.<span class="built_in">getSex</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;temp.<span class="built_in">getDate</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;temp.<span class="built_in">getTime</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;temp.<span class="built_in">getNum</span>()&lt;&lt;endl;</span><br><span class="line">          isFind = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!isFind) cout &lt;&lt; <span class="string">&quot;未找到该项目&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps12.jpg" alt="img"> </p><p>(2) .运动员</p><p>A. void inputAthlete()新建运动员</p><p>利用线性表的插入功能，通过构造一个aehlete对象来把aehlete对象通过insert()到aehletes线性表中。通过IO流写道磁盘中。</p><p>时间复杂度：O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">inputAthlete</span><span class="params">()</span><span class="comment">//创建运动员</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;d:\\运动员.dat&quot;</span>,ios::app)</span></span>;<span class="comment">//打开文件</span></span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="type">char</span> ch;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;  cout&lt;&lt;<span class="string">&quot;请分别输入运动员姓名，学号，性别，学院，参加的项目标号&quot;</span>&lt;&lt;endl;</span><br><span class="line">    string name;</span><br><span class="line">    string id;</span><br><span class="line">    string sex;</span><br><span class="line">    string college;</span><br><span class="line">    string matchId;</span><br><span class="line">    cin&gt;&gt;name&gt;&gt;id&gt;&gt;sex&gt;&gt;college&gt;&gt;matchId;<span class="comment">//输入相关信息</span></span><br><span class="line">    <span class="function">Athlete <span class="title">temp</span><span class="params">(name,id,sex,college,matchId)</span></span>;<span class="comment">//创建temp对象</span></span><br><span class="line">    athletes.<span class="built_in">insert</span>(i,temp);<span class="comment">//插入到线性表中</span></span><br><span class="line">    fout.<span class="built_in">write</span>((<span class="type">char</span> *)&amp;temp,<span class="built_in">sizeof</span>(Athlete));<span class="comment">//写入文件</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;是否继续输入，如果继续键入Y|y&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;ch;</span><br><span class="line">  &#125;<span class="keyword">while</span>(ch==<span class="string">&#x27;y&#x27;</span>||ch==<span class="string">&#x27;Y&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps13.jpg" alt="img"> </p><p>B. Void deleteAthlete()撤销报名</p><p>同理，因为所有运动员中最特殊的就是运动员的学号id唯一，所以撤销报名只能通过查询id来完成，遍历线性表，找到要修改的撤销报名的运动员，通过remove()函数，完成修改的操作。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>  <span class="title">deleteAthlete</span><span class="params">()</span><span class="comment">//撤销报名 （删除运动员）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//只有学号是唯一的，所以根据学号来撤销报名</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;请输入被撤销报名的运动员的学号&quot;</span>&lt;&lt;endl;</span><br><span class="line">  string id;</span><br><span class="line">  cin&gt;&gt;id;</span><br><span class="line">  Athlete temp;</span><br><span class="line">  <span class="type">bool</span> flag =<span class="literal">false</span>;<span class="comment">//标志位</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; athletes.<span class="built_in">size</span>(); i++) &#123; <span class="comment">//遍历表 来寻找</span></span><br><span class="line">    athletes.<span class="built_in">retrieve</span>(i,temp);</span><br><span class="line">    <span class="keyword">if</span> (temp.<span class="built_in">getId</span>() == id) &#123;<span class="comment">//找到 通过remove移除</span></span><br><span class="line">      athletes.<span class="built_in">remove</span>(i,temp);</span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;删除成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//未找到运动员 输出信息进行提示</span></span><br><span class="line">  <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;未找到该运动员&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps14.jpg" alt="img"> </p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps15.jpg" alt="img"> </p><p>C. void cheekAthlete()对运动员检录</p><p>因为所有运动员中最特殊的就是运动员的学号id唯一，所以对运动员检录只能通过查询id来完成，遍历线性表，找到要检录的运动员，通过retrieve()函数把值flag拿出来检录后通过replace()完成替换，完成修改的操作。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">cheekAthlete</span><span class="params">()</span></span>&#123;<span class="comment">//对运动员检录</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;请输入要检录的运动员的学号&quot;</span>&lt;&lt;endl;</span><br><span class="line">  string id;</span><br><span class="line">  cin&gt;&gt;id;</span><br><span class="line">  Athlete temp;</span><br><span class="line">  <span class="type">bool</span> flag =<span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; athletes.<span class="built_in">size</span>(); i++) &#123;<span class="comment">//遍历线性表</span></span><br><span class="line">    athletes.<span class="built_in">retrieve</span>(i,temp);</span><br><span class="line">    <span class="keyword">if</span> (temp.<span class="built_in">getId</span>() == id) &#123; <span class="comment">//如果找到了</span></span><br><span class="line">      <span class="keyword">if</span> (temp.<span class="built_in">isText1</span>()) &#123; <span class="comment">//先看有没有检录过</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;已经检录过了&quot;</span>&lt;&lt;endl;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123; <span class="comment">//没检录过 检录 replace替换表的数据</span></span><br><span class="line">        temp.<span class="built_in">setIsText</span>(<span class="literal">true</span>);</span><br><span class="line">        athletes.<span class="built_in">replace</span>(i,temp);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;检录成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//没找到的话给出提示信息</span></span><br><span class="line">  <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;未找到该运动员&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps16.jpg" alt="img"> </p><p>D. void loginScoreAthlete()登记运动员的成绩</p><p>某项比赛完成后，录入参加比赛同学的成绩、排名，并自动获得分数。通过对输入的排名进行访问，根据不同的排名来对运动员的成绩属性赋不同的值。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">loginScoreAthlete</span><span class="params">()</span></span>&#123;<span class="comment">//等级运动员的信息</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;请输入要录入分数的运动员的学号&quot;</span>&lt;&lt;endl;</span><br><span class="line">  string id;</span><br><span class="line">  cin&gt;&gt;id;</span><br><span class="line">  Athlete temp;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;请输入该运动员的成绩 和 排名&quot;</span>&lt;&lt;endl;</span><br><span class="line">  string score;</span><br><span class="line">  <span class="type">int</span> rank;</span><br><span class="line">  cin&gt;&gt;score;<span class="comment">//成绩</span></span><br><span class="line">  cin&gt;&gt;rank;<span class="comment">//排名</span></span><br><span class="line">  <span class="type">bool</span> flag =<span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; athletes.<span class="built_in">size</span>(); i++) &#123; <span class="comment">//遍历整个表 找到要登记成绩的学生</span></span><br><span class="line">    athletes.<span class="built_in">retrieve</span>(i,temp);</span><br><span class="line">    <span class="keyword">if</span> (temp.<span class="built_in">getId</span>() == id &amp;&amp; temp.<span class="built_in">isText1</span>()) &#123;<span class="comment">//如果id查到，并且检录过了</span></span><br><span class="line">      temp.<span class="built_in">setScore</span>(score);</span><br><span class="line">      temp.<span class="built_in">setRank</span>(rank);<span class="comment">//登记信息</span></span><br><span class="line">      athletes.<span class="built_in">replace</span>(i,temp);<span class="comment">//替换表中的数据</span></span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;成绩录入完成&quot;</span>&lt;&lt;endl;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//没找到的话给出提示信息</span></span><br><span class="line">  <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;未找到该运动员或者该运动员没有检录&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试:</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps17.jpg" alt="img"> </p><p>E. void selectAthlete()查询运动员</p><p>因为所有运动员中最特殊的就是运动员的学号id唯一，所以对运动员查询只能通过查询id来完成，遍历线性表，找到要查询的运动员，通过retrieve()函数把运动员拿出来之后，输出信息。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectAthlete</span><span class="params">()</span> </span>&#123; <span class="comment">//查询运动员信息</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;请输入要查询的运动员的学号&quot;</span>&lt;&lt;endl;</span><br><span class="line">  string id;</span><br><span class="line">  cin&gt;&gt;id;</span><br><span class="line">  Athlete temp;</span><br><span class="line">  <span class="type">bool</span> flag =<span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; athletes.<span class="built_in">size</span>(); i++) &#123; <span class="comment">//遍历整个表 找到指定的运动员</span></span><br><span class="line">    athletes.<span class="built_in">retrieve</span>(i,temp);</span><br><span class="line">    <span class="keyword">if</span> (temp.<span class="built_in">getId</span>() == id) &#123;</span><br><span class="line">      athletes.<span class="built_in">remove</span>(i,temp);</span><br><span class="line">      <span class="comment">//找到了 输出相关信息</span></span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;学号:&quot;</span>&lt;&lt;temp.<span class="built_in">getId</span>()&lt;&lt;<span class="string">&quot; 姓名：&quot;</span>&lt;&lt;temp.<span class="built_in">getName</span>()&lt;&lt; <span class="string">&quot; 性别：&quot;</span>&lt;&lt;temp.<span class="built_in">getSex</span>()&lt;&lt;<span class="string">&quot; 学院：&quot;</span>&lt;&lt;temp.<span class="built_in">getCollege</span>()</span><br><span class="line">        &lt;&lt; <span class="string">&quot; 参加的项目编号：&quot;</span>&lt;&lt;temp.<span class="built_in">getMatchId</span>()&lt;&lt;<span class="string">&quot; 是否检录：&quot;</span>&lt;&lt;temp.<span class="built_in">isText1</span>()&lt;&lt;<span class="string">&quot; 参赛成绩：&quot;</span>&lt;&lt;temp.<span class="built_in">getScore</span>()</span><br><span class="line">        &lt;&lt;<span class="string">&quot; 排名：&quot;</span>&lt;&lt;temp.<span class="built_in">getRank</span>()&lt;&lt;<span class="string">&quot; 获得的分数：&quot;</span>&lt;&lt;temp.<span class="built_in">getGrade</span>()&lt;&lt;endl;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//没找到的话给出提示信息</span></span><br><span class="line">  <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;未找到该运动员&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps18.jpg" alt="img"> </p><p>F. void reviceAthlete()修改运动员信息</p><p>同理，因为所有运动员中最特殊的就是运动员的学号id唯一，所以修改信息只能通过查询id来完成，遍历线性表，找到要修改的信息的运动员，通过retrieve()函数，先把值拿出来，再通过remove()移除值，再通过insert()进行插入完成修改的操作。</p><p>时间复杂度：O(N)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reviceAthlete</span><span class="params">()</span></span>&#123; <span class="comment">//修改运动员信息</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;请输入要修改的运动员的学号&quot;</span>&lt;&lt;endl;</span><br><span class="line">  string id;</span><br><span class="line">  cin&gt;&gt;id;</span><br><span class="line">  Athlete temp;</span><br><span class="line">  <span class="type">bool</span> flag =<span class="literal">false</span>;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; athletes.<span class="built_in">size</span>(); i++) &#123; <span class="comment">//找到 指定学号的运动员</span></span><br><span class="line">    athletes.<span class="built_in">retrieve</span>(i,temp);</span><br><span class="line">    <span class="keyword">if</span> (temp.<span class="built_in">getId</span>() == id) &#123;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;未找到该运动员&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请选择要修改运动员的那些信息&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改运动员的姓名----1&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改运动员的学号----2&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改运动员的性别----3&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改运动员学院----4&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改运动员参赛项目编号----5&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;运动员的检录，成绩排名，分数，不予修改，请使用上一步的函数操作&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入对应信息的编号&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    <span class="keyword">switch</span>(a)&#123; <span class="comment">//运动员的检录，成绩排名，分数，不予修改</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的运动员的姓名:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string name;</span><br><span class="line">        cin&gt;&gt;name;</span><br><span class="line">        temp.<span class="built_in">setName</span>(name); <span class="comment">//输入新信息</span></span><br><span class="line">        athletes.<span class="built_in">replace</span>(i,temp);<span class="comment">//进行替换</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;运动员的姓名修改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入新的运动员的学号:&quot;</span> &lt;&lt; endl;</span><br><span class="line">        string number;</span><br><span class="line">        cin&gt;&gt;number;</span><br><span class="line">        temp.<span class="built_in">setId</span>(number);</span><br><span class="line">        athletes.<span class="built_in">replace</span>(i,temp);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;运动员的学号修改成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的运动员的性别:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string sex;</span><br><span class="line">        cin&gt;&gt;sex;</span><br><span class="line">        temp.<span class="built_in">setSex</span>(sex);</span><br><span class="line">        athletes.<span class="built_in">replace</span>(i,temp);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;运动员的性别修改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的学院:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string college;</span><br><span class="line">        cin&gt;&gt;college;</span><br><span class="line">        temp.<span class="built_in">setCollege</span>(college);</span><br><span class="line">        athletes.<span class="built_in">replace</span>(i,temp);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;运动员的学院改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的运动员参赛编号:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string matchId;</span><br><span class="line">        cin&gt;&gt;matchId;</span><br><span class="line">        temp.<span class="built_in">setMatchId</span>(matchId);</span><br><span class="line">        athletes.<span class="built_in">replace</span>(i,temp);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;运动员参赛编号修改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">default</span>: cout&lt;&lt;<span class="string">&quot;输入有误&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps19.jpg" alt="img"> </p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps20.jpg" alt="img"> </p><p>(3) .学院</p><p>A. void creatColleges()创建学院</p><p>利用标准C++ STL库中的vector容器存储学院，遍历运动员表，依次拿出每一个运动员，遍历学院数组，看学院数组中是否存在运动员对应的学院，如果不存在，就创建学院，并且把该运动员信息插入到学院中的运动员信息中，如果有对应的学院，就只把运动员的信息插入到学院的运动员数组中。</p><p>时间复杂度：O(N^3)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">creatColleges</span><span class="params">(List2&lt;Athlete&gt; a)</span> </span>&#123;<span class="comment">//创建学院</span></span><br><span class="line">  Athlete temp;</span><br><span class="line">  <span class="type">bool</span> flag;<span class="comment">//标志1：有没有运动员对应的学院</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;<span class="comment">//遍历运动员表</span></span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    a.<span class="built_in">retrieve</span>(i,temp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; college : colleges) &#123; <span class="comment">//遍历学院数组</span></span><br><span class="line">      <span class="keyword">if</span> (college.name == temp.<span class="built_in">getCollege</span>()) &#123; <span class="comment">//如果有和运动员同名的学院</span></span><br><span class="line">        <span class="type">bool</span> flag2 = <span class="literal">false</span>;<span class="comment">//标志位2：记录运动员是否记录过</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; player : college.athletess) &#123;</span><br><span class="line">          <span class="keyword">if</span> (temp.<span class="built_in">getId</span>()==player.<span class="built_in">getId</span>()) flag2 = <span class="literal">true</span>;<span class="comment">//记录过 标志位为true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag2) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">//运动员还没加在学院的动态数组里面</span></span><br><span class="line">          flag = <span class="literal">true</span>;</span><br><span class="line">          college.athletess.<span class="built_in">push_back</span>(temp);<span class="comment">//把运动员加在学院的动态数组里面</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123; <span class="comment">//没有学院</span></span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="function">College <span class="title">collegeTemp</span><span class="params">(<span class="string">&quot;&quot;</span>+temp.getCollege())</span></span>;<span class="comment">//创建学院</span></span><br><span class="line">      collegeTemp.athletess.<span class="built_in">push_back</span>(temp);<span class="comment">//把运动员加在学院里的运动员中</span></span><br><span class="line">      colleges.<span class="built_in">push_back</span>(collegeTemp);<span class="comment">//再把运动员放入数组中</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B. void setCollegesScore()设置学院成绩</p><p>通过遍历运动员表来创建对应的学院，并且对对应的学院的成绩进行录入。如果是男生，就加入到男生成绩和总成绩；如果是女生，就加入到女生成绩和总成绩。</p><p>时间复杂度O(N^2)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">setCollegesScore</span><span class="params">(vector&lt;College&gt; &amp;colleges)</span></span>&#123; <span class="comment">//设置学院的成绩</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; college : colleges) &#123; <span class="comment">//遍历学院vector数组 通过setScore设置成绩</span></span><br><span class="line">    college.<span class="built_in">setScore</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setScore</span><span class="params">()</span> </span>&#123; <span class="comment">//设置成绩</span></span><br><span class="line">  <span class="keyword">this</span>-&gt;score = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>-&gt;manScore = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>-&gt;womenScore = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(Athlete temp:athletess)&#123; <span class="comment">//遍历运动员表</span></span><br><span class="line">    <span class="keyword">if</span> (temp.<span class="built_in">getSex</span>() == <span class="string">&quot;男&quot;</span>) &#123; <span class="comment">//如果是男同学 就加manScore  score</span></span><br><span class="line">      <span class="keyword">this</span>-&gt;manScore += temp.<span class="built_in">getGrade</span>();</span><br><span class="line">      <span class="keyword">this</span>-&gt;score += temp.<span class="built_in">getGrade</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">//如果是女同学 就加womenScore  score</span></span><br><span class="line">      <span class="keyword">this</span>-&gt;womenScore += temp.<span class="built_in">getGrade</span>();</span><br><span class="line">      <span class="keyword">this</span>-&gt;score += temp.<span class="built_in">getGrade</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C. void sortScore()根据总成绩排序</p><p>利用选择排序的思想，以他的综合得分score为关键值来进行排序，每次遍历找出该轮最大值，找到最大的前6个学院，如果小于6个学院，就进行全排。</p><p>时间复杂度O(N^2)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sortScore</span><span class="params">(vector&lt;College&gt; colleges)</span></span>&#123; <span class="comment">//总成绩排序</span></span><br><span class="line">  <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">  College temp;</span><br><span class="line">  <span class="comment">//确定排序的轮数 如果不够6个学院的话就全排 6个以上只排前6个</span></span><br><span class="line">  <span class="type">int</span> loop = <span class="number">6</span> &lt; colleges.<span class="built_in">size</span>()? <span class="number">6</span> : colleges.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; college : colleges)&#123;<span class="comment">//防止之前进行过排序 因此对所有的学院都设置为false</span></span><br><span class="line">    college.flag = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; loop; ++i) &#123;<span class="comment">//loop次最大值</span></span><br><span class="line">    max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;college: colleges) &#123;</span><br><span class="line">      <span class="keyword">if</span> (college.score &gt; max &amp;&amp; !college.flag) &#123;</span><br><span class="line">        <span class="comment">//每一遍循环里边找到最大的 并把标志位置位true 意思是已经排过序了</span></span><br><span class="line">        college.flag = <span class="literal">true</span>;</span><br><span class="line">        max = college.score;</span><br><span class="line">        temp = college;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;混合分数第&quot;</span>&lt;&lt;i + <span class="number">1</span>&lt;&lt;<span class="string">&quot;的是:&quot;</span> &lt;&lt; temp.name &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; temp.score &lt;&lt; endl;<span class="comment">//显示</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>D. void sortManScore()根据男生成绩排序</p><p>利用选择排序的思想，以他的男生综合得分manScore为Key值来进行排序，找到最大的前6位。</p><p>时间复杂度O(N^2)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sortManScore</span><span class="params">(vector&lt;College&gt; colleges)</span></span>&#123; <span class="comment">//男子团体排序</span></span><br><span class="line">  <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">  College temp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; college : colleges)&#123;<span class="comment">//防止之前进行过排序 因此对所有的学院都设置为false</span></span><br><span class="line">    college.flag = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//确定排序的轮数 如果不够6个学院的话就全排 6个以上只排前6个</span></span><br><span class="line">  <span class="type">int</span> loop = <span class="number">6</span> &lt; colleges.<span class="built_in">size</span>()? <span class="number">6</span> : colleges.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; loop; ++i) &#123;</span><br><span class="line">    max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; college : colleges) &#123;</span><br><span class="line">      <span class="keyword">if</span> (college.manScore &gt; max &amp;&amp; !college.flag) &#123;</span><br><span class="line">        <span class="comment">//每一遍循环里边找到最大的 并把标志位置位true 意思是已经排过序了</span></span><br><span class="line">        college.flag = <span class="literal">true</span>;</span><br><span class="line">        max = college.score;</span><br><span class="line">        temp = college;</span><br><span class="line">        cout&lt;&lt;temp.name;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;男子团体分数第&quot;</span>&lt;&lt;i + <span class="number">1</span>&lt;&lt;<span class="string">&quot;的是:&quot;</span> &lt;&lt; temp.name &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; temp.manScore &lt;&lt; endl;<span class="comment">//显示</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>E. void sortWomenScore()根据女生成绩排队</p><p>利用选择排序的思想，以他的女生综合得分womenScore为Key值来进行排序，找到最大的前6位。</p><p>时间复杂度O(N^2)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sortWomenScore</span><span class="params">(vector&lt;College&gt; colleges)</span></span>&#123;<span class="comment">//防止之前进行过排序 因此对所有的学院都设置为false</span></span><br><span class="line">  <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">  College temp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; college : colleges)&#123;</span><br><span class="line">    college.flag = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//确定排序的轮数 如果不够6个学院的话就全排 6个以上只排前6个</span></span><br><span class="line">  <span class="type">int</span> loop = <span class="number">6</span> &lt; colleges.<span class="built_in">size</span>()? <span class="number">6</span> : colleges.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; loop; ++i) &#123;</span><br><span class="line">    max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; college : colleges) &#123;</span><br><span class="line">      <span class="comment">//每一遍循环里边找到最大的 并把标志位置位true 意思是已经排过序了</span></span><br><span class="line">      <span class="keyword">if</span> (college.womenScore &gt; max &amp;&amp; !college.flag) &#123;</span><br><span class="line">        college.flag = <span class="literal">true</span>;</span><br><span class="line">        max = college.score;</span><br><span class="line">        temp = college;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;女子团体分数第&quot;</span>&lt;&lt;i + <span class="number">1</span>&lt;&lt;<span class="string">&quot;的是:&quot;</span> &lt;&lt; temp.name &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; temp.womenScore &lt;&lt; endl;<span class="comment">//显示</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>测试：（测试学院的全部操作）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Test.cpp</span><br><span class="line"></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;E3.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function">Match <span class="title">match1</span><span class="params">(<span class="string">&quot;100m&quot;</span>,<span class="number">100001</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;8-31&quot;</span>,<span class="string">&quot;2:00&quot;</span>,<span class="number">20</span>)</span></span>;</span><br><span class="line">  <span class="function">Match <span class="title">match2</span><span class="params">(<span class="string">&quot;100m&quot;</span>,<span class="number">100001</span>,<span class="string">&quot;女&quot;</span>,<span class="string">&quot;8-31&quot;</span>,<span class="string">&quot;2:00&quot;</span>,<span class="number">20</span>)</span></span>;</span><br><span class="line">  <span class="function">Athlete <span class="title">a</span><span class="params">(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;2001&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;信控&quot;</span>,<span class="string">&quot;10001&quot;</span>)</span></span>;</span><br><span class="line">  <span class="function">Athlete <span class="title">b</span><span class="params">(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;2002&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;材料&quot;</span>,<span class="string">&quot;10001&quot;</span>)</span></span>;</span><br><span class="line">  <span class="function">Athlete <span class="title">c</span><span class="params">(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;2003&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;信控&quot;</span>,<span class="string">&quot;10001&quot;</span>)</span></span>;</span><br><span class="line">  <span class="function">Athlete <span class="title">d</span><span class="params">(<span class="string">&quot;d&quot;</span>,<span class="string">&quot;2004&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;材料&quot;</span>,<span class="string">&quot;10001&quot;</span>)</span></span>;</span><br><span class="line">  <span class="function">Athlete <span class="title">e</span><span class="params">(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;2005&quot;</span>,<span class="string">&quot;女&quot;</span>,<span class="string">&quot;信控&quot;</span>,<span class="string">&quot;10001&quot;</span>)</span></span>;</span><br><span class="line">  <span class="function">Athlete <span class="title">f</span><span class="params">(<span class="string">&quot;f&quot;</span>,<span class="string">&quot;2006&quot;</span>,<span class="string">&quot;女&quot;</span>,<span class="string">&quot;材料&quot;</span>,<span class="string">&quot;10001&quot;</span>)</span></span>;</span><br><span class="line">  <span class="function">Athlete <span class="title">g</span><span class="params">(<span class="string">&quot;g&quot;</span>,<span class="string">&quot;2007&quot;</span>,<span class="string">&quot;女&quot;</span>,<span class="string">&quot;信控&quot;</span>,<span class="string">&quot;10001&quot;</span>)</span></span>;</span><br><span class="line">  <span class="function">Athlete <span class="title">h</span><span class="params">(<span class="string">&quot;h&quot;</span>,<span class="string">&quot;2008&quot;</span>,<span class="string">&quot;女&quot;</span>,<span class="string">&quot;材料&quot;</span>,<span class="string">&quot;10001&quot;</span>)</span></span>;</span><br><span class="line">  a.<span class="built_in">setRank</span>(<span class="number">1</span>);</span><br><span class="line">  b.<span class="built_in">setRank</span>(<span class="number">2</span>);</span><br><span class="line">  c.<span class="built_in">setRank</span>(<span class="number">3</span>);</span><br><span class="line">  d.<span class="built_in">setRank</span>(<span class="number">4</span>);</span><br><span class="line">  e.<span class="built_in">setRank</span>(<span class="number">1</span>);</span><br><span class="line">  f.<span class="built_in">setRank</span>(<span class="number">2</span>);</span><br><span class="line">  g.<span class="built_in">setRank</span>(<span class="number">3</span>);</span><br><span class="line">  h.<span class="built_in">setRank</span>(<span class="number">4</span>);</span><br><span class="line">  athletes.<span class="built_in">insert</span>(<span class="number">0</span>,a);</span><br><span class="line">  athletes.<span class="built_in">insert</span>(<span class="number">1</span>,b);</span><br><span class="line">  athletes.<span class="built_in">insert</span>(<span class="number">2</span>,c);</span><br><span class="line">  athletes.<span class="built_in">insert</span>(<span class="number">3</span>,d);</span><br><span class="line">  athletes.<span class="built_in">insert</span>(<span class="number">4</span>,e);</span><br><span class="line">  athletes.<span class="built_in">insert</span>(<span class="number">5</span>,f);</span><br><span class="line">  athletes.<span class="built_in">insert</span>(<span class="number">6</span>,g);</span><br><span class="line">  athletes.<span class="built_in">insert</span>(<span class="number">7</span>,h);</span><br><span class="line">  <span class="built_in">creatColleges</span>(athletes);</span><br><span class="line">  <span class="built_in">setCollegesScore</span>(colleges);</span><br><span class="line">  <span class="built_in">sortScore</span>(colleges);</span><br><span class="line">  <span class="built_in">sortManScore</span>(colleges);</span><br><span class="line">  <span class="built_in">sortWomenScore</span>(colleges);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps21.jpg" alt="img"> </p><h3 id="五．程序源代码"><a href="#五．程序源代码" class="headerlink" title="五．程序源代码"></a>五．程序源代码</h3><p>Utility.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Error_code</span> &#123; success, fail, range_errors, underflow, overflow, fatal, not_present, duplicate_error, entry_inserted, entry_found, internal_error &#125;;</span><br></pre></td></tr></table></figure><h4 id="实验1-基于单链表实现线性表-List1"><a href="#实验1-基于单链表实现线性表-List1" class="headerlink" title="实验1. 基于单链表实现线性表 List1"></a>实验1. 基于单链表实现线性表 List1</h4><p>Node.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Node_entry</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="comment">//数据域</span></span><br><span class="line">  Node_entry entry;<span class="comment">//数值</span></span><br><span class="line">  Node&lt;Node_entry&gt;* next;<span class="comment">//next指针</span></span><br><span class="line">  <span class="comment">//构造方法</span></span><br><span class="line">  <span class="built_in">Node</span>();</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   \* 默认参数</span></span><br><span class="line"><span class="comment">   \* 如果不传就用默认参数</span></span><br><span class="line"><span class="comment">   \* 如果传了值就用下边的构造方法</span></span><br><span class="line"><span class="comment">   \* */</span></span><br><span class="line">  <span class="built_in">Node</span>(Node_entry item, Node&lt;Node_entry&gt;* add_on = <span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Node.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Node.h&quot;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Node_entry</span>&gt; Node&lt;Node_entry&gt;::<span class="built_in">Node</span>()</span><br><span class="line">&#123;</span><br><span class="line">  next = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Node_entry</span>&gt; Node&lt;Node_entry&gt;::<span class="built_in">Node</span>(Node_entry item, Node&lt;Node_entry&gt;* add_on)</span><br><span class="line">&#123;</span><br><span class="line">  entry = item;</span><br><span class="line">  next = add_on;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List1.h</span><br><span class="line"></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Node.h&quot;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;utility.h&quot;</span><span class="comment">//状态错误</span></span></span><br><span class="line"><span class="comment">//enum Error_code &#123; success, fail, range_errors, underflow, overflow, fatal, not_present, duplicate_error, entry_inserted, entry_found, internal_error &#125;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; <span class="keyword">class</span> <span class="title class_">List1</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">List1</span>();</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">//大小</span></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">//判满</span></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">//判空</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;<span class="comment">//清空</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">void</span> (*visit)(List_entry &amp;))</span></span>;<span class="comment">//通过visit函数指针遍历线性表</span></span><br><span class="line">  <span class="function">Error_code <span class="title">retrieve</span><span class="params">(<span class="type">int</span> position, List_entry&amp; x)</span> <span class="type">const</span></span>;<span class="comment">//访问position位置的值</span></span><br><span class="line">  <span class="function">Error_code <span class="title">replace</span><span class="params">(<span class="type">int</span> position, <span class="type">const</span> List_entry&amp; x)</span></span>;<span class="comment">//替换position位置的值</span></span><br><span class="line">  <span class="function">Error_code <span class="title">remove</span><span class="params">(<span class="type">int</span> position, List_entry&amp; x)</span></span>;<span class="comment">//移除position位置的值</span></span><br><span class="line">  <span class="function">Error_code <span class="title">insert</span><span class="params">(<span class="type">int</span> position, <span class="type">const</span> List_entry&amp; x)</span></span>;<span class="comment">//在position位置插入一个元素</span></span><br><span class="line">  ~<span class="built_in">List1</span>();<span class="comment">//析构</span></span><br><span class="line">  <span class="built_in">List1</span>(<span class="type">const</span> List1&lt;List_entry&gt;&amp; copy);<span class="comment">//拷贝构造</span></span><br><span class="line">  <span class="type">void</span> <span class="keyword">operator</span> =(<span class="type">const</span> List1&lt;List_entry&gt;&amp; copy);<span class="comment">//赋值运算符重载</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="comment">//数据域</span></span><br><span class="line">  <span class="type">int</span> count;<span class="comment">//计数器</span></span><br><span class="line">  Node&lt;List_entry&gt; *head;<span class="comment">//头指针</span></span><br><span class="line">  <span class="comment">//辅助方法 找到position位置的节点并返回</span></span><br><span class="line">  <span class="function">Node&lt;List_entry&gt; * <span class="title">set_position</span><span class="params">(<span class="type">int</span> position)</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">List1.cpp</span><br><span class="line"></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Node.h&quot;</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; List1&lt;List_entry&gt;::<span class="built_in">List1</span>() &#123;</span><br><span class="line">  <span class="comment">//对线性表初始化</span></span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">  head = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; List1&lt;List_entry&gt;::~<span class="built_in">List1</span>() &#123;</span><br><span class="line">  <span class="comment">//借助clear()方法清空</span></span><br><span class="line">  <span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; <span class="type">void</span> List1&lt;List_entry&gt;::<span class="built_in">clear</span>() &#123;</span><br><span class="line">  Node&lt;List_entry&gt;* p, * q;</span><br><span class="line">  <span class="comment">//p 当前节点  q next节点</span></span><br><span class="line">  <span class="keyword">for</span> (p = head; p; p = q) &#123;</span><br><span class="line">    q = p-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">  &#125;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">  head = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; <span class="type">int</span> List1&lt;List_entry&gt;::<span class="built_in">size</span>()<span class="type">const</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; <span class="type">bool</span> List1&lt;List_entry&gt;::<span class="built_in">full</span>() <span class="type">const</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; <span class="type">bool</span> List1&lt;List_entry&gt;::<span class="built_in">empty</span>()<span class="type">const</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (head != <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; Node&lt;List_entry&gt;* List1&lt;List_entry&gt;::<span class="built_in">set_position</span>(<span class="type">int</span> position) <span class="type">const</span> &#123;</span><br><span class="line">  Node&lt;List_entry&gt;* q = head;</span><br><span class="line">  <span class="comment">//遍历position次就来到了position的节点位置</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; position; i++) q = q-&gt;next;</span><br><span class="line">  <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; Error_code List1&lt;List_entry&gt;::<span class="built_in">insert</span>(<span class="type">int</span> position, <span class="type">const</span> List_entry&amp; x) &#123;</span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; count) <span class="comment">//position的位置不合法</span></span><br><span class="line">    <span class="keyword">return</span> range_errors;</span><br><span class="line">  Node&lt;List_entry&gt;* new_node, <span class="comment">//新节点</span></span><br><span class="line">          \* previous, <span class="comment">//前驱节点</span></span><br><span class="line">          \* following;<span class="comment">//后继节点</span></span><br><span class="line">  previous = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">if</span> (position &gt; <span class="number">0</span>) &#123; <span class="comment">//不是头插</span></span><br><span class="line">    previous = <span class="built_in">set_position</span>(position - <span class="number">1</span>);<span class="comment">//找到他的前驱节点</span></span><br><span class="line">    following = previous-&gt;next;<span class="comment">//后继节点</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> following = head;<span class="comment">//是头插的话，没有前驱，后继就是原来的头节点</span></span><br><span class="line">  new_node = <span class="keyword">new</span> <span class="built_in">Node</span>&lt;List_entry&gt;(x, following);<span class="comment">//借用了node的构造方法 node-&gt;next = following</span></span><br><span class="line">  <span class="keyword">if</span> (new_node == <span class="literal">nullptr</span>)</span><br><span class="line">    <span class="keyword">return</span> overflow;</span><br><span class="line">  <span class="keyword">if</span> (position == <span class="number">0</span>)<span class="comment">//如果是头插的话，头节点就是插入的new_node</span></span><br><span class="line">    head = new_node;</span><br><span class="line">  <span class="keyword">else</span><span class="comment">//不是头插的话，就让前驱节点的next指向new_node</span></span><br><span class="line">    previous-&gt;next = new_node;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; <span class="type">void</span> List1&lt;List_entry&gt;::<span class="built_in">traverse</span>(<span class="built_in">void</span> (*visit) (List_entry&amp;)) &#123;</span><br><span class="line">  Node&lt;List_entry&gt;* q;</span><br><span class="line">  <span class="keyword">for</span> (q = head; q; q = q-&gt;next) &#123; <span class="comment">//遍历每一个节点 对每一个节点 通过函数指针来进行操作</span></span><br><span class="line">    (*visit) (q-&gt;entry);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; Error_code List1&lt;List_entry&gt;::<span class="built_in">remove</span>(<span class="type">int</span> position, List_entry&amp; x) &#123;</span><br><span class="line">  Node&lt;List_entry&gt;* prior,<span class="comment">//前驱节点</span></span><br><span class="line">          \* current;<span class="comment">//当前节点</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">empty</span>()) <span class="keyword">return</span> fail;</span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= count) <span class="keyword">return</span> range_errors;<span class="comment">//position位置是否合法</span></span><br><span class="line">  <span class="keyword">if</span> (position &gt; <span class="number">0</span>) &#123; <span class="comment">//删的不是头节点</span></span><br><span class="line">    prior = <span class="built_in">set_position</span>(position - <span class="number">1</span>);<span class="comment">//前驱</span></span><br><span class="line">    current = prior-&gt;next;<span class="comment">//当前</span></span><br><span class="line">    prior-&gt;next = current-&gt;next;<span class="comment">//让前驱节点绕过当前节点直接指到后继节点</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123; <span class="comment">//删除头节点</span></span><br><span class="line">    current = head;</span><br><span class="line">    head = head-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  x = current-&gt;entry;<span class="comment">//x带出要删除节点的值</span></span><br><span class="line">  <span class="keyword">delete</span> current;<span class="comment">//通过delete删除节点</span></span><br><span class="line">  count--;</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; Error_code List1&lt;List_entry&gt;::<span class="built_in">retrieve</span>(<span class="type">int</span> position,List_entry&amp; x) <span class="type">const</span> &#123;</span><br><span class="line">  Node&lt;List_entry&gt;* current;</span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= count) <span class="keyword">return</span> range_errors;<span class="comment">//position位置是否合法</span></span><br><span class="line">  current = <span class="built_in">set_position</span>(position);<span class="comment">//通过set_position拿到当前节点</span></span><br><span class="line">  x = current-&gt;entry;</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; Error_code List1&lt;List_entry&gt;::<span class="built_in">replace</span>(<span class="type">int</span> position, <span class="type">const</span> List_entry&amp; x) &#123;</span><br><span class="line">  Node&lt;List_entry&gt;* current;</span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= count) <span class="keyword">return</span> range_errors;</span><br><span class="line">  current = <span class="built_in">set_position</span>(position);</span><br><span class="line">  current-&gt;entry = x;</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt; List1&lt;List_entry&gt;::<span class="built_in">List1</span>(<span class="type">const</span> List1&lt;List_entry&gt;&amp; copy) &#123;<span class="comment">//拷贝构造</span></span><br><span class="line">  count = copy.count;</span><br><span class="line">  Node&lt;List_entry&gt;* new_node, * old_node = copy.head;</span><br><span class="line">  <span class="keyword">if</span> (old_node == <span class="literal">nullptr</span>) head = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    new_node = <span class="keyword">new</span> <span class="built_in">Node</span>&lt;List_entry&gt;();</span><br><span class="line">    head = new_node;</span><br><span class="line">    <span class="keyword">while</span> (old_node != <span class="literal">nullptr</span>) &#123; <span class="comment">//遍历拷贝的线性表</span></span><br><span class="line">      old_node = old_node-&gt;next;</span><br><span class="line">      new_node-&gt;next = <span class="keyword">new</span> <span class="built_in">Node</span>&lt;List_entry&gt;(old_node-&gt;entry);</span><br><span class="line">      new_node = new_node-&gt;next;<span class="comment">//new_node往后拨一个</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="type">void</span> List1&lt;List_entry&gt;::<span class="keyword">operator</span> =(<span class="type">const</span> List1&lt;List_entry&gt;&amp; copy) &#123; <span class="comment">//赋值运算符重载</span></span><br><span class="line">  List1 <span class="built_in">new_copy</span>(copy);<span class="comment">//借用拷贝构造</span></span><br><span class="line">  <span class="built_in">clear</span>();<span class="comment">//清空当前表</span></span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">  head = <span class="literal">nullptr</span>;</span><br><span class="line">  new_copy.count = copy.count;</span><br><span class="line">  new_copy.head = head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">测试main.cpp</span><br><span class="line"></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;List1.h&quot;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// test List1 mechanism</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_entry</span><span class="params">(<span class="type">char</span> &amp;c)</span> </span>&#123;</span><br><span class="line">  cout &lt;&lt; c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span> x;</span><br><span class="line">  List1&lt;<span class="type">char</span>&gt; c_list;</span><br><span class="line">  <span class="comment">// a list of characters, initialized empty</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;List is empty, it has &quot;</span> &lt;&lt; c_list.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; items.\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Enter characters and the program adds them to the list.\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Use Enter key (newline) to terminate the input.\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;When ListSize() is 3, the element will be inserted at the &quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;front of the list.\n The others will appear at the back.\n&quot;</span>;</span><br><span class="line">  <span class="keyword">while</span> (!c_list.<span class="built_in">full</span>() &amp;&amp; (x = cin.<span class="built_in">get</span>()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (c_list.<span class="built_in">size</span>() == <span class="number">3</span>) c_list.<span class="built_in">insert</span>(<span class="number">0</span>, x);</span><br><span class="line">    <span class="keyword">else</span> c_list.<span class="built_in">insert</span>(c_list.<span class="built_in">size</span>(), x);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;The list has &quot;</span> &lt;&lt; c_list.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; items.\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;The function c_list.full(), got &quot;</span> &lt;&lt; c_list.<span class="built_in">full</span>();</span><br><span class="line">  <span class="keyword">if</span> (c_list.<span class="built_in">full</span>())</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; because the list is full.\n&quot;</span>;</span><br><span class="line">  <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot; because the list is NOT full.\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;c_list.empty(), expecting 0, got &quot;</span> &lt;&lt; c_list.<span class="built_in">empty</span>() &lt;&lt; <span class="string">&quot;.\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;c_list.traverse(write_entry) output: &quot;</span>; c_list.<span class="built_in">traverse</span>(write_entry);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;\n&quot;</span>; c_list.<span class="built_in">clear</span>();</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Cleared the list, printing its contents:\n&quot;</span>;</span><br><span class="line">  c_list.<span class="built_in">traverse</span>(write_entry);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;\n&quot;</span>; cout &lt;&lt; <span class="string">&quot;Enter characters and the program adds them to the list.\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Use Enter key (newline) to terminate the input.\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;When ListSize() is &lt; 3, the element will be inserted at the &quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;front of the list.\n The others will appear at the back.\n&quot;</span>;</span><br><span class="line">  <span class="keyword">while</span> (!c_list.<span class="built_in">full</span>() &amp;&amp; (x = cin.<span class="built_in">get</span>()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (c_list.<span class="built_in">size</span>() &lt; <span class="number">3</span>) c_list.<span class="built_in">insert</span>(<span class="number">0</span>, x);</span><br><span class="line">    <span class="keyword">else</span> c_list.<span class="built_in">insert</span>(c_list.<span class="built_in">size</span>(), x);</span><br><span class="line">  c_list.<span class="built_in">traverse</span>(write_entry);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实验2-基于静态链表实现线性表-List2-的典型操作"><a href="#实验2-基于静态链表实现线性表-List2-的典型操作" class="headerlink" title="实验2. 基于静态链表实现线性表 List2 的典型操作"></a>实验2. 基于静态链表实现线性表 List2 的典型操作</h4><p>Node2.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;utility.h&quot;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> index;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> max_list = <span class="number">10</span>; <span class="comment">//  small value for testing purposes</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node2</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  List_entry entry;<span class="comment">//数据</span></span><br><span class="line">  index next;<span class="comment">//next  表示数组的下标</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>List2.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List2</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">List2</span>();</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">//大小</span></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">//判满</span></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">//判空</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;<span class="comment">//清空</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">void</span> (*visit)(List_entry&amp;))</span></span>;<span class="comment">//遍历</span></span><br><span class="line">  <span class="function">Error_code <span class="title">retrieve</span><span class="params">(<span class="type">int</span> position, List_entry&amp; x)</span> <span class="type">const</span></span>;<span class="comment">//访问position的值，通过x把值带出来</span></span><br><span class="line">  <span class="function">Error_code <span class="title">replace</span><span class="params">(<span class="type">int</span> position, <span class="type">const</span> List_entry&amp; x)</span></span>;<span class="comment">//替换position位置的值设为x</span></span><br><span class="line">  <span class="function">Error_code <span class="title">remove</span><span class="params">(<span class="type">int</span> position, List_entry&amp; x)</span></span>;<span class="comment">//移除position位置的值,用x带出来</span></span><br><span class="line">  <span class="function">Error_code <span class="title">insert</span><span class="params">(<span class="type">int</span> position, <span class="type">const</span> List_entry&amp; x)</span></span>;<span class="comment">//把x插入到position位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  Node2&lt;List_entry&gt; workspace[max_list];<span class="comment">//用数组实现静态链表</span></span><br><span class="line">  index available, <span class="comment">//可用空间的表头节点</span></span><br><span class="line">    last_used, <span class="comment">//上一次使用的空间  来做标记</span></span><br><span class="line">    head;<span class="comment">//头节点</span></span><br><span class="line">  <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//辅助方法</span></span><br><span class="line">  <span class="function">index <span class="title">new_node</span><span class="params">()</span></span>;<span class="comment">//创建一个空间</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">delete_node</span><span class="params">(index old_index)</span></span>;<span class="comment">//释放空间，连接到available表</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">current_position</span><span class="params">(index n)</span> <span class="type">const</span></span>;<span class="comment">//根据值获取当前的下标</span></span><br><span class="line">  <span class="function">index <span class="title">set_position</span><span class="params">(<span class="type">int</span> position)</span> <span class="type">const</span></span>;<span class="comment">//根据下标，获得当前的值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">List2.cpp</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line">index List2&lt;List_entry&gt;::<span class="built_in">new_node</span>()&#123;</span><br><span class="line">  index new_index;</span><br><span class="line">  <span class="comment">//因为是数组下标 用-1代替nullptr</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   \* 1. 先看available有没有空间可以用</span></span><br><span class="line"><span class="comment">   \* 2. available表没空间了，看能不能新建</span></span><br><span class="line"><span class="comment">   \* */</span></span><br><span class="line">  <span class="keyword">if</span> (available != <span class="number">-1</span>) &#123; <span class="comment">//available有空间可以用</span></span><br><span class="line">    new_index = available;<span class="comment">//available把头节点给new_node</span></span><br><span class="line">    available = workspace[available].next;<span class="comment">//自己跳到下一个节点</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (last_used &lt; max_list - <span class="number">1</span>) &#123; <span class="comment">//available表没有空间可以用  链表的容量没超过最大容量</span></span><br><span class="line">    new_index = ++last_used;<span class="comment">//新建</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//如果方式1、2都没有新建成功，返回-1表示失败</span></span><br><span class="line">  workspace[new_index].next = <span class="number">-1</span>;<span class="comment">//新节点的next域置空</span></span><br><span class="line">  <span class="keyword">return</span> new_index;<span class="comment">//成功的话 返回新节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="type">void</span> List2&lt;List_entry&gt;::<span class="built_in">delete_node</span>(index old_index) &#123;</span><br><span class="line">  index previous;</span><br><span class="line">  <span class="keyword">if</span> (old_index == head) <span class="comment">//删头节点 让head为原来头结点的next</span></span><br><span class="line">    head = workspace[old_index].next;</span><br><span class="line">  <span class="keyword">else</span> &#123; <span class="comment">//删除的其他节点</span></span><br><span class="line">    previous = <span class="built_in">set_position</span>(<span class="built_in">current_position</span>(old_index) - <span class="number">1</span>);<span class="comment">//通过set_position拿到前驱节点</span></span><br><span class="line">    workspace[previous].next = workspace[old_index].next;<span class="comment">//让前驱节点等于待删节点的后继</span></span><br><span class="line">  &#125;</span><br><span class="line">  workspace[old_index].next = available;<span class="comment">//通过头插的方式把节点添加在available表中</span></span><br><span class="line">  available = old_index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line">List2&lt;List_entry&gt;::<span class="built_in">List2</span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//初始化</span></span><br><span class="line">  <span class="comment">//都假定为空 -1</span></span><br><span class="line">  available = <span class="number">-1</span>;</span><br><span class="line">  last_used = <span class="number">-1</span>;</span><br><span class="line">  head = <span class="number">-1</span>;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="type">int</span> List2&lt;List_entry&gt;::<span class="built_in">size</span>() <span class="type">const</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="type">bool</span> List2&lt;List_entry&gt;::<span class="built_in">full</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> count &gt; max_list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="type">bool</span> List2&lt;List_entry&gt;::<span class="built_in">empty</span>() <span class="type">const</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="type">void</span> List2&lt;List_entry&gt;::<span class="built_in">traverse</span>(<span class="built_in">void</span> (*visit)(List_entry&amp;)) &#123;</span><br><span class="line">  <span class="comment">//遍历链表</span></span><br><span class="line">  <span class="keyword">for</span> (index n = head; n != <span class="number">-1</span>; n = workspace[n].next)<span class="comment">//n != -1   n != nullptr</span></span><br><span class="line">    (*visit)(workspace[n].entry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line">Error_code List2&lt;List_entry&gt;::<span class="built_in">insert</span>(<span class="type">int</span> position, <span class="type">const</span> List_entry&amp; x) &#123;</span><br><span class="line">  index new_index, previous, following;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断position位置是否合法</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; count) <span class="keyword">return</span> range_errors;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//不是头插</span></span><br><span class="line">  <span class="keyword">if</span> (position &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//找到前驱节点 和 后继节点</span></span><br><span class="line">    previous = <span class="built_in">set_position</span>(position - <span class="number">1</span>);</span><br><span class="line">    following = workspace[previous].next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//头插  后继就是头节点</span></span><br><span class="line">  <span class="keyword">else</span> following = head;</span><br><span class="line">  <span class="keyword">if</span> ((new_index = <span class="built_in">new_node</span>()) == <span class="number">-1</span>) <span class="keyword">return</span> overflow;<span class="comment">//新建节点</span></span><br><span class="line">  workspace[new_index].entry = x;</span><br><span class="line">  workspace[new_index].next = following;<span class="comment">//next域为他的后继</span></span><br><span class="line">  <span class="keyword">if</span> (position == <span class="number">0</span>) <span class="comment">//如果是头插 新的头节点就是new_node</span></span><br><span class="line">    head = new_index;</span><br><span class="line">  <span class="keyword">else</span> <span class="comment">//不是头插的话 处理他的前驱节点</span></span><br><span class="line">    workspace[previous].next = new_index;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line">index List2&lt;List_entry&gt;::<span class="built_in">set_position</span>(<span class="type">int</span> position) <span class="type">const</span> &#123; <span class="comment">//根据下标，获得当前的值</span></span><br><span class="line">  <span class="comment">//Node2&lt;List_entry&gt; p;</span></span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (!(position&lt;<span class="number">0</span> || position&gt;max_list)) &#123;</span><br><span class="line">    <span class="comment">//遍历position次 拿到position的节点</span></span><br><span class="line">    <span class="keyword">for</span> (i = head; cnt &lt; position; cnt++, i = workspace[i].next);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="type">int</span> List2&lt;List_entry&gt;::<span class="built_in">current_position</span>(index n) <span class="type">const</span> &#123; <span class="comment">//根据节点 来获取下标</span></span><br><span class="line">  <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = head; i != n; cnt++, i = workspace[i].next);</span><br><span class="line">  <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line">Error_code List2&lt;List_entry&gt;::<span class="built_in">retrieve</span>(<span class="type">int</span> position, List_entry&amp; x) <span class="type">const</span> &#123; <span class="comment">//访问position位置的值，通过x带出来</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; count) <span class="keyword">return</span> range_errors;<span class="comment">//判断position位置合不合法</span></span><br><span class="line">  <span class="type">int</span> cnt = <span class="number">0</span>, i;</span><br><span class="line">  <span class="keyword">for</span> (i = head; cnt != position; cnt++, i = workspace[i].next);<span class="comment">//遍历的方式找到position位置</span></span><br><span class="line">  x = workspace[i].entry;</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line">Error_code List2&lt;List_entry&gt;::<span class="built_in">remove</span>(<span class="type">int</span> position, List_entry&amp; x) &#123; <span class="comment">//析出position位置的节点</span></span><br><span class="line">  x = workspace[<span class="built_in">set_position</span>(position)].entry;<span class="comment">//set_position找到节点</span></span><br><span class="line">  <span class="built_in">delete_node</span>(<span class="built_in">set_position</span>(position));<span class="comment">//set_position找到节点 delete_node进行删除</span></span><br><span class="line">  count--;</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line"><span class="type">void</span> List2&lt;List_entry&gt;::<span class="built_in">clear</span>()</span><br><span class="line">&#123;</span><br><span class="line">  index p, q;</span><br><span class="line">  <span class="keyword">for</span> (p = head; p != <span class="number">-1</span>; p = workspace[p].next) &#123; <span class="comment">//遍历链表 对每一个节点进行delete_node</span></span><br><span class="line">    q = p;</span><br><span class="line">    <span class="built_in">delete_node</span>(p);</span><br><span class="line">  &#125;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">  head = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">List_entry</span>&gt;</span><br><span class="line">Error_code List2&lt;List_entry&gt;::<span class="built_in">replace</span>(<span class="type">int</span> position, <span class="type">const</span> List_entry &amp;x) &#123;</span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; count) <span class="keyword">return</span> range_errors;<span class="comment">//判断下标合不合法</span></span><br><span class="line">  workspace[<span class="built_in">set_position</span>(position)].entry = x;<span class="comment">//set_position找到position位置的节点 替换值</span></span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Main.cpp</span><br><span class="line"></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;List2.h&quot;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// test List2 mechanism</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_entry</span><span class="params">(<span class="type">char</span> &amp;c)</span> </span>&#123;</span><br><span class="line">  cout &lt;&lt; c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span> x;</span><br><span class="line">  List2&lt;<span class="type">char</span>&gt; c_list;</span><br><span class="line">  <span class="comment">// a list of characters, initialized empty</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;List is empty, it has &quot;</span> &lt;&lt; c_list.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; items.\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Enter characters and the program adds them to the list.\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Use Enter key (newline) to terminate the input.\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;When ListSize() is 3, the element will be inserted at the &quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;front of the list.\n The others will appear at the back.\n&quot;</span>;</span><br><span class="line">  <span class="keyword">while</span> (!c_list.<span class="built_in">full</span>() &amp;&amp; (x = cin.<span class="built_in">get</span>()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (c_list.<span class="built_in">size</span>() == <span class="number">3</span>) c_list.<span class="built_in">insert</span>(<span class="number">0</span>, x);</span><br><span class="line">    <span class="keyword">else</span> c_list.<span class="built_in">insert</span>(c_list.<span class="built_in">size</span>(), x);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;The list has &quot;</span> &lt;&lt; c_list.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; items.\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;The function c_list.full(), got &quot;</span> &lt;&lt; c_list.<span class="built_in">full</span>();</span><br><span class="line">  <span class="keyword">if</span> (c_list.<span class="built_in">full</span>())</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; because the list is full.\n&quot;</span>;</span><br><span class="line">  <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot; because the list is NOT full.\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;c_list.empty(), expecting 0, got &quot;</span> &lt;&lt; c_list.<span class="built_in">empty</span>() &lt;&lt; <span class="string">&quot;.\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;c_list.traverse(write_entry) output: &quot;</span>; c_list.<span class="built_in">traverse</span>(write_entry);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;\n&quot;</span>; c_list.<span class="built_in">clear</span>();</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Cleared the list, printing its contents:\n&quot;</span>;</span><br><span class="line">  c_list.<span class="built_in">traverse</span>(write_entry);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;\n&quot;</span>; cout &lt;&lt; <span class="string">&quot;Enter characters and the program adds them to the list.\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Use Enter key (newline) to terminate the input.\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;When ListSize() is &lt; 3, the element will be inserted at the &quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;front of the list.\n The others will appear at the back.\n&quot;</span>;</span><br><span class="line">  <span class="keyword">while</span> (!c_list.<span class="built_in">full</span>() &amp;&amp; (x = cin.<span class="built_in">get</span>()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (c_list.<span class="built_in">size</span>() &lt; <span class="number">3</span>) c_list.<span class="built_in">insert</span>(<span class="number">0</span>, x);</span><br><span class="line">    <span class="keyword">else</span> c_list.<span class="built_in">insert</span>(c_list.<span class="built_in">size</span>(), x);</span><br><span class="line">  c_list.<span class="built_in">traverse</span>(write_entry);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h4 id="实验3-基于线性表-List1、线性表-List2-实现线性表的应用：运动会信息管理"><a href="#实验3-基于线性表-List1、线性表-List2-实现线性表的应用：运动会信息管理" class="headerlink" title="实验3. 基于线性表 List1、线性表 List2 实现线性表的应用：运动会信息管理"></a>实验3. 基于线性表 List1、线性表 List2 实现线性表的应用：运动会信息管理</h4><p>E3.h(包含所需要的3个类和相关的函数)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by huangruidong on 2022/6/19.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">\<span class="meta">#<span class="keyword">ifndef</span> NEWDATASTRUCT_E3_H</span></span><br><span class="line">\<span class="meta">#<span class="keyword">define</span> NEWDATASTRUCT_E3_H</span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vector&quot;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;List1.h&quot;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;List2.h&quot;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Match</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  string call;  <span class="comment">//比赛项目名称</span></span><br><span class="line">  <span class="type">int</span> number;  <span class="comment">//比赛项目编号</span></span><br><span class="line">  string sex; <span class="comment">//比赛性别</span></span><br><span class="line">  string date;<span class="comment">//比赛的日期</span></span><br><span class="line">  string time;<span class="comment">//比赛时间</span></span><br><span class="line">  <span class="type">int</span> num;<span class="comment">//人数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//无参构造</span></span><br><span class="line">  <span class="built_in">Match</span>()&#123;&#125;;</span><br><span class="line">  <span class="comment">//有参构造</span></span><br><span class="line">  <span class="built_in">Match</span>(<span class="type">const</span> string &amp;call, <span class="type">int</span> number, <span class="type">const</span> string &amp;sex, <span class="type">const</span> string &amp;date, <span class="type">const</span> string &amp;time, <span class="type">int</span> num) : <span class="built_in">call</span>(</span><br><span class="line">      call), <span class="built_in">number</span>(number), <span class="built_in">sex</span>(sex), <span class="built_in">date</span>(date), <span class="built_in">time</span>(time), <span class="built_in">num</span>(num) &#123;&#125;;</span><br><span class="line">  <span class="comment">//get set方法</span></span><br><span class="line">  <span class="function"><span class="type">const</span> string &amp;<span class="title">getCall</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> call;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setCall</span><span class="params">(<span class="type">const</span> string &amp;call)</span> </span>&#123;</span><br><span class="line">    Match::call = call;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getNumber</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setNumber</span><span class="params">(<span class="type">int</span> number)</span> </span>&#123;</span><br><span class="line">    Match::number = number;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">const</span> string &amp;<span class="title">getSex</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setSex</span><span class="params">(<span class="type">const</span> string &amp;sex)</span> </span>&#123;</span><br><span class="line">    Match::sex = sex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">const</span> string &amp;<span class="title">getDate</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setDate</span><span class="params">(<span class="type">const</span> string &amp;date)</span> </span>&#123;</span><br><span class="line">    Match::date = date;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">const</span> string &amp;<span class="title">getTime</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> time;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setTime</span><span class="params">(<span class="type">const</span> string &amp;time)</span> </span>&#123;</span><br><span class="line">    Match::time = time;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getNum</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setNum</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    Match::num = num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//赋值运算符重载</span></span><br><span class="line">  Match <span class="keyword">operator</span> = (<span class="type">const</span> Match&amp; copy) &#123;</span><br><span class="line">    call = copy.call;</span><br><span class="line">    number = copy.number;</span><br><span class="line">    sex = copy.sex;</span><br><span class="line">    date = copy.date;</span><br><span class="line">    time = copy.time;</span><br><span class="line">    num = copy.num;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">List1&lt;Match&gt; matchs;<span class="comment">//用List1存储比赛项目</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setMatch</span><span class="params">()</span> <span class="comment">//新建项目</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;D:\\比赛项目.txt&quot;</span>,ios::app)</span></span>;</span><br><span class="line">  <span class="type">char</span> ch;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123; cout&lt;&lt;<span class="string">&quot;请分别输入比赛项目名称、编号（假设为 6 位数字）、参与该项目的运动员性别、比赛 日期、比赛时间、比赛人数.&quot;</span>&lt;&lt;endl;</span><br><span class="line">    string call;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    string sex;</span><br><span class="line">    string date;</span><br><span class="line">    string time;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    cin&gt;&gt;call&gt;&gt;number&gt;&gt;sex&gt;&gt;date&gt;&gt;time&gt;&gt;num;<span class="comment">//输入相关属性</span></span><br><span class="line">    Match temp = <span class="built_in">Match</span>(call,number,sex,date,time,num);<span class="comment">//创建一个temp临时变量</span></span><br><span class="line">    matchs.<span class="built_in">insert</span>(<span class="number">0</span>,temp);<span class="comment">//头插在链表中</span></span><br><span class="line"></span><br><span class="line">​    fout.<span class="built_in">write</span>((<span class="type">char</span> *)&amp;temp,<span class="built_in">sizeof</span>(Match));<span class="comment">//写入文件流</span></span><br><span class="line">​    cout&lt;&lt;<span class="string">&quot;是否继续输入，如果继续键入Y|y&quot;</span>&lt;&lt;endl;</span><br><span class="line">​    cin&gt;&gt;ch;</span><br><span class="line">  &#125;<span class="keyword">while</span>(ch==<span class="string">&#x27;y&#x27;</span>||ch==<span class="string">&#x27;Y&#x27;</span>);</span><br><span class="line">  fout.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">changeMatch</span><span class="params">()</span>  <span class="comment">//修改一个项目</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;您正在进行修改比赛项目有关事项操作!&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;请输入要修改比赛项目的编号:&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="type">int</span> number1;    <span class="comment">//要修改的比赛项目编号</span></span><br><span class="line">  <span class="type">int</span> sign=<span class="number">0</span>;     <span class="comment">//设置的标记变量</span></span><br><span class="line">  cin&gt;&gt;number1;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; matchs.<span class="built_in">size</span>(); i++) &#123; <span class="comment">//遍历表 找指定的项目编号</span></span><br><span class="line">    Match temp;</span><br><span class="line">    matchs.<span class="built_in">retrieve</span>(i,temp);</span><br><span class="line">    <span class="keyword">if</span> (number1 == temp.<span class="built_in">getNumber</span>())&#123;</span><br><span class="line">      sign = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//没找到的话 输出信息提示</span></span><br><span class="line">  <span class="keyword">if</span> (sign==<span class="number">0</span>)</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;没有找到要修改的记录！&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">else</span> <span class="comment">//找到了项目</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请选择要修改比赛项目的那些信息&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改比赛项目的名称----1&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改比赛项目的编号----2&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改比赛项目的性别----3&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改比赛日期----4&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改比赛时间----5&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改比赛人数----6&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入对应信息的编号&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    <span class="keyword">switch</span>(a) <span class="comment">//switch case 控制修改的那一部分</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的比赛项目名称:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string name;</span><br><span class="line">        cin&gt;&gt;name;</span><br><span class="line">        Match temp;</span><br><span class="line">        matchs.<span class="built_in">retrieve</span>(i,temp);<span class="comment">//通过上次标记的i 拿出来找到的项目</span></span><br><span class="line">        temp.<span class="built_in">setCall</span>(name);<span class="comment">//修改项目姓名</span></span><br><span class="line">        matchs.<span class="built_in">replace</span>(i,temp);<span class="comment">//对表中的数据进行替换</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;比赛项目名称修改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入新的比赛编号:&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="type">int</span> number;</span><br><span class="line">        cin&gt;&gt;number;</span><br><span class="line">        Match match;</span><br><span class="line">        matchs.<span class="built_in">remove</span>(i,match);</span><br><span class="line">        match.<span class="built_in">setNumber</span>(number);</span><br><span class="line">        matchs.<span class="built_in">insert</span>(i,match);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;比赛项目编号修改成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的参赛选手性别:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string sex;</span><br><span class="line">        cin&gt;&gt;sex;</span><br><span class="line">        Match match;</span><br><span class="line">        matchs.<span class="built_in">remove</span>(i,match);</span><br><span class="line">        match.<span class="built_in">setSex</span>(sex);</span><br><span class="line">        matchs.<span class="built_in">insert</span>(i,match);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;参赛选手性别修改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的日期:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string date;</span><br><span class="line">        cin&gt;&gt;date;</span><br><span class="line">        Match match;</span><br><span class="line">        matchs.<span class="built_in">remove</span>(i,match);</span><br><span class="line">        match.<span class="built_in">setDate</span>(date);</span><br><span class="line">        matchs.<span class="built_in">insert</span>(i,match);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;比赛日期修改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的比赛时间:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string time;</span><br><span class="line">        cin&gt;&gt;time;</span><br><span class="line">        Match match;</span><br><span class="line">        matchs.<span class="built_in">remove</span>(i,match);</span><br><span class="line">        match.<span class="built_in">setDate</span>(time);</span><br><span class="line">        matchs.<span class="built_in">insert</span>(i,match);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;比赛时间修改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的参赛人数:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        cin&gt;&gt;num;</span><br><span class="line">        Match match;</span><br><span class="line">        matchs.<span class="built_in">remove</span>(i,match);</span><br><span class="line">        match.<span class="built_in">setNum</span>(num);</span><br><span class="line">        matchs.<span class="built_in">insert</span>(i,match);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;参赛人数修改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteMatch</span><span class="params">()</span>  <span class="comment">//删除一个项目</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;------根据比赛项目的编号删除----1&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;------根据比赛项目的名称删除----2&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  <span class="keyword">switch</span>(n) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;请输入要删除的比赛编号&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="type">int</span> number;</span><br><span class="line">      cin &gt;&gt; number;</span><br><span class="line">      Match temp;</span><br><span class="line">      <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="type">bool</span> isFind = <span class="literal">false</span>;<span class="comment">//标记</span></span><br><span class="line">      <span class="keyword">for</span> (; i &lt; matchs.<span class="built_in">size</span>(); i++) &#123; <span class="comment">//遍历整个表 如果找到 就通过remove进行删除</span></span><br><span class="line">        matchs.<span class="built_in">retrieve</span>(i, temp);</span><br><span class="line">        <span class="keyword">if</span> (temp.<span class="built_in">getNumber</span>() == number) &#123;</span><br><span class="line">          cout &lt;&lt; <span class="string">&quot;找到信息&quot;</span> &lt;&lt; endl;</span><br><span class="line">          matchs.<span class="built_in">remove</span>(i, temp);</span><br><span class="line">          cout &lt;&lt; <span class="string">&quot;删除成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">          isFind = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//没找到的话 输出信息提示</span></span><br><span class="line">      <span class="keyword">if</span> (!isFind) cout &lt;&lt; <span class="string">&quot;未找到该项目&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;请输入要删除的比赛名称&quot;</span> &lt;&lt; endl;</span><br><span class="line">      string name;</span><br><span class="line">      cin &gt;&gt; name;</span><br><span class="line">      Match temp;</span><br><span class="line">      <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="type">bool</span> isFind = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">for</span> (; i &lt; matchs.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        matchs.<span class="built_in">retrieve</span>(i, temp);</span><br><span class="line">        <span class="keyword">if</span> (temp.<span class="built_in">getCall</span>() == name) &#123;</span><br><span class="line">          cout &lt;&lt; <span class="string">&quot;找到信息&quot;</span> &lt;&lt; endl;</span><br><span class="line">          matchs.<span class="built_in">remove</span>(i, temp);</span><br><span class="line">          cout &lt;&lt; <span class="string">&quot;删除成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">          isFind = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//没找到的话 输出信息提示</span></span><br><span class="line">      <span class="keyword">if</span> (!isFind) cout &lt;&lt; <span class="string">&quot;未找到该项目&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectMatch</span><span class="params">()</span> <span class="comment">//查询一个项目</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;------根据比赛项目的编号查找----1&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;------根据比赛项目的名称查找----2&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  <span class="keyword">switch</span>(n) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;请输入要查找的比赛编号&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="type">int</span> number;</span><br><span class="line">      cin &gt;&gt; number;</span><br><span class="line">      Match temp;</span><br><span class="line">      <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="type">bool</span> isFind = <span class="literal">false</span>;<span class="comment">//标志位</span></span><br><span class="line">      <span class="keyword">for</span> (; i &lt; matchs.<span class="built_in">size</span>(); i++) &#123; <span class="comment">//遍历整张表 如果找到 让标志位设为true</span></span><br><span class="line">        matchs.<span class="built_in">retrieve</span>(i, temp);</span><br><span class="line">        <span class="keyword">if</span> (temp.<span class="built_in">getNumber</span>() == number) &#123; <span class="comment">//找到信息的话 就把相关的信息进行输出</span></span><br><span class="line">          cout &lt;&lt; <span class="string">&quot;找到信息：&quot;</span> &lt;&lt; endl;</span><br><span class="line">          cout&lt;&lt;temp.<span class="built_in">getNumber</span>()&lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt;temp.<span class="built_in">getCall</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;temp.<span class="built_in">getSex</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;temp.<span class="built_in">getDate</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;temp.<span class="built_in">getTime</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;temp.<span class="built_in">getNum</span>()&lt;&lt;endl;</span><br><span class="line">          isFind = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//没找到的话 输出信息提示</span></span><br><span class="line">      <span class="keyword">if</span> (!isFind) cout &lt;&lt; <span class="string">&quot;未找到该项目&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;请输入要删除的比赛名称&quot;</span> &lt;&lt; endl;</span><br><span class="line">      string name;</span><br><span class="line">      cin &gt;&gt; name;</span><br><span class="line">      Match temp;</span><br><span class="line">      <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="type">bool</span> isFind = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">for</span> (; i &lt; matchs.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        matchs.<span class="built_in">retrieve</span>(i, temp);</span><br><span class="line">        <span class="keyword">if</span> (temp.<span class="built_in">getCall</span>() == name) &#123;</span><br><span class="line">          cout &lt;&lt; <span class="string">&quot;找到信息：&quot;</span> &lt;&lt; endl;</span><br><span class="line">          cout&lt;&lt;temp.<span class="built_in">getNumber</span>()&lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt;temp.<span class="built_in">getCall</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;temp.<span class="built_in">getSex</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;temp.<span class="built_in">getDate</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;temp.<span class="built_in">getTime</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;temp.<span class="built_in">getNum</span>()&lt;&lt;endl;</span><br><span class="line">          isFind = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!isFind) cout &lt;&lt; <span class="string">&quot;未找到该项目&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Athlete</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  string name;<span class="comment">//姓名</span></span><br><span class="line">  string id;<span class="comment">//学号</span></span><br><span class="line">  string sex;<span class="comment">//性别</span></span><br><span class="line">  string college;<span class="comment">//学院</span></span><br><span class="line">  string matchId;<span class="comment">//参加的比赛编号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//项目编号</span></span><br><span class="line">  <span class="type">bool</span> isText;<span class="comment">//是否检录</span></span><br><span class="line">  string score;<span class="comment">//参赛成绩</span></span><br><span class="line">  <span class="type">int</span> rank;<span class="comment">//排名</span></span><br><span class="line">  <span class="type">int</span> grade;<span class="comment">//级别分数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//有参构造</span></span><br><span class="line">  <span class="built_in">Athlete</span>( string &amp;name,  string &amp;id,  string &amp;sex,  string &amp;college,  string &amp;matchId,</span><br><span class="line">      <span class="type">bool</span> isText,  string &amp;score, <span class="type">int</span> rank, <span class="type">int</span> grade) : <span class="built_in">name</span>(name), <span class="built_in">id</span>(id), <span class="built_in">sex</span>(sex), <span class="built_in">college</span>(college),</span><br><span class="line">                                   <span class="built_in">matchId</span>(matchId), <span class="built_in">isText</span>(isText), <span class="built_in">score</span>(score),</span><br><span class="line">                                   <span class="built_in">rank</span>(rank), <span class="built_in">grade</span>(grade) &#123;&#125;;</span><br><span class="line">  <span class="comment">//赋值运算符重载</span></span><br><span class="line">  Athlete <span class="keyword">operator</span> = (<span class="type">const</span> Athlete&amp; copy)&#123;</span><br><span class="line">    name = copy.name;</span><br><span class="line">    id = copy.id;</span><br><span class="line">    sex = copy.sex;</span><br><span class="line">    college = copy.college;</span><br><span class="line">    matchId = copy.matchId;</span><br><span class="line">    isText = copy.isText;</span><br><span class="line">    score = copy.score;</span><br><span class="line">    rank = copy.rank;</span><br><span class="line">    grade = copy.grade;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//重写的有参构造</span></span><br><span class="line">  <span class="built_in">Athlete</span>(<span class="type">const</span> string &amp;name, <span class="type">const</span> string &amp;id, <span class="type">const</span> string &amp;sex, <span class="type">const</span> string &amp;college, <span class="type">const</span> string &amp;matchId)</span><br><span class="line">      : <span class="built_in">name</span>(name), <span class="built_in">id</span>(id), <span class="built_in">sex</span>(sex), <span class="built_in">college</span>(college), <span class="built_in">matchId</span>(matchId) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//拷贝构造</span></span><br><span class="line">  <span class="built_in">Athlete</span>(Athlete <span class="type">const</span> &amp;a2) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;name = a2.name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;id = a2.id;</span><br><span class="line">    <span class="keyword">this</span>-&gt;sex = a2.sex;</span><br><span class="line">    <span class="keyword">this</span>-&gt;college = a2.college;</span><br><span class="line">    <span class="keyword">this</span>-&gt;isText = a2.isText;</span><br><span class="line">    <span class="keyword">this</span>-&gt;score = a2.score;</span><br><span class="line">    <span class="keyword">this</span>-&gt;rank = a2.rank;</span><br><span class="line">    <span class="keyword">this</span>-&gt;grade = a2.grade;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//get set方法</span></span><br><span class="line">  <span class="function"><span class="type">const</span> string &amp;<span class="title">getName</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(<span class="type">const</span> string &amp;name)</span> </span>&#123;</span><br><span class="line">    Athlete::name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">const</span> string &amp;<span class="title">getId</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setId</span><span class="params">(<span class="type">const</span> string &amp;id)</span> </span>&#123;</span><br><span class="line">    Athlete::id = id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">const</span> string &amp;<span class="title">getSex</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setSex</span><span class="params">(<span class="type">const</span> string &amp;sex)</span> </span>&#123;</span><br><span class="line">    Athlete::sex = sex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">const</span> string &amp;<span class="title">getCollege</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> college;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setCollege</span><span class="params">(<span class="type">const</span> string &amp;college)</span> </span>&#123;</span><br><span class="line">    Athlete::college = college;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">const</span> string &amp;<span class="title">getMatchId</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> matchId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setMatchId</span><span class="params">(<span class="type">const</span> string &amp;matchId)</span> </span>&#123;</span><br><span class="line">    Athlete::matchId = matchId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">isText1</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isText;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setIsText</span><span class="params">(<span class="type">bool</span> isText)</span> </span>&#123;</span><br><span class="line">    Athlete::isText = isText;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">string <span class="title">getScore</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> score;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setScore</span><span class="params">(string score)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;score = <span class="string">&quot;&quot;</span>+score;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getRank</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rank;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//计算分数</span></span><br><span class="line">  <span class="comment">//rank 获得几等奖  对应的分数grade就是多少</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setRank</span><span class="params">(<span class="type">int</span> rank)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;rank = rank;</span><br><span class="line">    <span class="keyword">if</span> (rank == <span class="number">1</span>) <span class="keyword">this</span>-&gt;grade = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (rank == <span class="number">2</span>) <span class="keyword">this</span>-&gt;grade = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (rank == <span class="number">3</span>) <span class="keyword">this</span>-&gt;grade = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">this</span>-&gt;grade = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getGrade</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> grade;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//无参构造</span></span><br><span class="line">  <span class="built_in">Athlete</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Athlete</span>(<span class="type">const</span> Node2&lt;<span class="keyword">struct</span> Athlete&gt; node2);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态链表实现的线性表存储运动员</span></span><br><span class="line">List2&lt;Athlete&gt; athletes;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inputAthlete</span><span class="params">()</span><span class="comment">//创建运动员</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;d:\\运动员.txt&quot;</span>,ios::app)</span></span>;<span class="comment">//打开文件</span></span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="type">char</span> ch;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;  cout&lt;&lt;<span class="string">&quot;请分别输入运动员姓名，学号，性别，学院，参加的项目标号&quot;</span>&lt;&lt;endl;</span><br><span class="line">    string name;</span><br><span class="line">    string id;</span><br><span class="line">    string sex;</span><br><span class="line">    string college;</span><br><span class="line">    string matchId;</span><br><span class="line">    cin&gt;&gt;name&gt;&gt;id&gt;&gt;sex&gt;&gt;college&gt;&gt;matchId;<span class="comment">//输入相关信息</span></span><br><span class="line">    <span class="function">Athlete <span class="title">temp</span><span class="params">(name,id,sex,college,matchId)</span></span>;<span class="comment">//创建temp对象</span></span><br><span class="line">    athletes.<span class="built_in">insert</span>(i,temp);<span class="comment">//插入到线性表中</span></span><br><span class="line">    fout.<span class="built_in">write</span>((<span class="type">char</span> *)&amp;temp,<span class="built_in">sizeof</span>(Athlete));<span class="comment">//写入文件</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;是否继续输入，如果继续键入Y|y&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;ch;</span><br><span class="line">  &#125;<span class="keyword">while</span>(ch==<span class="string">&#x27;y&#x27;</span>||ch==<span class="string">&#x27;Y&#x27;</span>);</span><br><span class="line">  fout.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">deleteAthlete</span><span class="params">()</span><span class="comment">//撤销报名 （删除运动员）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//只有学号是唯一的，所以根据学号来撤销报名</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;请输入被撤销报名的运动员的学号&quot;</span>&lt;&lt;endl;</span><br><span class="line">  string id;</span><br><span class="line">  cin&gt;&gt;id;</span><br><span class="line">  Athlete temp;</span><br><span class="line">  <span class="type">bool</span> flag =<span class="literal">false</span>;<span class="comment">//标志位</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; athletes.<span class="built_in">size</span>(); i++) &#123; <span class="comment">//遍历表 来寻找</span></span><br><span class="line">    athletes.<span class="built_in">retrieve</span>(i,temp);</span><br><span class="line">    <span class="keyword">if</span> (temp.<span class="built_in">getId</span>() == id) &#123;<span class="comment">//找到 通过remove移除</span></span><br><span class="line">      athletes.<span class="built_in">remove</span>(i,temp);</span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;删除成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//未找到运动员 输出信息进行提示</span></span><br><span class="line">  <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;未找到该运动员&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cheekAthlete</span><span class="params">()</span></span>&#123;<span class="comment">//对运动员检录</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;请输入要检录的运动员的学号&quot;</span>&lt;&lt;endl;</span><br><span class="line">  string id;</span><br><span class="line">  cin&gt;&gt;id;</span><br><span class="line">  Athlete temp;</span><br><span class="line">  <span class="type">bool</span> flag =<span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; athletes.<span class="built_in">size</span>(); i++) &#123;<span class="comment">//遍历线性表</span></span><br><span class="line">    athletes.<span class="built_in">retrieve</span>(i,temp);</span><br><span class="line">    <span class="keyword">if</span> (temp.<span class="built_in">getId</span>() == id) &#123; <span class="comment">//如果找到了</span></span><br><span class="line">      <span class="keyword">if</span> (temp.<span class="built_in">isText1</span>()) &#123; <span class="comment">//先看有没有检录过</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;已经检录过了&quot;</span>&lt;&lt;endl;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123; <span class="comment">//没检录过 检录 replace替换表的数据</span></span><br><span class="line">        temp.<span class="built_in">setIsText</span>(<span class="literal">true</span>);</span><br><span class="line">        athletes.<span class="built_in">replace</span>(i,temp);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;检录成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//没找到的话给出提示信息</span></span><br><span class="line">  <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;未找到该运动员&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loginScoreAthlete</span><span class="params">()</span></span>&#123;<span class="comment">//等级运动员的信息</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;请输入要录入分数的运动员的学号&quot;</span>&lt;&lt;endl;</span><br><span class="line">  string id;</span><br><span class="line">  cin&gt;&gt;id;</span><br><span class="line">  Athlete temp;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;请输入该运动员的成绩 和 排名&quot;</span>&lt;&lt;endl;</span><br><span class="line">  string score;</span><br><span class="line">  <span class="type">int</span> rank;</span><br><span class="line">  cin&gt;&gt;score;<span class="comment">//成绩</span></span><br><span class="line">  cin&gt;&gt;rank;<span class="comment">//排名</span></span><br><span class="line">  <span class="type">bool</span> flag =<span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; athletes.<span class="built_in">size</span>(); i++) &#123; <span class="comment">//遍历整个表 找到要登记成绩的学生</span></span><br><span class="line">    athletes.<span class="built_in">retrieve</span>(i,temp);</span><br><span class="line">    <span class="keyword">if</span> (temp.<span class="built_in">getId</span>() == id &amp;&amp; temp.<span class="built_in">isText1</span>()) &#123;<span class="comment">//如果id查到，并且检录过了</span></span><br><span class="line">      temp.<span class="built_in">setScore</span>(score);</span><br><span class="line">      temp.<span class="built_in">setRank</span>(rank);<span class="comment">//登记信息</span></span><br><span class="line">      athletes.<span class="built_in">replace</span>(i,temp);<span class="comment">//替换表中的数据</span></span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;成绩录入完成&quot;</span>&lt;&lt;endl;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//没找到的话给出提示信息</span></span><br><span class="line">  <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;未找到该运动员或者该运动员没有检录&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectAthlete</span><span class="params">()</span> </span>&#123; <span class="comment">//查询运动员信息</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;请输入要查询的运动员的学号&quot;</span>&lt;&lt;endl;</span><br><span class="line">  string id;</span><br><span class="line">  cin&gt;&gt;id;</span><br><span class="line">  Athlete temp;</span><br><span class="line">  <span class="type">bool</span> flag =<span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; athletes.<span class="built_in">size</span>(); i++) &#123; <span class="comment">//遍历整个表 找到指定的运动员</span></span><br><span class="line">    athletes.<span class="built_in">retrieve</span>(i,temp);</span><br><span class="line">    <span class="keyword">if</span> (temp.<span class="built_in">getId</span>() == id) &#123;</span><br><span class="line">      <span class="comment">//找到了 输出相关信息</span></span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;学号:&quot;</span>&lt;&lt;temp.<span class="built_in">getId</span>()&lt;&lt;<span class="string">&quot; 姓名：&quot;</span>&lt;&lt;temp.<span class="built_in">getName</span>()&lt;&lt; <span class="string">&quot; 性别：&quot;</span>&lt;&lt;temp.<span class="built_in">getSex</span>()&lt;&lt;<span class="string">&quot; 学院：&quot;</span>&lt;&lt;temp.<span class="built_in">getCollege</span>()</span><br><span class="line">        &lt;&lt; <span class="string">&quot; 参加的项目编号：&quot;</span>&lt;&lt;temp.<span class="built_in">getMatchId</span>()&lt;&lt;<span class="string">&quot; 是否检录：&quot;</span>&lt;&lt;temp.<span class="built_in">isText1</span>()&lt;&lt;<span class="string">&quot; 参赛成绩：&quot;</span>&lt;&lt;temp.<span class="built_in">getScore</span>()</span><br><span class="line">        &lt;&lt;<span class="string">&quot; 排名：&quot;</span>&lt;&lt;temp.<span class="built_in">getRank</span>()&lt;&lt;<span class="string">&quot; 获得的分数：&quot;</span>&lt;&lt;temp.<span class="built_in">getGrade</span>()&lt;&lt;endl;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//没找到的话给出提示信息</span></span><br><span class="line">  <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;未找到该运动员&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reviceAthlete</span><span class="params">()</span></span>&#123; <span class="comment">//修改运动员信息</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;请输入要修改的运动员的学号&quot;</span>&lt;&lt;endl;</span><br><span class="line">  string id;</span><br><span class="line">  cin&gt;&gt;id;</span><br><span class="line">  Athlete temp;</span><br><span class="line">  <span class="type">bool</span> flag =<span class="literal">false</span>;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; athletes.<span class="built_in">size</span>(); i++) &#123; <span class="comment">//找到 指定学号的运动员</span></span><br><span class="line">    athletes.<span class="built_in">retrieve</span>(i,temp);</span><br><span class="line">    <span class="keyword">if</span> (temp.<span class="built_in">getId</span>() == id) &#123;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;未找到该运动员&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请选择要修改运动员的那些信息&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改运动员的姓名----1&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改运动员的学号----2&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改运动员的性别----3&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改运动员学院----4&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;------修改运动员参赛项目编号----5&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;运动员的检录，成绩排名，分数，不予修改，请使用上一步的函数操作&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入对应信息的编号&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    <span class="keyword">switch</span>(a)&#123; <span class="comment">//运动员的检录，成绩排名，分数，不予修改</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的运动员的姓名:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string name;</span><br><span class="line">        cin&gt;&gt;name;</span><br><span class="line">        temp.<span class="built_in">setName</span>(name); <span class="comment">//输入新信息</span></span><br><span class="line">        athletes.<span class="built_in">replace</span>(i,temp);<span class="comment">//进行替换</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;运动员的姓名修改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入新的运动员的学号:&quot;</span> &lt;&lt; endl;</span><br><span class="line">        string number;</span><br><span class="line">        cin&gt;&gt;number;</span><br><span class="line">        temp.<span class="built_in">setId</span>(number);</span><br><span class="line">        athletes.<span class="built_in">replace</span>(i,temp);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;运动员的学号修改成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的运动员的性别:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string sex;</span><br><span class="line">        cin&gt;&gt;sex;</span><br><span class="line">        temp.<span class="built_in">setSex</span>(sex);</span><br><span class="line">        athletes.<span class="built_in">replace</span>(i,temp);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;运动员的性别修改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的学院:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string college;</span><br><span class="line">        cin&gt;&gt;college;</span><br><span class="line">        temp.<span class="built_in">setCollege</span>(college);</span><br><span class="line">        athletes.<span class="built_in">replace</span>(i,temp);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;运动员的学院改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入新的运动员参赛编号:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string matchId;</span><br><span class="line">        cin&gt;&gt;matchId;</span><br><span class="line">        temp.<span class="built_in">setMatchId</span>(matchId);</span><br><span class="line">        athletes.<span class="built_in">replace</span>(i,temp);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;运动员参赛编号修改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">default</span>: cout&lt;&lt;<span class="string">&quot;输入有误&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">College</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">College</span>() &#123; <span class="comment">//无参构造</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  College <span class="keyword">operator</span>=(<span class="type">const</span> College&amp; college) &#123; <span class="comment">//赋值运算符重载</span></span><br><span class="line">    name = college.name;</span><br><span class="line">    athletess = college.athletess;</span><br><span class="line">    manScore = college.manScore;</span><br><span class="line">    womenScore = college.womenScore;</span><br><span class="line">    score = college.score;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">College</span>(College <span class="type">const</span> &amp;college) &#123; <span class="comment">// 拷贝构造</span></span><br><span class="line">    name = college.name;</span><br><span class="line">    athletess = college.athletess;</span><br><span class="line">    manScore = college.manScore;</span><br><span class="line">    womenScore = college.womenScore;</span><br><span class="line">    score = college.score;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  string name;<span class="comment">//学院名称</span></span><br><span class="line">  vector&lt;Athlete&gt; athletess;<span class="comment">//数组vector 运动员</span></span><br><span class="line">  <span class="type">int</span> manScore;<span class="comment">//男子得分</span></span><br><span class="line">  <span class="type">int</span> womenScore;<span class="comment">//女子得分</span></span><br><span class="line">  <span class="type">int</span> score;<span class="comment">//混合得分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">bool</span> flag;<span class="comment">//标志位 这个学院有没有排过序</span></span><br><span class="line">  <span class="built_in">College</span>(string name) &#123; <span class="comment">// 重写的构造函数</span></span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setScore</span><span class="params">()</span> </span>&#123; <span class="comment">//设置成绩</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;score = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;manScore = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;womenScore = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(Athlete temp:athletess)&#123; <span class="comment">//遍历运动员表</span></span><br><span class="line">      <span class="keyword">if</span> (temp.<span class="built_in">getSex</span>() == <span class="string">&quot;男&quot;</span>) &#123; <span class="comment">//如果是男同学 就加manScore  score</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;manScore += temp.<span class="built_in">getGrade</span>();</span><br><span class="line">        <span class="keyword">this</span>-&gt;score += temp.<span class="built_in">getGrade</span>();</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123; <span class="comment">//如果是女同学 就加womenScore  score</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;womenScore += temp.<span class="built_in">getGrade</span>();</span><br><span class="line">        <span class="keyword">this</span>-&gt;score += temp.<span class="built_in">getGrade</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//利用STL的vector来存储学院 易操作</span></span><br><span class="line">vector&lt;College&gt; colleges ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">creatColleges</span><span class="params">(List2&lt;Athlete&gt; a)</span> </span>&#123;<span class="comment">//创建学院</span></span><br><span class="line">  Athlete temp;</span><br><span class="line">  <span class="type">bool</span> flag;<span class="comment">//标志1：有没有运动员对应的学院</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;<span class="comment">//遍历运动员表</span></span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    a.<span class="built_in">retrieve</span>(i,temp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; college : colleges) &#123; <span class="comment">//遍历学院数组</span></span><br><span class="line">      <span class="keyword">if</span> (college.name == temp.<span class="built_in">getCollege</span>()) &#123; <span class="comment">//如果有和运动员同名的学院</span></span><br><span class="line">        <span class="type">bool</span> flag2 = <span class="literal">false</span>;<span class="comment">//标志位2：记录运动员是否记录过</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; player : college.athletess) &#123;</span><br><span class="line">          <span class="keyword">if</span> (temp.<span class="built_in">getId</span>()==player.<span class="built_in">getId</span>()) flag2 = <span class="literal">true</span>;<span class="comment">//记录过 标志位为true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag2) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">//运动员还没加在学院的动态数组里面</span></span><br><span class="line">          flag = <span class="literal">true</span>;</span><br><span class="line">          college.athletess.<span class="built_in">push_back</span>(temp);<span class="comment">//把运动员加在学院的动态数组里面</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123; <span class="comment">//没有学院</span></span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="function">College <span class="title">collegeTemp</span><span class="params">(<span class="string">&quot;&quot;</span>+temp.getCollege())</span></span>;<span class="comment">//创建学院</span></span><br><span class="line">      collegeTemp.athletess.<span class="built_in">push_back</span>(temp);<span class="comment">//把运动员加在学院里的运动员中</span></span><br><span class="line">      colleges.<span class="built_in">push_back</span>(collegeTemp);<span class="comment">//再把运动员放入数组中</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setCollegesScore</span><span class="params">(vector&lt;College&gt; &amp;colleges)</span></span>&#123; <span class="comment">//设置学院的成绩</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; college : colleges) &#123; <span class="comment">//遍历学院vector数组 通过setScore设置成绩</span></span><br><span class="line">    college.<span class="built_in">setScore</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sortScore</span><span class="params">(vector&lt;College&gt; colleges)</span></span>&#123; <span class="comment">//总成绩排序</span></span><br><span class="line">  <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">  College temp;</span><br><span class="line">  <span class="comment">//确定排序的轮数 如果不够6个学院的话就全排 6个以上只排前6个</span></span><br><span class="line">  <span class="type">int</span> loop = <span class="number">6</span> &lt; colleges.<span class="built_in">size</span>()? <span class="number">6</span> : colleges.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; college : colleges)&#123;<span class="comment">//防止之前进行过排序 因此对所有的学院都设置为false</span></span><br><span class="line">    college.flag = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; loop; ++i) &#123;<span class="comment">//loop次最大值</span></span><br><span class="line">    max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;college: colleges) &#123;</span><br><span class="line">      <span class="keyword">if</span> (college.score &gt; max &amp;&amp; !college.flag) &#123;</span><br><span class="line">        <span class="comment">//每一遍循环里边找到最大的 并把标志位置位true 意思是已经排过序了</span></span><br><span class="line">        college.flag = <span class="literal">true</span>;</span><br><span class="line">        max = college.score;</span><br><span class="line">        temp = college;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;混合分数第&quot;</span>&lt;&lt;i + <span class="number">1</span>&lt;&lt;<span class="string">&quot;的是:&quot;</span> &lt;&lt; temp.name &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; temp.score &lt;&lt; endl;<span class="comment">//显示</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sortManScore</span><span class="params">(vector&lt;College&gt; colleges)</span></span>&#123; <span class="comment">//男子团体排序</span></span><br><span class="line">  <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">  College temp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; college : colleges)&#123;<span class="comment">//防止之前进行过排序 因此对所有的学院都设置为false</span></span><br><span class="line">    college.flag = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//确定排序的轮数 如果不够6个学院的话就全排 6个以上只排前6个</span></span><br><span class="line">  <span class="type">int</span> loop = <span class="number">6</span> &lt; colleges.<span class="built_in">size</span>()? <span class="number">6</span> : colleges.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; loop; ++i) &#123;</span><br><span class="line">    max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; college : colleges) &#123;</span><br><span class="line">      <span class="keyword">if</span> (college.manScore &gt; max &amp;&amp; !college.flag) &#123;</span><br><span class="line">        <span class="comment">//每一遍循环里边找到最大的 并把标志位置位true 意思是已经排过序了</span></span><br><span class="line">        college.flag = <span class="literal">true</span>;</span><br><span class="line">        max = college.score;</span><br><span class="line">        temp = college;</span><br><span class="line">        cout&lt;&lt;temp.name;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;男子团体分数第&quot;</span>&lt;&lt;i + <span class="number">1</span>&lt;&lt;<span class="string">&quot;的是:&quot;</span> &lt;&lt; temp.name &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; temp.manScore &lt;&lt; endl;<span class="comment">//显示</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sortWomenScore</span><span class="params">(vector&lt;College&gt; colleges)</span></span>&#123;<span class="comment">//防止之前进行过排序 因此对所有的学院都设置为false</span></span><br><span class="line">  <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">  College temp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; college : colleges)&#123;</span><br><span class="line">    college.flag = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//确定排序的轮数 如果不够6个学院的话就全排 6个以上只排前6个</span></span><br><span class="line">  <span class="type">int</span> loop = <span class="number">6</span> &lt; colleges.<span class="built_in">size</span>()? <span class="number">6</span> : colleges.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; loop; ++i) &#123;</span><br><span class="line">    max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; college : colleges) &#123;</span><br><span class="line">      <span class="comment">//每一遍循环里边找到最大的 并把标志位置位true 意思是已经排过序了</span></span><br><span class="line">      <span class="keyword">if</span> (college.womenScore &gt; max &amp;&amp; !college.flag) &#123;</span><br><span class="line">        college.flag = <span class="literal">true</span>;</span><br><span class="line">        max = college.score;</span><br><span class="line">        temp = college;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;女子团体分数第&quot;</span>&lt;&lt;i + <span class="number">1</span>&lt;&lt;<span class="string">&quot;的是:&quot;</span> &lt;&lt; temp.name &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; temp.womenScore &lt;&lt; endl;<span class="comment">//显示</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu1</span><span class="params">()</span><span class="comment">//运动会项目管理菜单</span></span></span><br><span class="line"><span class="function"></span>&#123;  cout&lt;&lt;<span class="string">&quot;******************************&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;******学校运动会管理系统******&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout &lt;&lt;<span class="string">&quot;------运动会项目管理--------&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;----创建项目    请按:1----&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;----数据修改    请按:2----&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;----数据删除    请按:3----&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;----数据查询    请按:4----&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;----返回主菜单    请按:0----&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;*******************************&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;*****请输入一个数据进行选择!*****&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="type">int</span> num;</span><br><span class="line">  cin&gt;&gt;num;</span><br><span class="line">  <span class="keyword">switch</span> (num) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">      <span class="built_in">setMatch</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">      <span class="built_in">changeMatch</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">      <span class="built_in">deleteMatch</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">      <span class="built_in">selectMatch</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:&#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span>:cout&lt;&lt;<span class="string">&quot;输入有误&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu2</span><span class="params">()</span><span class="comment">//运动员管理菜单</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;******************************&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;******学校运动会管理系统******&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout &lt;&lt;<span class="string">&quot;------运动会运动员管理--------&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;----创建运动员    请按:1----&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;----撤销报名    请按:2----&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;----赛事检录    请按:3----&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;----成绩录入    请按:4----&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;----信息查询    请按:5----&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;----信息修改    请按:6----&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;----返回主菜单    请按:0----&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;*******************************&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;*****请输入一个数据，并按回车键!*****&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="type">int</span> num;</span><br><span class="line">  cin&gt;&gt;num;</span><br><span class="line">  <span class="keyword">switch</span> (num) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">      <span class="built_in">inputAthlete</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">      <span class="built_in">deleteAthlete</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">      <span class="built_in">cheekAthlete</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">      <span class="built_in">loginScoreAthlete</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:&#123;</span><br><span class="line">      <span class="built_in">selectAthlete</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:&#123;</span><br><span class="line">      <span class="built_in">reviceAthlete</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:cout&lt;&lt;<span class="string">&quot;输入有误&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu3</span><span class="params">()</span> </span>&#123;<span class="comment">//学院管理菜单</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;******************************&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;******学校运动会管理系统******&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout &lt;&lt;<span class="string">&quot;------学院项目管理--------&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;----混合团体前6名学院    请按:1----&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;----男子团体前6名学院    请按:2----&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;----女子团体前6名学院    请按:3----&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;----返回主菜单    请按:0----&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;*******************************&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;*****请输入一个数据，并按回车键!*****&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="type">int</span> num;</span><br><span class="line">  cin&gt;&gt;num;</span><br><span class="line">  <span class="built_in">creatColleges</span>(athletes);</span><br><span class="line">  <span class="built_in">setCollegesScore</span>(colleges);</span><br><span class="line">  <span class="keyword">switch</span> (num) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">      <span class="built_in">sortScore</span>(colleges);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">      <span class="built_in">sortManScore</span>(colleges);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">      <span class="built_in">sortWomenScore</span>(colleges);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span> </span>&#123;<span class="comment">//主菜单</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;******************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;******学校运动会管理系统******&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----运动会项目管理  请按:1----&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----运动员管理  请按:2----&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----学院管理   请按:3----&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----退出系统    请按:0----&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*******************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*****请输入一个数据，并按回车键!*****&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    cin&gt;&gt;num;</span><br><span class="line">    <span class="keyword">switch</span> (num) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:&#123;<span class="comment">//运动会项目菜单</span></span><br><span class="line">        <span class="built_in">menu1</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:&#123;<span class="comment">//运动员管理菜单</span></span><br><span class="line">        <span class="built_in">menu2</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:&#123;<span class="comment">//学院管理菜单</span></span><br><span class="line">        <span class="built_in">menu3</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">\<span class="meta">#<span class="keyword">endif</span> <span class="comment">//NEWDATASTRUCT_E3_H</span></span></span><br></pre></td></tr></table></figure><p>Test.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by huangruidong on 2022/5/9.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;queue&quot;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;E3.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int main()&#123;</span></span><br><span class="line"><span class="comment">//   Athlete athlete(&quot;zs&quot;,&quot;2005010112&quot;,&quot;男&quot;,&quot;xk&quot;,&quot;1&quot;);</span></span><br><span class="line"><span class="comment">//   athlete.setRank(1);</span></span><br><span class="line"><span class="comment">//   athletes.insert(0,athlete);</span></span><br><span class="line"><span class="comment">//   creatColleges(athletes);</span></span><br><span class="line"><span class="comment">//   setCollegesScore(colleges);</span></span><br><span class="line"><span class="comment">//   cout&lt;&lt;colleges[0].score;</span></span><br><span class="line"><span class="comment">//   sortScore(colleges);</span></span><br><span class="line"><span class="comment">//   //Athlete(const string &amp;name, const string &amp;id, const string &amp;sex, const string &amp;college, const string &amp;matchId)</span></span><br><span class="line"><span class="comment">//   //       : name(name), id(id), sex(sex), college(college), matchId(matchId) &#123;&#125;;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int main()&#123;</span></span><br><span class="line"><span class="comment">//   Match match(&quot;100m&quot;,10001,&quot;男&quot;,&quot;8-31&quot;,&quot;2:00&quot;,20);</span></span><br><span class="line"><span class="comment">//   Match match2(&quot;200m&quot;,10002,&quot;男&quot;,&quot;8-31&quot;,&quot;2:00&quot;,20);</span></span><br><span class="line"><span class="comment">//   matchs.insert(0,match);</span></span><br><span class="line"><span class="comment">//   matchs.insert(1,match2);</span></span><br><span class="line"><span class="comment">//   changeMatch();</span></span><br><span class="line"><span class="comment">//   cout&lt;&lt;match.getCall()&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int main()&#123;</span></span><br><span class="line"><span class="comment">//   Athlete athlete(&quot;zs&quot;,&quot;2005010112&quot;,&quot;男&quot;,&quot;xk&quot;,&quot;1&quot;);</span></span><br><span class="line"><span class="comment">//   athletes.insert(0,athlete);</span></span><br><span class="line"><span class="comment">//   reviceAthlete();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;E3.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function">Match <span class="title">match1</span><span class="params">(<span class="string">&quot;100m&quot;</span>,<span class="number">100001</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;8-31&quot;</span>,<span class="string">&quot;2:00&quot;</span>,<span class="number">20</span>)</span></span>;</span><br><span class="line">  <span class="function">Match <span class="title">match2</span><span class="params">(<span class="string">&quot;100m&quot;</span>,<span class="number">100001</span>,<span class="string">&quot;女&quot;</span>,<span class="string">&quot;8-31&quot;</span>,<span class="string">&quot;2:00&quot;</span>,<span class="number">20</span>)</span></span>;</span><br><span class="line">  <span class="function">Athlete <span class="title">a</span><span class="params">(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;2001&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;信控&quot;</span>,<span class="string">&quot;10001&quot;</span>)</span></span>;</span><br><span class="line">  <span class="function">Athlete <span class="title">b</span><span class="params">(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;2002&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;材料&quot;</span>,<span class="string">&quot;10001&quot;</span>)</span></span>;</span><br><span class="line">  <span class="function">Athlete <span class="title">c</span><span class="params">(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;2003&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;信控&quot;</span>,<span class="string">&quot;10001&quot;</span>)</span></span>;</span><br><span class="line">  <span class="function">Athlete <span class="title">d</span><span class="params">(<span class="string">&quot;d&quot;</span>,<span class="string">&quot;2004&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;材料&quot;</span>,<span class="string">&quot;10001&quot;</span>)</span></span>;</span><br><span class="line">  <span class="function">Athlete <span class="title">e</span><span class="params">(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;2005&quot;</span>,<span class="string">&quot;女&quot;</span>,<span class="string">&quot;信控&quot;</span>,<span class="string">&quot;10001&quot;</span>)</span></span>;</span><br><span class="line">  <span class="function">Athlete <span class="title">f</span><span class="params">(<span class="string">&quot;f&quot;</span>,<span class="string">&quot;2006&quot;</span>,<span class="string">&quot;女&quot;</span>,<span class="string">&quot;材料&quot;</span>,<span class="string">&quot;10001&quot;</span>)</span></span>;</span><br><span class="line">  <span class="function">Athlete <span class="title">g</span><span class="params">(<span class="string">&quot;g&quot;</span>,<span class="string">&quot;2007&quot;</span>,<span class="string">&quot;女&quot;</span>,<span class="string">&quot;信控&quot;</span>,<span class="string">&quot;10001&quot;</span>)</span></span>;</span><br><span class="line">  <span class="function">Athlete <span class="title">h</span><span class="params">(<span class="string">&quot;h&quot;</span>,<span class="string">&quot;2008&quot;</span>,<span class="string">&quot;女&quot;</span>,<span class="string">&quot;材料&quot;</span>,<span class="string">&quot;10001&quot;</span>)</span></span>;</span><br><span class="line">  a.<span class="built_in">setRank</span>(<span class="number">1</span>);</span><br><span class="line">  b.<span class="built_in">setRank</span>(<span class="number">2</span>);</span><br><span class="line">  c.<span class="built_in">setRank</span>(<span class="number">3</span>);</span><br><span class="line">  d.<span class="built_in">setRank</span>(<span class="number">4</span>);</span><br><span class="line">  e.<span class="built_in">setRank</span>(<span class="number">1</span>);</span><br><span class="line">  f.<span class="built_in">setRank</span>(<span class="number">2</span>);</span><br><span class="line">  g.<span class="built_in">setRank</span>(<span class="number">3</span>);</span><br><span class="line">  h.<span class="built_in">setRank</span>(<span class="number">4</span>);</span><br><span class="line">  athletes.<span class="built_in">insert</span>(<span class="number">0</span>,a);</span><br><span class="line">  athletes.<span class="built_in">insert</span>(<span class="number">1</span>,b);</span><br><span class="line">  athletes.<span class="built_in">insert</span>(<span class="number">2</span>,c);</span><br><span class="line">  athletes.<span class="built_in">insert</span>(<span class="number">3</span>,d);</span><br><span class="line">  athletes.<span class="built_in">insert</span>(<span class="number">4</span>,e);</span><br><span class="line">  athletes.<span class="built_in">insert</span>(<span class="number">5</span>,f);</span><br><span class="line">  athletes.<span class="built_in">insert</span>(<span class="number">6</span>,g);</span><br><span class="line">  athletes.<span class="built_in">insert</span>(<span class="number">7</span>,h);</span><br><span class="line">  <span class="built_in">creatColleges</span>(athletes);</span><br><span class="line">  <span class="built_in">setCollegesScore</span>(colleges);</span><br><span class="line">  <span class="built_in">sortScore</span>(colleges);</span><br><span class="line">  <span class="built_in">sortManScore</span>(colleges);</span><br><span class="line">  <span class="built_in">sortWomenScore</span>(colleges);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Main.cpp</span><br><span class="line"></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;queue&quot;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;E3.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">menu</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六．实验数据、结果分析"><a href="#六．实验数据、结果分析" class="headerlink" title="六．实验数据、结果分析"></a>六．实验数据、结果分析</h3><ol><li>基于单链表实现线性表 List1</li></ol><p>Main.cpp测试结果：</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps22.jpg" alt="img"> </p><p>结果分析：实验按任务书的要求完成，测试功能正确无误，时间复杂度的估计在设计时已经给出，实验结果稳定。</p><ol start="2"><li>基于静态链表实现线性表 List2 的典型操作</li></ol><p>Main.cpp测试结果：</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps23.jpg" alt="img"> </p><p>结果分析：实验按任务书的要求完成，测试功能正确无误，时间复杂度的估计在设计时已经给出，实验结果稳定。</p><ol start="3"><li>实验3. 基于线性表 List1、线性表 List2 实现线性表的应用：运动会信息管理</li></ol><p>具体的测试在问题的分解中已经测试过了。</p><p>通过文件流的来把信息保存在磁盘中：</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps24.jpg" alt="img"> </p><p>如上图所示，但是存在一些问题：</p><p>字符编码加载错误：</p><p>比赛项目.dat</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps25.jpg" alt="img"> </p><p>运动员.dat</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps26.jpg" alt="img"> </p><p>认为是字符编码问题导致</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps27.jpg" alt="img"> </p><p>尝试所有编码，没有解决问题。可能是clion配置的字符为utf-8代替GBK导致的输出的文件编码问题。</p><p>Clion设置如下：</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/wps28.jpg" alt="img"> </p><h3 id="七．存在的问题与体会"><a href="#七．存在的问题与体会" class="headerlink" title="七．存在的问题与体会"></a>七．存在的问题与体会</h3><ol><li><p>在数据结构的设计中，模板的使用和创建尤为重要，而且较难掌握，在编写后续操作中，需要不断地对模板进行调整。</p></li><li><p>设计实现数据结构，首先清除这种数据结构的特点是什么，了解要用什么的方式来实现这种数据结构。</p></li><li><p>过程中出现了好多的细节错误，导致进度缓慢，使用了大量时间调试，例如：赋值运算</p></li></ol><p>符重载，深浅拷贝构造的问题，函数传参时传的形参，而不能改变实体等等。</p><ol start="4"><li>该实验使用的环境是Clion配置的MinGW,对实验中遇到的各种问不断地修正调试，加强了对这款编译器的熟练度。</li><li>实验中存在的问题是，把数据写入到文件中字符编码异常，尝试修改，未成功，应该是clion的配置存在问题。</li><li>掌握了通过单链表和静态链表来实现线性表，对单链表和静态链表更加熟悉，在实验三中又锻炼了线性表的使用。</li><li>理解了好多编程过程的小细节，const,常引用，引用，指针，delete等许多细节。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2022/11/20/JavaScript/"/>
      <url>/2022/11/20/JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="1、什么是javaScript"><a href="#1、什么是javaScript" class="headerlink" title="1、什么是javaScript"></a>1、什么是javaScript</h1><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220206212257251.png" alt="image-20220206212257251"></p><h1 id="2、JavaScript-入门"><a href="#2、JavaScript-入门" class="headerlink" title="2、JavaScript 入门"></a>2、JavaScript 入门</h1><h2 id="2-1-引入JavaScript"><a href="#2-1-引入JavaScript" class="headerlink" title="2.1 引入JavaScript"></a>2.1 引入JavaScript</h2><p>1.内部标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;hello world!!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.外部标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;hello world!&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/qt.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不用显式定义type,默认就是JavaScript</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    1.内部标签--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;script&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        alert(&#x27;hello world!!&#x27;)--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/script&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    2.外部引入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    script标签必须成对出现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/qt.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    不用显式定义type,默认就是JavaScript--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-基本语法入门"><a href="#2-2-基本语法入门" class="headerlink" title="2.2 基本语法入门"></a>2.2 基本语法入门</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.定义变量 变量类型 变量名 = 变量值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> score = <span class="number">71</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.条件控制</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(score&gt;<span class="number">60</span> &amp;&amp; score&lt;<span class="number">70</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;60~70&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;<span class="number">70</span> &amp;&amp; score&lt;<span class="number">80</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;70~80&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;other&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(score)  在浏览器的控制台打印变量！System.out.println();</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220206221243355.png" alt="image-20220206221243355"></p><h2 id="2-3-数据类型"><a href="#2-3-数据类型" class="headerlink" title="2.3 数据类型"></a>2.3 数据类型</h2><p><strong>变量</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 王者荣耀=<span class="string">&quot;垃圾&quot;</span>;<span class="comment">//支持中文</span></span><br></pre></td></tr></table></figure><p><strong>number</strong></p><p>js不区分小数和整数，Number</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span><span class="comment">//整数123</span></span><br><span class="line"><span class="number">123.1</span><span class="comment">//浮点数123.1</span></span><br><span class="line"><span class="number">1.123e3</span><span class="comment">//科学计数法</span></span><br><span class="line">-<span class="number">99</span><span class="comment">//复数</span></span><br><span class="line"><span class="title class_">NaN</span><span class="comment">// not a number</span></span><br><span class="line"><span class="title class_">Infinty</span><span class="comment">//表示无穷大</span></span><br></pre></td></tr></table></figure><p><strong>字符串</strong></p><p>‘abc’ “abc”</p><p><strong>布尔值</strong></p><p>true，false</p><p><strong>逻辑运算</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;</span><br><span class="line">||</span><br><span class="line">!</span><br></pre></td></tr></table></figure><p>比较运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">=</span><br><span class="line">== 等于（类型不一样，值一样，也会判断为<span class="literal">true</span>）</span><br><span class="line">===绝对等于（判断类型）</span><br></pre></td></tr></table></figure><p>这是一个js的缺陷，坚持不要用&#x3D;&#x3D;比较</p><p>须知：</p><ul><li>NaN&#x3D;&#x3D;&#x3D;NaN,这个与所有的数值都不相等，包括自己</li><li>只通过isNaN(NaN)来判断这个数是否是NaN</li></ul><p>浮点数问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>/<span class="number">3</span>)===(<span class="number">1</span>-<span class="number">2</span>/<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>尽量避免使用浮点数惊醒运算，存在精度问题！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="number">1</span>/<span class="number">3</span>-(<span class="number">1</span>-<span class="number">2</span>/<span class="number">3</span>))&lt;<span class="number">0.00000001</span></span><br></pre></td></tr></table></figure><p><strong>null和underfined</strong></p><ul><li>null 空</li><li>underfined 未定义</li></ul><p><strong>数组</strong></p><p>Java的数组必须是相同类型的对象，js中不需要这样！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保证代码可读性，尽量使用[]</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="literal">null</span>,<span class="literal">true</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="literal">null</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>取数组下标:如果越界了，就会</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">underfined</span><br></pre></td></tr></table></figure><p>对象</p><p>对象是大括号，数组是中括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Person person = new Person();</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;hrd&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">tags</span>:[<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;web&#x27;</span>,<span class="string">&#x27;...&#x27;</span>]</span><br><span class="line">    <span class="comment">//有点像sql 字符串用&#x27;&#x27; 语句最后一行不加,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去对象的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person.<span class="property">age</span></span><br><span class="line">person.<span class="property">name</span></span><br></pre></td></tr></table></figure><h2 id="2-4-严格检查模式"><a href="#2-4-严格检查模式" class="headerlink" title="2.4 严格检查模式"></a>2.4 严格检查模式</h2><p>‘use strict’</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//&#x27;use strict&#x27;严格检查模式，预防JavaScript的随意性导致产生一些问题</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//必须写在JavaScript代码的第一行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//局部变量用let定义</span></span></span><br><span class="line"><span class="language-javascript"><span class="meta">        &#x27;use strict&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> i = <span class="number">6</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3、数据类型"><a href="#3、数据类型" class="headerlink" title="3、数据类型"></a>3、数据类型</h1><h2 id="3-1-字符串"><a href="#3-1-字符串" class="headerlink" title="3.1 字符串"></a>3.1 字符串</h2><p>1.正常字符串我们使用单引号，或者双引号包裹</p><p>2.注意转义字符\</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\&#x27;</span><br><span class="line">\n</span><br><span class="line">\t</span><br><span class="line">\u4e2d   //u#### unicode字符</span><br><span class="line">\x41     //ascll字符</span><br></pre></td></tr></table></figure><p>3.多行字符串编写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> msg = </span><br><span class="line">            <span class="string">`</span></span><br><span class="line"><span class="string">            hello </span></span><br><span class="line"><span class="string">            world</span></span><br><span class="line"><span class="string">            你好</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line"><span class="comment">//table 上的`</span></span><br></pre></td></tr></table></figure><p>4.模板字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;huang r d&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">19</span>;</span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">`你好呀,<span class="subst">$&#123;name&#125;</span>,<span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">&gt;:<span class="number">1</span> 你好呀,huang r d,<span class="number">19</span></span><br></pre></td></tr></table></figure><p>5.字符串长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="property">length</span>;</span><br></pre></td></tr></table></figure><p>6.字符串的可变性，不变性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;huang r d&#x27;</span>;</span><br><span class="line">name[<span class="number">0</span>] = <span class="string">&#x27;l&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">&gt;:huang r d</span><br></pre></td></tr></table></figure><p>7.大小写转化，和c++，java一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里是方法，不是属性</span></span><br><span class="line">str.<span class="title function_">toUpperCase</span>();</span><br><span class="line">str.<span class="title function_">toLowerCase</span>();</span><br></pre></td></tr></table></figure><p>8.获取字符的位置，返回最前面的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name.<span class="title function_">indexOf</span>(<span class="string">&#x27;t&#x27;</span>)</span><br></pre></td></tr></table></figure><p>9.<strong>substring</strong>字符串截取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//截取方式[)</span></span><br><span class="line">str.<span class="title function_">substring</span>(<span class="number">1</span>)<span class="comment">//一个字符串截取到最后一个字符串</span></span><br><span class="line">str.<span class="title function_">substring</span>(<span class="number">1</span>,<span class="number">3</span>)<span class="comment">//[1,3)</span></span><br></pre></td></tr></table></figure><p>10.访问字符串指定位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c++ : []</span><br><span class="line">java : str.charAt()</span><br><span class="line">javaScript: [] str.charAt() 都可以</span><br></pre></td></tr></table></figure><h2 id="3-2-字符串"><a href="#3-2-字符串" class="headerlink" title="3.2 字符串"></a>3.2 字符串</h2><p><strong>Array可以包含任意的数据类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];<span class="comment">//通过下标取值和赋值</span></span><br><span class="line">arr[<span class="number">0</span>]</span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>1.长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="property">length</span></span><br></pre></td></tr></table></figure><p>注意：加入给arr.length赋值，数值大小就会发生变化，如果赋值过小，元素就会丢失</p><p>2.indexOf，通过元素获得下标索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">indexOf</span>(<span class="number">2</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>字符串的”1”和数字1是不同的</p><p><strong>3.slice()    截取Array的一部分，返回一个新数组，类似于String的substring</strong></p><p>4.push(),pop()类似于栈（在尾部操作）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push:入栈</span><br><span class="line">pop:出栈</span><br></pre></td></tr></table></figure><p>5.unshift(),shift()     类似于栈（在头部操作）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unshift:入栈</span><br><span class="line">shift:出栈</span><br></pre></td></tr></table></figure><p>6.排序sort()</p><p>7.元素反转 reverse()</p><p>8.concat()数组拼接</p><p>注意：concat()并没有修改数组，只会返回一个新的数组</p><p>9.连接符join</p><p>打印拼接数组，使用特定的字符串连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]</span><br><span class="line">arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="string">&quot;a-b-c&quot;</span></span><br></pre></td></tr></table></figure><p>10.多维数组</p><p>和Java，c++一样</p><h2 id="3-3-对象"><a href="#3-3-对象" class="headerlink" title="3.3 对象"></a>3.3 对象</h2><p>若干个键值对</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名 = &#123;</span><br><span class="line">属性名: 属性值,</span><br><span class="line">    属性名: 属性值,</span><br><span class="line">    属性名: 属性值</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个person对象</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name = <span class="string">&quot;huang r d&quot;</span></span><br><span class="line">    age = <span class="number">3</span>,</span><br><span class="line">    email = <span class="string">&quot;huangruidong.xauat@gmail&quot;</span>,</span><br><span class="line">    <span class="attr">score</span>:<span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js中对象,{….}表示一个对象，键值对描述属性xxxx:xxxx,多个属性之间使用逗号断开，最后一个属性不加逗号！</p><p><strong>js中所有的键都是字符串，值是任意对象！</strong></p><p>1.对象赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person.<span class="property">name</span> = <span class="string">&quot;huang rui dong&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.使用一个不存在的对象属性，不会报错！undefined</p><p>3.动态删减属性，通过delete删除对象的属性 （好随意）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> person.<span class="property">name</span></span><br></pre></td></tr></table></figure><p>4.动态添加属性，直接给新的属性添加值即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.<span class="property">haha</span> = <span class="string">&quot;haha&quot;</span></span><br></pre></td></tr></table></figure><p>5.判断属性值是否在这个对象中！xxx in  xxx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> person</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="string">&#x27;toString&#x27;</span> <span class="keyword">in</span> person</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>6.判断一个属性是否是这个对象自身拥有的hasOwnProperty()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;toString&#x27;</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">person.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="3-4-流程控制"><a href="#3-4-流程控制" class="headerlink" title="3.4 流程控制"></a>3.4 流程控制</h2><p>if…else</p><p>while</p><p>do while</p><p>for</p><p>forEash循环     5.1引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数是一个函数</span></span><br><span class="line"><span class="keyword">var</span> age = [<span class="number">12</span>,<span class="number">3</span>,<span class="number">45</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line">        age.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>for  in</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = [<span class="number">12</span>,<span class="number">3</span>,<span class="number">45</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> num <span class="keyword">in</span> age) &#123;</span><br><span class="line">          <span class="keyword">if</span>(age.<span class="title function_">hasOwnProperty</span>(num))&#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;存在&quot;</span>);</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(age[num])</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-Map-和-Set"><a href="#3-5-Map-和-Set" class="headerlink" title="3.5 Map 和 Set"></a>3.5 Map 和 Set</h2><p>ES6新特性</p><p>Map</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;tom&#x27;</span>,<span class="number">10</span>],[<span class="string">&#x27;jack&#x27;</span>,<span class="number">20</span>]],[<span class="string">&#x27;jerry&#x27;</span>,<span class="number">50</span>]);</span><br><span class="line">      <span class="keyword">var</span> name = map.<span class="title function_">get</span>(<span class="string">&#x27;tom&#x27;</span>);<span class="comment">//通过key值获取value</span></span><br><span class="line">      map.<span class="title function_">set</span>(<span class="string">&#x27;litiy&#x27;</span>,<span class="number">88</span>);<span class="comment">//新增或和修改</span></span><br><span class="line">      map.<span class="title function_">delete</span>(<span class="string">&#x27;tom&#x27;</span>);<span class="comment">//删除</span></span><br></pre></td></tr></table></figure><p>Set</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>]);<span class="comment">//set可以去重</span></span><br><span class="line">        set.<span class="title function_">add</span>(<span class="number">7</span>);</span><br><span class="line">        set.<span class="title function_">delete</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">3</span>));<span class="comment">//是否包含某个元素</span></span><br></pre></td></tr></table></figure><h2 id="3-6-iterator"><a href="#3-6-iterator" class="headerlink" title="3.6 iterator"></a>3.6 iterator</h2><p>es6新特性</p><p>遍历数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> arr)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历map</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;tom&#x27;</span>,<span class="number">10</span>],[<span class="string">&#x27;jack&#x27;</span>,<span class="number">20</span>],[<span class="string">&#x27;jerry&#x27;</span>,<span class="number">50</span>]]);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> map) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>遍历set</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>]);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> set)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h1 id="4、函数"><a href="#4、函数" class="headerlink" title="4、函数"></a>4、函数</h1><h2 id="4-1-定义函数"><a href="#4-1-定义函数" class="headerlink" title="4.1 定义函数"></a>4.1 定义函数</h2><blockquote><p>定义方式一</p></blockquote><p>绝对值函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">abs</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>定义方式二</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="keyword">function</span> (<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>function(x){….}这是一个匿名函数，但是可以把值赋给abs,通过abs可以调用函数，方式一、方式二等价。</p><blockquote><p>调用函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">abs</span>(<span class="number">10</span>)</span><br><span class="line"><span class="title function_">abs</span>(-<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>参数问题：javaScript可以穿任意个参数，也可以不传递参数</p><p>参数进来是否存在问题？假设不存在参数，如何规避？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="keyword">function</span> (<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> x !== <span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&#x27;not a number&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>arguments</p></blockquote><p>arguments是一个js免费赠送的关键字；</p><p>代表，传递进来是一个数组！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="keyword">function</span> (<span class="params">x</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x=&gt;&quot;</span>+x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：arguments已经包含所有的参数，我们有时候想使用多余的参数来警醒附加操作，需要排除已经有的参数</p><blockquote><p>rest</p></blockquote><p>以前</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>&gt;<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//.......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="keyword">function</span> (<span class="params">x,...rest</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x=&gt;&quot;</span>+x);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(rest)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rest参数只能写在最后面，必须用…标识</p><h2 id="4-2-变量的作用域"><a href="#4-2-变量的作用域" class="headerlink" title="4.2 变量的作用域"></a>4.2 变量的作用域</h2><p>在js中，var定义变量实际是有作用域的。</p><p>假设函数体中声明，则函数体外不可使用~（闭包）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">haha</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    x= x+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">x = x+<span class="number">2</span>;<span class="comment">//Uncaught ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure><p>如果两个函数使用了相同的变量名，只要在函数呢不就不冲突</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    x = x+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x =<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    x = x+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部函数可以访问外部函数的成员，反之不行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> y = x+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> z = y+<span class="number">1</span>;<span class="comment">//Uncaught ReferenceError: y is not defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设，内部函数和外部函数的变量，重名！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> x =<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;in&quot;</span>+x);<span class="comment">//里边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;out&quot;</span>+x)<span class="comment">//外边</span></span><br><span class="line">    <span class="title function_">f1</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JavaScript中，函数查找变量从自身函数开始，由内到外查找，如果外部存在这个同名的函数变量，则内部函数会屏蔽外部函数的变量。</p><blockquote><p>提升变量的作用域</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&quot;x&quot;</span>+y;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">    <span class="keyword">var</span> y = <span class="string">&quot;y&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：x undefind</p><p>说明：js执行引擎，自动提升了y的声明，但是不会提升y的赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&quot;x&quot;</span>+y;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是JavaScript建立之初就存在的特性。养成规范：所有变量定义都放在函数的头部，不要乱放，便于代码维护；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x=<span class="number">1</span>,</span><br><span class="line">        y=x+<span class="number">1</span>,</span><br><span class="line">        z,i,a;<span class="comment">//undefined</span></span><br><span class="line">    <span class="comment">//之后随便使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>全局函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br></pre></td></tr></table></figure><p>全局变量window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(x);</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">window</span>.<span class="property">x</span>);<span class="comment">//默认所有的全局变量，都会自动绑定在window的对象下</span></span><br></pre></td></tr></table></figure><p>alert()这个函数本身也是一个<strong>window</strong>变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x =<span class="string">&quot;xxxx&quot;</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> old_alert = <span class="variable language_">window</span>.<span class="property">alert</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">alert</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//alert失效了</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="number">123</span>);</span><br><span class="line"><span class="comment">//恢复</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">alert</span> = old_alert;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="number">456</span>);</span><br></pre></td></tr></table></figure><p>JavaScript实际上只有一个全局作用域，任何变量（函数也可以视为变量），假设没有在函数作用范围内找到，就会向外查找，如果全局作用域都没有找到，报错    RefrenceError</p><blockquote><p>规范</p></blockquote><p>由于我问所有的全局变量都会绑定到我们的window上。如果不同的js文件，使用了相同的全局变量，就会发生冲突。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//唯一的全局变量</span></span><br><span class="line"><span class="keyword">var</span> hrd = &#123;&#125;;</span><br><span class="line"><span class="comment">//定义全局变量</span></span><br><span class="line">hrd.<span class="property">name</span> = <span class="string">&quot;haung rui dong&quot;</span>;</span><br><span class="line">hrd.<span class="property">add</span>=<span class="keyword">function</span> (<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把自己的代码全部放入自己定义的唯一空间名字中，降低全局命名冲突的问题~</p><p>jQuery</p><blockquote><p>局部作用域 let</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i+<span class="number">1</span>);<span class="comment">//出问题，i出了作用域还能使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6 let关键字，解决局部作用域冲突问题！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i+<span class="number">1</span>);<span class="comment">//Uncaught ReferenceError: i is not defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议使用<strong>let</strong>定义局部作用域的变量。</p><blockquote><p>常量const</p></blockquote><p>ES6之前，认为规定，全部为大写字母则为常量，建议不要修改这样的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">PI</span> =<span class="number">3.14</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>);</span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">5.18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>);<span class="comment">//pi可以被修改</span></span><br></pre></td></tr></table></figure><p>ES6 解决常量问题，引入关键字 <strong>const</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> =<span class="number">3.14</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>);</span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">5.18</span>;<span class="comment">//const不可以被修改</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>);</span><br></pre></td></tr></table></figure><h2 id="4-3-方法"><a href="#4-3-方法" class="headerlink" title="4.3 方法"></a>4.3 方法</h2><blockquote><p>定义方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hrd =&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;huang rui dong&#x27;</span>,</span><br><span class="line">    <span class="attr">birthday</span>:<span class="number">2002</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//今年-出生的年</span></span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>();</span><br><span class="line">        <span class="keyword">return</span> now-<span class="variable language_">this</span>.<span class="property">birthday</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line">hrd.<span class="property">name</span></span><br><span class="line"><span class="comment">//方法，一定要带()</span></span><br><span class="line">hrd.<span class="title function_">age</span>()</span><br></pre></td></tr></table></figure><p>this表示什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">f</span> <span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//今年-出生的年</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> now-<span class="built_in">this</span>.birthday;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">var</span> <span class="variable">hrd</span> <span class="operator">=</span>&#123;</span><br><span class="line">    name:<span class="string">&#x27;huang rui dong&#x27;</span>,</span><br><span class="line">    birthday:<span class="number">2002</span>,</span><br><span class="line">    age:f</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hrd.age()</span></span><br><span class="line"><span class="comment">//f()Nan 因为window没有age</span></span><br></pre></td></tr></table></figure><p>this是无法指向的，是默认指向调用它的那个对象</p><blockquote><p>apply</p></blockquote><p>在JavaScript中可以控制this的指向！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span> () &#123;</span><br><span class="line">    <span class="comment">//今年-出生的年</span></span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="keyword">return</span> now-<span class="variable language_">this</span>.<span class="property">birthday</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hrd =&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;huang rui dong&#x27;</span>,</span><br><span class="line">    <span class="attr">birthday</span>:<span class="number">2002</span>,</span><br><span class="line">    <span class="attr">age</span>:f</span><br><span class="line">&#125;</span><br><span class="line">f.<span class="title function_">apply</span>(hrd,[]);<span class="comment">//this，指向了hrd，参数为空</span></span><br></pre></td></tr></table></figure><h1 id="5、-内部对象"><a href="#5、-内部对象" class="headerlink" title="5、 内部对象"></a>5、 内部对象</h1><blockquote><p>标准对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span></span><br><span class="line"><span class="string">&#x27;number&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;1230&#x27;</span></span><br><span class="line"><span class="string">&#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span></span><br><span class="line"><span class="string">&#x27;boolean&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> []</span><br><span class="line"><span class="string">&#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">NaN</span></span><br><span class="line"><span class="string">&#x27;number&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="5-1-Date"><a href="#5-1-Date" class="headerlink" title="5.1 Date"></a>5.1 Date</h2><p>基本使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">now.<span class="title function_">getFullYear</span>();<span class="comment">//年</span></span><br><span class="line">now.<span class="title function_">getMonth</span>();</span><br><span class="line">now.<span class="title function_">getDay</span>();<span class="comment">//星期几</span></span><br><span class="line">now.<span class="title function_">getDate</span>();<span class="comment">//天</span></span><br><span class="line">now.<span class="title function_">getHours</span>();</span><br><span class="line">now.<span class="title function_">getMinutes</span>();</span><br><span class="line">now.<span class="title function_">getSeconds</span>();</span><br><span class="line"></span><br><span class="line">now.<span class="title function_">getTime</span>();<span class="comment">//获得当前时间戳            全世界统一，1970 1.1 0：00：00 毫秒数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1644567496458</span>));<span class="comment">//时间戳，转时间</span></span><br></pre></td></tr></table></figure><p>转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">now.<span class="title function_">toLocaleString</span>()</span><br><span class="line"><span class="string">&#x27;1975/3/19 18:25:49&#x27;</span></span><br><span class="line">now.<span class="title function_">toGMTString</span>()</span><br><span class="line"><span class="string">&#x27;Wed, 19 Mar 1975 10:25:49 GMT&#x27;</span></span><br><span class="line"><span class="comment">//是一个方法，不是属性，需要加()</span></span><br></pre></td></tr></table></figure><h2 id="5-2-json"><a href="#5-2-json" class="headerlink" title="5.2 json"></a>5.2 json</h2><blockquote><p>json是什么</p></blockquote><ul><li><a href="https://baike.baidu.com/item/JSON">JSON</a>(<a href="https://baike.baidu.com/item/JavaScript">JavaScript</a> Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式；</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言；</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在JavaScript一切皆对象，任何js支持的类型都可以用json来表示；</p><p>格式：</p><ul><li>对象用{}</li><li>数组用[]</li><li>所有键值对 都是用 key:value</li></ul><p>JSON字符串和JS对象的转化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;huangruidong&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对象转化为json字符串</span></span><br><span class="line"><span class="keyword">var</span> jsonUser = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user);<span class="comment">//&#x27;&#123;&quot;name&quot;:&quot;huangruidong&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//json 字符串转为对象 参数为json字符串</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;huangruidong&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>很多人搞不清楚，JSON和JS对象的区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="string">&#x27;hello&#x27;</span>,<span class="attr">b</span>:<span class="string">&#x27;hellob&#x27;</span>&#125;;<span class="comment">//js</span></span><br><span class="line"><span class="keyword">var</span> json =<span class="string">&#x27;&#123;&quot;a&quot;:&quot;hello&quot;,&quot;b&quot;:&quot;hellob&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="5-3-Ajax"><a href="#5-3-Ajax" class="headerlink" title="5.3 Ajax"></a>5.3 Ajax</h2><ul><li>原生的js写法，xhr异步请求</li><li>jQuey封装好的方法 $(“#name”).ajax(“”)</li><li>axios请求</li></ul><h1 id="6、面向对象编程"><a href="#6、面向对象编程" class="headerlink" title="6、面向对象编程"></a>6、面向对象编程</h1><h2 id="6-1-什么是面向对象"><a href="#6-1-什么是面向对象" class="headerlink" title="6.1 什么是面向对象"></a>6.1 什么是面向对象</h2><p>JavaScript、Java、C#…</p><p>面向对象：JavaScript有些区别</p><ul><li>类：模板 原型对象</li><li>对象：具体的实例</li></ul><p>在JavaScript这个需要换一下思维方式！</p><blockquote><p>原型：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student =&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;hrd&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">run</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;run....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//原型对象</span></span><br><span class="line">xiaoming.<span class="property">__proro__</span> = student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Bird</span> = &#123;</span><br><span class="line">    <span class="attr">fly</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;fly...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xiaoming.<span class="property">__proro__</span> = <span class="title class_">Bird</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">student</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给studnet新增一个方法</span></span><br><span class="line">student.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>class 继承</p></blockquote><p>class  关键词，是ES6以后引入的</p><p>1.定义一个类，属性，方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">hello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;xiaomimng&quot;</span>);</span><br><span class="line">xiaoming.<span class="title function_">hello</span>();</span><br></pre></td></tr></table></figure><p>2.继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">hello</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">XiaoStudent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Student</span>&#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name,grade</span>) &#123;</span><br><span class="line">            <span class="variable language_">super</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">myGrade</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;我是小学生&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> xiaoming = <span class="keyword">new</span> <span class="title class_">XiaoStudent</span>(<span class="string">&quot;xiaoming&quot;</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>本质：查看对象原型</p><blockquote><p>原型链</p></blockquote><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220211233810494.png" alt="image-20220211233810494"></p><h1 id="7、操作BOM对象-重点"><a href="#7、操作BOM对象-重点" class="headerlink" title="7、操作BOM对象(重点)"></a>7、操作BOM对象(重点)</h1><blockquote><p>浏览器介绍</p></blockquote><p>JavaScript 和浏览器的关系？</p><p>JavaScript 诞生就是为了能够让他在浏览器中运行。</p><p>BOM:浏览器对象模型</p><ul><li>IE 6~11</li><li>Chrome</li><li>Safari</li><li>FireFox</li></ul><p>三方</p><ul><li>qq浏览器</li><li>360浏览器</li></ul><blockquote><p>window</p></blockquote><p>window 代表 浏览器窗口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="number">222</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line"><span class="number">254</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">innerWidth</span></span><br><span class="line"><span class="number">1536</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">outerHeight</span></span><br><span class="line"><span class="number">816</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">outerWidth</span></span><br><span class="line"><span class="number">1536</span></span><br></pre></td></tr></table></figure><blockquote><p>Navigator（不建议使用）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">navigator.<span class="property">appName</span></span><br><span class="line"><span class="string">&#x27;Netscape&#x27;</span></span><br><span class="line">navigator.<span class="property">appVersion</span></span><br><span class="line"><span class="string">&#x27;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36&#x27;</span></span><br><span class="line">navigator.<span class="property">userAgent</span></span><br><span class="line"><span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36&#x27;</span></span><br><span class="line">navigator.<span class="property">platform</span></span><br><span class="line"><span class="string">&#x27;Win32&#x27;</span></span><br></pre></td></tr></table></figure><p>大多数时候，我们不会使用 navigator 对象，因为会被人为修改！</p><p>不建议使用这些属性来判断和编写代码</p><blockquote><p>screen</p></blockquote><p>代表屏幕尺寸</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">screen.<span class="property">width</span></span><br><span class="line"><span class="number">1536</span></span><br><span class="line">screen.<span class="property">height</span></span><br><span class="line"><span class="number">864</span></span><br></pre></td></tr></table></figure><blockquote><p>location(重要)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">host</span>: <span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line"><span class="attr">hostname</span>: <span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line"><span class="attr">href</span>: <span class="string">&quot;https://www.baidu.com/&quot;</span></span><br><span class="line"><span class="attr">protocol</span>: <span class="string">&quot;https:&quot;</span></span><br><span class="line">loaction.<span class="title function_">reload</span>() <span class="comment">//刷新网页</span></span><br><span class="line"><span class="comment">//设置新地址</span></span><br><span class="line">location.<span class="title function_">assign</span>(<span class="string">&#x27;www.goolge.com&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>document（内容 DOM 主要）</p></blockquote><p>document代表当前页面，HTML DOM文档树</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">title</span></span><br><span class="line"><span class="string">&#x27;百度一下，你就知道&#x27;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span>=<span class="string">&#x27;百度 yyds&#x27;</span></span><br><span class="line"><span class="string">&#x27;百度 yyds&#x27;</span></span><br></pre></td></tr></table></figure><p>获得具体的文档树</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>java<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>java se<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>java ee<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> dl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取cookie</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span></span><br><span class="line"><span class="string">&#x27;BIDUPSID=EA88B02EA42C5BA7A8B949DDF6572E26; PSTM=1638001843; BAIDUID=2DC45B058C88918ECF33BCCCC7AC255A:FG=1; BAIDUID_BFESS=4FA403B87348552A3BB1D0C9F870404B:FG=1; COOKIE_SESSION=0_0_0_0_5_0_1_0_0_0_0_0_5_0_397_0_1638002466_0_1638002069%7C1%230_0_1638002069%7C1; BD_UPN=12314753; BD_HOME=1; H_PS_PSSID=35414_35104_31254_35768_35489_35774_34584_35490_35872_35541_35797_35323_26350_35881_35879_35746; sugstore=0; BA_HECTOR=a0a0252h002000ahp21h0fjsh0r&#x27;</span></span><br></pre></td></tr></table></figure><p>劫持cookie原理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;aa.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">-- 而已人员：获取你的cookie上传到他的服务器</span><br></pre></td></tr></table></figure><p>服务器段可以设置cookie:httpOnly</p><blockquote><p>history</p></blockquote><p>history代表浏览器历史</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">history.<span class="title function_">back</span>()<span class="comment">//后退</span></span><br><span class="line">history.<span class="title function_">forward</span>()<span class="comment">//前进</span></span><br></pre></td></tr></table></figure><h1 id="8、操作DOM对象（重点）"><a href="#8、操作DOM对象（重点）" class="headerlink" title="8、操作DOM对象（重点）"></a>8、操作DOM对象（重点）</h1><blockquote><p>核心</p></blockquote><p>浏览网页就是一个DOM树形结构！</p><ul><li>更新：更新DOM节点</li><li>遍历DOM节点：得到DOM节点</li><li>删除：删除一个DOM节点</li><li>增加：添加一个新的节点</li></ul><p>如果要操作一个DOM节点，就必须要鲜活的这个DOM节点</p><blockquote><p>获得dom节点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> h1 = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;p1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;p2&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;father&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> children = father.<span class="property">children</span>;<span class="comment">//获取父节点下所有的子节点</span></span><br><span class="line">father.<span class="property">firstChild</span>;</span><br><span class="line">father.<span class="property">lastChild</span>;</span><br></pre></td></tr></table></figure><p>这是原生代码，之后使用jQuery();</p><blockquote><p>更新节点</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> id1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>操作文本</p><ul><li>id1.innerText&#x3D;’dhakhdkhak’ 修改文本的值</li><li>id1.innerHTML &#x3D; ‘<strong>我最帅</strong>‘ 可以解析HTML文本文档</li></ul><p>操作css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id1.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span> <span class="comment">//属性使用字符串包裹</span></span><br><span class="line">id1.<span class="property">style</span>.<span class="property">fontSize</span>=<span class="string">&#x27;20px&#x27;</span><span class="comment">//驼峰命名法</span></span><br><span class="line">id1.<span class="property">style</span>.<span class="property">padding</span>=<span class="string">&#x27;2em&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>删除节点</p></blockquote><p>删除节点的步骤：先获取父节点，再通过父节点来删除自己</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>java<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>p1--<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>p2--<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> self = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;p1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="property">parentElement</span>;</span></span><br><span class="line"><span class="language-javascript">  father.<span class="title function_">removeChild</span>(self)</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//删除是一个动态的过程</span></span></span><br><span class="line"><span class="language-javascript">  father.<span class="title function_">removeChild</span>(father.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">  father.<span class="title function_">removeChild</span>(father.<span class="property">children</span>[<span class="number">1</span>]);</span></span><br><span class="line"><span class="language-javascript">  father.<span class="title function_">removeChild</span>(father.<span class="property">children</span>[<span class="number">2</span>]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：删除多个节点的时候，children是时刻变化的，删除节点的时候一定要注意？</p><blockquote><p>插入节点</p></blockquote><p>我们获得了某个DOM节点，假设这个DOM节点是空的，我们通过innerHTML就可以增加一个元素了，但是这个DOM节点已经存在元素了，我们不能这么干了！会产生覆盖。</p><p>追加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;se&quot;</span>&gt;</span>javaSE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;ee&quot;</span>&gt;</span>javaEE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;me&quot;</span>&gt;</span>javaME<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> js = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;js&#x27;</span>);<span class="comment">//已经存在的节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    list.<span class="title function_">appendChild</span>(js);<span class="comment">//追加到后面</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220213234428496.png" alt="image-20220213234428496"></p><blockquote><p>创建一个新标签，实现插入</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newP = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);<span class="comment">//创建一个p标签</span></span><br><span class="line">newP.<span class="property">id</span> = <span class="string">&#x27;newP&#x27;</span>;</span><br><span class="line">newP.<span class="property">innerText</span> = <span class="string">&#x27;hello,new word&#x27;</span></span><br><span class="line">list.<span class="title function_">append</span>(newP);</span><br><span class="line"><span class="comment">//创建一个标签节点(通过这个属性，可以设置任意的值)</span></span><br><span class="line"><span class="keyword">var</span> myScript = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">myScript.<span class="title function_">setAttribute</span>(<span class="string">&#x27;type&#x27;</span>,<span class="string">&#x27;text/javascript&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以创建一个style标签</span></span><br><span class="line"><span class="keyword">var</span> myStyle = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line">myStyle.<span class="title function_">setAttribute</span>(<span class="string">&#x27;type&#x27;</span>,<span class="string">&#x27;text/css&#x27;</span>);</span><br><span class="line">myStyle.<span class="property">innerHTML</span>=<span class="string">&#x27;body&#123;    background-color: wheatw;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(myStyle)</span><br><span class="line"></span><br><span class="line"><span class="comment">//body</span></span><br><span class="line"><span class="keyword">var</span> body = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;body&#x27;</span>);</span><br><span class="line">body[<span class="number">0</span>].<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;wheat&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>insert before</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ee = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ee&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> js = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>);</span><br><span class="line">list.<span class="title function_">insertBefore</span>(js,ee);</span><br></pre></td></tr></table></figure><h1 id="9、操作表单（验证）"><a href="#9、操作表单（验证）" class="headerlink" title="9、操作表单（验证）"></a>9、操作表单（验证）</h1><blockquote><p>表单是什么 from DOM 树</p></blockquote><ul><li>文本框 text</li><li>下拉框 <select></li><li>单选框 radio</li><li>多选框 checkbox</li><li>隐藏域 hidden</li><li>密码框 password</li><li>….</li></ul><p>表单的目的：提交信息</p><blockquote><p>获得需要提交的信息</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多选框的值设置好value--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;women&quot;</span> <span class="attr">id</span>=<span class="string">&quot;girl&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> inpurt_text = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> boy_radio = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;boy&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> girl_radio = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;girl&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//得到输入框的值</span></span></span><br><span class="line"><span class="language-javascript">    inpurt_text.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//修改输入框的值</span></span></span><br><span class="line"><span class="language-javascript">    inpurt_text.<span class="property">value</span> = <span class="string">&#x27;122&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//对于单选框，多选框等固定的值,boy_radio.value只能提取当前的值</span></span></span><br><span class="line"><span class="language-javascript">    boy_radio.<span class="property">checked</span>;<span class="comment">//查看返回值的结果，是否为true,如果位true,则被选择</span></span></span><br><span class="line"><span class="language-javascript">    girl_radio.<span class="property">checked</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>提交表单   MD5加密密码，表单优化</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">表单绑定提交事件</span></span><br><span class="line"><span class="comment">onsubmit = 绑定一个提交检测函数，true,false</span></span><br><span class="line"><span class="comment">将这个结果返回给表单，使用onsubmit接收！</span></span><br><span class="line"><span class="comment">onsubmit=&quot;return aaa()</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://www.baidu.com/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return aaa()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input-password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;md5-password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    //隐藏的提交方式</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--绑定事件 onclick被点击--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">aaa</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> uname = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pwd = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input-password&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> md5pwd = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;md5-password&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//pwd.value = md5(pwd.value); 不这样干</span></span></span><br><span class="line"><span class="language-javascript">       </span></span><br><span class="line"><span class="language-javascript">        md5pwd.<span class="property">value</span> = <span class="title function_">md5</span>(pwd.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//可以校验判断表单内容，true就是通过提交，false 阻止提交</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="10、jQuery"><a href="#10、jQuery" class="headerlink" title="10、jQuery"></a>10、jQuery</h1><p>jQuery库，里边存在大量JavaScript函数</p><blockquote><p>获取jQuery</p></blockquote><ol><li>cdn</li><li>导包</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test-jquery&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//利用jquery实现</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 公式 $(selector).action()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//选择器就是csss的选择器</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#test-jquery&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;hello,jquery&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>jQuery 公式 $(selector).action()</strong></p><blockquote><p>选择器</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原生js，选择器少，麻烦不好记</span></span><br><span class="line"><span class="comment">//标签</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>();</span><br><span class="line"><span class="comment">//id</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>();</span><br><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery css中的选择器他全部都能使用</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">click</span>();<span class="comment">//标签选择器</span></span><br><span class="line">$(<span class="string">&#x27;#id&#x27;</span>).<span class="title function_">click</span>();<span class="comment">//id选择器</span></span><br><span class="line">$(<span class="string">&#x27;.class&#x27;</span>).<span class="title function_">click</span>();<span class="comment">//类选择器</span></span><br></pre></td></tr></table></figure><p><a href="https://jquery.cuishifeng.cn/">https://jquery.cuishifeng.cn/</a>    文档</p><blockquote><p>事件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#divMove</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--要求：获取鼠标当前的一个坐标--&gt;</span></span><br><span class="line">mouse : <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;mouseMove&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divMove&quot;</span>&gt;</span></span><br><span class="line">    在这移动鼠标试试</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//当网页元素加载完毕后，响应事件</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#divMove&#x27;</span>).<span class="title function_">mousemove</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#mouseMove&#x27;</span>).<span class="title function_">text</span>(<span class="string">&#x27;x:&#x27;</span>+e.<span class="property">pageX</span> + <span class="string">&#x27;y:&#x27;</span>+e.<span class="property">pageY</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>操作DOM</p></blockquote><p>节点文本操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[name=py]&#x27;</span>).<span class="title function_">text</span>();<span class="comment">//获得值</span></span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name=py]&#x27;</span>).<span class="title function_">text</span>(<span class="string">&#x27;设置值&#x27;</span>);<span class="comment">//设置值</span></span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name=py]&#x27;</span>).<span class="title function_">html</span>();<span class="comment">//获得值</span></span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name=py]&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;设置值&#x27;</span>);<span class="comment">//设置值</span></span><br></pre></td></tr></table></figure><p>css操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[name=py]&#x27;</span>).<span class="title function_">css</span>(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>元素的显示和隐藏：本质 <strong>display: none</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[name=py]&#x27;</span>).<span class="title function_">show</span>();</span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name=py]&#x27;</span>).<span class="title function_">hidden</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql</title>
      <link href="/2022/11/20/MySQL/"/>
      <url>/2022/11/20/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><hr><h2 id="1-初识MySQL"><a href="#1-初识MySQL" class="headerlink" title="1. 初识MySQL"></a>1. 初识MySQL</h2><h3 id="1-1-为什么学习数据库"><a href="#1-1-为什么学习数据库" class="headerlink" title="1.1 为什么学习数据库"></a>1.1 为什么学习数据库</h3><ol><li>岗位需求</li><li>大数据时代趋势</li><li>被迫需求：存数据</li><li>数据库是所有软件体系中最核心的存在 DBA</li></ol><h3 id="1-2-什么是数据库"><a href="#1-2-什么是数据库" class="headerlink" title="1.2  什么是数据库"></a>1.2  什么是数据库</h3><p>数据库(DB,DataBase)</p><p>概念：数据仓库，软件，安装在操作系统</p><p>作用：存储数据，管理数据</p><h3 id="1-3-数据库分类"><a href="#1-3-数据库分类" class="headerlink" title="1.3  数据库分类"></a>1.3  数据库分类</h3><p><strong>关系型数据库：(SQL)</strong></p><ul><li>MySQL、Oracle、Sql Server、DB2、SQLlite</li><li>通过表和表之间，行和列之间的关系进行数据的存储，学员信息表，考勤表，….</li></ul><p><strong>非关系型数据库: (NoSQL)   Not  Only</strong></p><ul><li>Redis、MongDB</li><li>非关系型数据库，对象储存，通过对象的自身属性来决定。</li></ul><p><strong>DBMS(数据库管理系统)</strong></p><p>数据库管理软件，科学有效的管理我们的数据，维护和获取数据；</p><p>MySQL，数据库管理系统！</p><h3 id="1-4-连接数据库"><a href="#1-4-连接数据库" class="headerlink" title="1.4  连接数据库"></a>1.4  连接数据库</h3><p>命令行连接！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">MySQL <span class="operator">-</span>uroot <span class="operator">-</span>pxduniversity20 #连接数据库</span><br><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;123456&#x27;</span>)<span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> Host <span class="operator">=</span> <span class="string">&#x27;localhost&#x27;</span>;#修改用户密码</span><br><span class="line">flush privileges;#刷新权限</span><br><span class="line"><span class="comment">-----------------------------------------------</span></span><br><span class="line">#所有语句都使用;结尾</span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line">MySQL<span class="operator">&gt;</span> use school#切换数据库中所有的表</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables;#查看数据库中所有的表</span><br><span class="line"><span class="keyword">describe</span> student;#显示数据库所有表的信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database westos;#创建一个数据库</span><br><span class="line"></span><br><span class="line">exit;#退出连接</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>数据库xx语言</strong></p><p>DDL    定义</p><p>DML    操作</p><p>DQL    查询</p><p>DCL    控制</p><h2 id="2-操作数据库"><a href="#2-操作数据库" class="headerlink" title="2.操作数据库"></a>2.操作数据库</h2><h3 id="2-1-操作数据库（了解）"><a href="#2-1-操作数据库（了解）" class="headerlink" title="2.1 操作数据库（了解）"></a>2.1 操作数据库（了解）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>创建数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> westos;</span><br><span class="line">#<span class="number">2.</span>删除数据库</span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> westos;</span><br><span class="line">#<span class="number">3.</span>使用数据库</span><br><span class="line">USE `schoool`</span><br><span class="line">#<span class="number">4.</span>查看数据库</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES</span><br></pre></td></tr></table></figure><p><strong>学习思路：</strong></p><ul><li>对照sqlyog可视化历史记录查看sql</li><li>固定的语法或关键字必须要强型行记住</li></ul><h3 id="2-2-数据库的列类型"><a href="#2-2-数据库的列类型" class="headerlink" title="2.2 数据库的列类型"></a>2.2 数据库的列类型</h3><p><strong>数值</strong></p><ul><li>tinyint十分小的数据1个字节</li><li>smallint较小的数据2个字节</li><li>mediumint中等大小的数据3个字节</li><li><strong>int标准的整数4个字节</strong></li><li>bigint较大的数据8个字节</li><li>float浮点数4个字节</li><li>double浮点数8个字节</li><li>decimal字符串形式的浮点数金融计算的时候一般用decimal</li></ul><p>字符串</p><ul><li>char字符串固定的大小0~255</li><li><strong>vachar可变字符串0~65535常用的变量String</strong></li><li>tinytext微型文本2^8 - 1 </li><li>text文本串2^16 - 1</li></ul><p>时间日期</p><p>java.util.Date</p><ul><li>dateYYYY-MM-DD,日期格式</li><li>timeHH: mm: ss时间格式</li><li><strong>datetimeYYYY-MM-DDHH: mm: ss最常用的时间格式</strong></li><li><strong>timestamp时间戳，1970.1.1到现在的毫秒数！也比较常用</strong></li><li>year年份表示</li></ul><p>null</p><ul><li>没有值，未知</li><li><strong>注意，不要使用 NULL进行运算，结果为NULL</strong></li></ul><h3 id="2-3-数据库的字段属性（重点）"><a href="#2-3-数据库的字段属性（重点）" class="headerlink" title="2.3 数据库的字段属性（重点）"></a>2.3 数据库的字段属性（重点）</h3><p><strong>Unsigned:</strong></p><ul><li>无符号的整数</li><li>声明了该列不能声明为负数</li></ul><p><strong>zerofill:</strong></p><ul><li>0填充的</li><li>不足的位数，使用0来填充，int(3),5–005</li></ul><p><strong>自增：</strong></p><ul><li>通常理解为自增，自动在上一条记录的基础上+1（默认）</li><li>通常用来设计唯一的逐渐~index，必须是整数类型</li><li>可以自定义设计主键自增的</li><li>非空 NULL NOT NULL</li><li>假设设置为not null ，如果不给它赋值，就会报错！</li><li>Null,如果不填，默认为空！</li></ul><p><strong>默认：</strong></p><ul><li>设置默认的值!</li><li>sex，默认值为男，若果不指定该列的值，则会有默认的值!</li></ul><h3 id="2-4-创建数据库（重点）"><a href="#2-4-创建数据库（重点）" class="headerlink" title="2.4  创建数据库（重点）"></a>2.4  创建数据库（重点）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 目标：创建一个school数据库</span></span><br><span class="line"><span class="comment">-- 创建学生表（列，字段） 使用SQL创建</span></span><br><span class="line"><span class="comment">-- 学号int 登陆密码varchar(20) 姓名，性别varchar(2),出生日期(datatime),家庭住址，email</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意点，使用英文(),表的名称 和 字段 尽量使用 ``  括起来</span></span><br><span class="line"><span class="comment">-- AUTO_INCREMENT 自增</span></span><br><span class="line"><span class="comment">-- 字符串使用 单引号括起来！</span></span><br><span class="line"><span class="comment">-- 所有的语句后面加,(英文的),最后一个不用加</span></span><br><span class="line"><span class="comment">-- PRIMARY KEY 主键，一般一个表只有一个唯一的主键！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` (</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`birthday` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><p>格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] `表名`(</span><br><span class="line">`字段名` 列类型 [属性] [索引] [注释],</span><br><span class="line">    `字段名` 列类型 [属性] [索引] [注释],</span><br><span class="line">    `字段名` 列类型 [属性] [索引] [注释],</span><br><span class="line">    `字段名` 列类型 [属性] [索引] [注释],</span><br><span class="line">    `字段名` 列类型 [属性] [索引] [注释]</span><br><span class="line">)[表类型] [字符设置] [注释]</span><br></pre></td></tr></table></figure><p>常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE DATABASE school #查看创建数据库的语句</span><br><span class="line">SHOW CREATE TABLE student #查看student数据表的定义语句</span><br><span class="line">DESC student #显示表的结构</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-5-数据表的类型"><a href="#2-5-数据表的类型" class="headerlink" title="2.5 数据表的类型"></a>2.5 数据表的类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#关于数据库引擎</span><br><span class="line">/*</span><br><span class="line">INNODB默认使用</span><br><span class="line">MYISAM早些年使用的</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>MYISAM</th><th>INNODB</th></tr></thead><tbody><tr><td>事务支持</td><td>不支持</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持</td><td>支持</td></tr><tr><td>外键约束</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持</td></tr><tr><td>表空间大小</td><td>较小</td><td>较大，约为2倍</td></tr></tbody></table><p>常规使用操作：</p><ul><li>MYISAM节约空间，速度较快</li><li>INNODB 安全性高，事务的处理，多表多用户操作</li></ul><hr><p>在物理空间存在的位置</p><p>所有的数据文件都存在data目录下，一个文件夹就对应一个数据库本质还是文件的存储！</p><p>MySQL引擎在物理文件上的区别</p><ul><li><p>INNODB的数据库只有一个*.frm文件按，以及上级目录下的ibdata1文件</p></li><li><p>MYISAM对应文件</p><ul><li>*.fim表结构的定义文件</li><li>*.MYD数据文件(data)</li><li>*.MYI  索引文件   (index)</li></ul></li></ul><h3 id="2-6-修改和删除数据表的字段"><a href="#2-6-修改和删除数据表的字段" class="headerlink" title="2.6 修改和删除数据表的字段"></a>2.6 修改和删除数据表的字段</h3><hr><p>修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改表名：ALTER TABLE 旧表名 RENAME AS 新表名;</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student2 RENAME <span class="keyword">AS</span> student;</span><br><span class="line"><span class="comment">-- 增加表的字段： ALTER TABLE 表名 ADD 字段名 列属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> age <span class="type">INT</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的字段（重命名，约束条件）</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 MODIFY 字段名 列属性[]</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student MODIFY age <span class="type">VARCHAR</span>(<span class="number">11</span>);<span class="comment">-- 修改约束</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 CHANGE 旧字段名 新字段名 INT(1);</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student CHANGE age age1 <span class="type">INT</span>(<span class="number">1</span>);<span class="comment">-- 字段重命名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表的字段： ALTER TABLE 表名 DROP 字段名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">DROP</span> age1;</span><br></pre></td></tr></table></figure><hr><p>删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除表(如果表存在的话)DROP TABLE IF EXISTS 表名</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> student;</span><br></pre></td></tr></table></figure><p><strong>所有的创建和删除操作尽量加上判断，以免报错</strong></p><p>注意点：</p><ul><li>&#96;&#96;字段名，使用这个包裹！</li><li>注释 – &#x2F;**&#x2F;</li><li>sql关键字大小写不敏感</li><li>所有符号用英文！</li></ul><h2 id="3、MySQL数据管理"><a href="#3、MySQL数据管理" class="headerlink" title="3、MySQL数据管理"></a>3、MySQL数据管理</h2><h3 id="3-1-外键（了解即可）"><a href="#3-1-外键（了解即可）" class="headerlink" title="3.1 外键（了解即可）"></a>3.1 外键（了解即可）</h3><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220118230935791.png" alt="image-20220118230935791"></p><hr><p>方式一、在创建表的时候，增加约束（麻烦，比较复杂）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `grade`(</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">`gradename` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`gradeid`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生表的gradeid字段要引用年级表的gradeid</span></span><br><span class="line"><span class="comment">-- 定义外键key</span></span><br><span class="line"><span class="comment">-- 给这个外键添加约束 （执行引用） references 引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` (</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`birthday` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生的年级&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`),</span><br><span class="line">KEY `FK_gradeid` (`gradeid`),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY (`gradeid`) <span class="keyword">REFERENCES</span> `grade` (`gradeid`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><p>删除有外键关系的表的时候，必须要先删除引用别人的表（从表），再删除被引用的表（主表）</p><hr><p>方式二：创建表成功后，添加外键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` (</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`birthday` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生的年级&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表没有外键关系</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY(`gradeid`) <span class="keyword">REFERENCES</span> `grade` (`gradeid`);</span><br><span class="line"><span class="comment">-- ALTER TABLE 表 ADD CONSTRAINT 约束名 FOREIGN KEY(作为外键的列) REFERENCES 那个表 (那个字段)</span></span><br></pre></td></tr></table></figure><p>以上的外键都是物理外键，数据库级别的外键，不建议使用！（避免数据库过多造成困扰，这里了解即可）</p><p>最佳实践</p><ul><li>数据库就是单充的表，只用来存储数据，只有行（数据）和列（字段）</li><li>我们想使用多张表的数据，想使用外键（程序去实现）</li></ul><h3 id="3-2-DML语言（全部记住）"><a href="#3-2-DML语言（全部记住）" class="headerlink" title="3.2 DML语言（全部记住）"></a>3.2 DML语言（全部记住）</h3><p><strong>数据库意义</strong>：数据存储，数据管理</p><p>DML 语言：数据操作语言</p><ul><li>insert</li><li>update</li><li>delete</li></ul><hr><h3 id="3-3-添加"><a href="#3-3-添加" class="headerlink" title="3.3 添加"></a>3.3 添加</h3><p>insert</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入语句（添加）</span></span><br><span class="line"><span class="comment">-- INSERT INTO 表名([字段名1，字段名2，字段名3])VALUES (&#x27;值1&#x27;)，(&#x27;值2&#x27;)，(&#x27;值3&#x27;,.....)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade`(`gradename`) <span class="keyword">VALUES</span>(<span class="string">&#x27;大四&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 由于主键自增我们可以省略（如果不写表的字段，他就会一一匹配）</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade` <span class="keyword">VALUES</span>(<span class="string">&#x27;大三&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一半血插入语句，我们一定要数据和字段一一对应！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多个字段</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `grade`(`gradename`) <span class="keyword">VALUES</span>(<span class="string">&#x27;大二&#x27;</span>),(<span class="string">&#x27;大一&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`) <span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`,`pwd`,`sex`) <span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;aaaa&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`,`pwd`,`sex`) <span class="keyword">VALUES</span> (<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;aaaa&#x27;</span>,<span class="string">&#x27;男&#x27;</span>),(<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;aaaa&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure><p>语法： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名([字段名<span class="number">1</span>，字段名<span class="number">2</span>，字段名<span class="number">3</span>])<span class="keyword">VALUES</span> (<span class="string">&#x27;值1&#x27;</span>)，(<span class="string">&#x27;值2&#x27;</span>)，(<span class="string">&#x27;值3&#x27;</span>,.....)</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li>字段和字段之间使用英文逗号隔开</li><li>字段是可以省略的，但是构面的值必须要一一对应，不能少</li><li>可以同时插入多条数据，VALUES后面的值，需要使用 <strong>,</strong> 隔开即可 (),()</li></ol><h3 id="3-4-修改"><a href="#3-4-修改" class="headerlink" title="3.4 修改"></a>3.4 修改</h3><hr><p>update修改谁(条件)set原来的值&#x3D;新增</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改学员名字，带了简介</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> `name` <span class="operator">=</span> <span class="string">&#x27;石榴&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不指定条件的情况下，会改动所有表！</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> `name` <span class="operator">=</span> <span class="string">&#x27;长江七号&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改多个属性，逗号隔开</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;石榴&#x27;</span>,`email`<span class="operator">=</span><span class="string">&#x27;shiliu@gmail.com&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="comment">-- UPDATE 表名 SET colnum_name = value,[colnum_name = value,....] WHERE [条件];</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>条件：where 字句 运算符 id等于某个值，或者大于小于某个值，某个区间内修改。</p><table><thead><tr><th>操作符</th><th>含义</th><th>范围</th><th>结果</th></tr></thead><tbody><tr><td>&#x3D;</td><td>等于</td><td>5&#x3D;6</td><td>false</td></tr><tr><td>&lt;&gt;或!&#x3D;</td><td>不等于</td><td>5&lt;&gt;6</td><td>true</td></tr><tr><td>&gt;</td><td></td><td></td><td></td></tr><tr><td>&lt;</td><td></td><td></td><td></td></tr><tr><td>&lt;&#x3D;</td><td></td><td></td><td></td></tr><tr><td>&gt;&#x3D;</td><td></td><td></td><td></td></tr><tr><td>BETWEEN…AND..</td><td>在某个范围内</td><td>[2,5]</td><td></td></tr><tr><td>AND</td><td>我和你&amp;&amp;</td><td>5&gt;1 and 1&gt;2</td><td>false</td></tr><tr><td>OR</td><td>我或你||</td><td>5&gt;1 or 1&gt;2</td><td>true</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 通过多个条件定位数据</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student` <span class="keyword">SET</span> `birthday`<span class="operator">=</span><span class="built_in">CURRENT_TIME</span> <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;石榴&#x27;</span> <span class="keyword">AND</span> `sex` <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="comment">-- 语法：UPDATE 表名 SET colnum_name=value,[colnum_name = value,....] WHERE [条件]</span></span><br></pre></td></tr></table></figure><h3 id="3-5-删除"><a href="#3-5-删除" class="headerlink" title="3.5 删除"></a>3.5 删除</h3><hr><p>delete命名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除数据 （避免这样写）</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student`</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除指定数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><hr><p>TRUNCATE命名</p><p>作用：完全清空一个数据库表，表的结构和索引约束不会变</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 清空 student 表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> `student`</span><br></pre></td></tr></table></figure><hr><p>delete和TRUNCATE的区别</p><ul><li>相同点：都能删除数据，都不会删除表结构</li><li>不同：<ul><li>TRUNCATE重新设置自增列计数器回归零</li><li>TRUNCATE不会影响事务</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 测试delete和TRUNCATE区别</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`coll` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` (`coll`) <span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>),(<span class="string">&#x27;2&#x27;</span>),(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `test` <span class="comment">-- 不会影响自增</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> `test` <span class="comment">-- 自动回归零</span></span><br></pre></td></tr></table></figure><p>了解即可：DELETE删除的问题，重启数据库，现象</p><ul><li>InnoDB自增列会从1开始（存在内存当中，断电即失）</li><li>MyISAM继续从上一个自增开始（存在文件中，不会丢失）</li></ul><h2 id="4、DQL查询数据（最重点）"><a href="#4、DQL查询数据（最重点）" class="headerlink" title="4、DQL查询数据（最重点）"></a>4、DQL查询数据（最重点）</h2><h3 id="4-1-DQL"><a href="#4-1-DQL" class="headerlink" title="4.1 DQL"></a>4.1 DQL</h3><p>(Data Query Language:数据库查询语言)</p><ul><li>所有的查询操作都用它 Select</li><li>简单的查询，复杂的查询他都能做</li><li><strong>数据库最核心的语言，最终要的语句</strong></li><li>使用频率最高的语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询全部的学生 SELECT 字段 FROM 表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定字段</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentname`<span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 别名，给结果起一个名字 AS 可以给字段起别名，也可以给表起别名</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno` <span class="keyword">AS</span> 学号,`studentname` <span class="keyword">AS</span> 学生姓名  <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数 Concat(a,b)</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;姓名：&#x27;</span>,studentname) <span class="keyword">AS</span> 新名字 <span class="keyword">FROM</span> student</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法：SELECT 字段....FROM 表</span></span><br></pre></td></tr></table></figure><p>有的时候，列名字不是那么的见名知意，需要起别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">AS</span> 字段名<span class="keyword">as</span> 别名 表名 <span class="keyword">as</span> 别名</span><br></pre></td></tr></table></figure><h3 id="4-2基本的select语句和别名的使用"><a href="#4-2基本的select语句和别名的使用" class="headerlink" title="4.2基本的select语句和别名的使用"></a>4.2基本的select语句和别名的使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>]</span><br><span class="line">&#123;<span class="operator">*</span> <span class="operator">|</span> table.<span class="operator">*</span> <span class="operator">|</span> [table.field1[<span class="keyword">as</span> alias1][,table.field2[<span class="keyword">as</span> alias2]][,...]]&#125;</span><br><span class="line"><span class="keyword">FROM</span> table_name [<span class="keyword">as</span> table_alias]</span><br><span class="line">    [<span class="keyword">left</span> <span class="operator">|</span> <span class="keyword">right</span> <span class="operator">|</span> <span class="keyword">inner</span> <span class="keyword">join</span> table_name2]  <span class="comment">-- 联合查询</span></span><br><span class="line">    [<span class="keyword">WHERE</span> ...]  <span class="comment">-- 指定结果需满足的条件</span></span><br><span class="line">    [<span class="keyword">GROUP</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定结果按照哪几个字段来分组</span></span><br><span class="line">    [<span class="keyword">HAVING</span>]  <span class="comment">-- 过滤分组的记录必须满足的次要条件</span></span><br><span class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定查询记录按一个或多个条件排序</span></span><br><span class="line">    [LIMIT &#123;[<span class="keyword">offset</span>,]row_count <span class="operator">|</span> row_countOFFSET <span class="keyword">offset</span>&#125;];</span><br><span class="line">    <span class="comment">--  指定查询的记录从哪条至哪条</span></span><br></pre></td></tr></table></figure><p>注意：[]括号代表可选的，{}括号代表必选的</p><h3 id="4-3-去重，数据库表达式"><a href="#4-3-去重，数据库表达式" class="headerlink" title="4.3 去重，数据库表达式"></a>4.3 去重，数据库表达式</h3><hr><p><strong>去重     DISTINCT</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询一下有哪些同学参加了考试</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="comment">-- 查询全部的考试成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno` <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="comment">-- 查询那些同学参加了考试</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `studentno` <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="comment">-- 发现重复数据，去重</span></span><br></pre></td></tr></table></figure><hr><p>数据库的列（表达式）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> VERSION() <span class="comment">-- 查询系统版本（函数）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span><span class="operator">*</span><span class="number">3</span><span class="number">-1</span> <span class="keyword">AS</span> 计算结果 <span class="comment">-- 用来计算（表达式）</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@auto</span>_increment_increment <span class="comment">-- 查询自增的步长(变量)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学员的考试成绩 +1 分</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentresult`<span class="operator">+</span><span class="number">1</span> <span class="keyword">AS</span> <span class="string">&#x27;提分后&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br></pre></td></tr></table></figure><p>数据库的表达式：文本值，列，NULL，函数，计算表达式，系统变量…..</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法：SELECT 字段....FROM 表</span></span><br></pre></td></tr></table></figure><h3 id="4-4-where-条件语句"><a href="#4-4-where-条件语句" class="headerlink" title="4.4 where 条件语句"></a>4.4 where 条件语句</h3><p>作用：检索数据中符合条件的值</p><p>搜索条件由一个或多个表达式组成！结果为布尔值</p><hr><p>逻辑运算符</p><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>and  &amp;&amp;</td><td>a and b   a&amp;&amp;b</td><td>逻辑与</td></tr><tr><td>or  ||</td><td>a  or  b    a||b</td><td>逻辑或</td></tr><tr><td>not  !</td><td>not a    !a</td><td>逻辑非</td></tr></tbody></table><p>尽量使用英文字母</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>studentno,`studentresult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询高考成绩在95-100分之间</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,`studentresult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentresult<span class="operator">&gt;=</span><span class="number">95</span> <span class="keyword">AND</span> studentresult<span class="operator">&lt;=</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- and &amp;&amp;</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,`studentresult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentresult<span class="operator">&gt;=</span><span class="number">95</span> <span class="operator">&amp;&amp;</span> studentresult<span class="operator">&lt;=</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模糊查询（区间）</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,`studentresult` <span class="keyword">FROM</span> <span class="keyword">result</span> </span><br><span class="line"><span class="keyword">WHERE</span> studentresult <span class="keyword">BETWEEN</span> <span class="number">95</span> <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 除了1000号学生之外的同学成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,`studentresult`  <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> studentno<span class="operator">=</span><span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> studentno,`studentresult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentno<span class="operator">!=</span><span class="number">1000</span></span><br></pre></td></tr></table></figure><hr><p>模糊查询：比较运算符</p><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>IS NULL</td><td>a is null</td><td>如果操作符为null，结果为真</td></tr><tr><td>IS NOT NULL</td><td>a is not null</td><td>如果操作符不为null，结果为真</td></tr><tr><td>BETWEEN</td><td>a between b and c</td><td>如果a在b和c之间，结果为真</td></tr><tr><td>LIKE</td><td>a like b</td><td>SQL匹配，如果a匹配b，则结果为真</td></tr><tr><td>IN</td><td>a in(a1,a2,a3…..)</td><td>假设a在a1,或者a2…其中一个值中，结果为真</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>studentno,`studentresult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询高考成绩在95-100分之间</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,`studentresult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentresult<span class="operator">&gt;=</span><span class="number">95</span> <span class="keyword">AND</span> studentresult<span class="operator">&lt;=</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- and &amp;&amp;</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,`studentresult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentresult<span class="operator">&gt;=</span><span class="number">95</span> <span class="operator">&amp;&amp;</span> studentresult<span class="operator">&lt;=</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模糊查询（区间）</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,`studentresult` <span class="keyword">FROM</span> <span class="keyword">result</span> </span><br><span class="line"><span class="keyword">WHERE</span> studentresult <span class="keyword">BETWEEN</span> <span class="number">95</span> <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 除了1000号学生之外的同学成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,`studentresult`  <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> studentno<span class="operator">=</span><span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> studentno,`studentresult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentno<span class="operator">!=</span><span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>模糊查询<span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="comment">-- 查询姓刘的同学</span></span><br><span class="line"><span class="comment">-- like结合 %（代表0到任意个字符） _（代表一个字符）</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentname` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学，名字后面只有一个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentname` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">&#x27;刘_&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学，名字后面只有两个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentname` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">&#x27;刘__&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询名字中有峰的同学 %峰%</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentname` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">&#x27;%峰%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询1001，1002号学员</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentname` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> studentno <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询北京的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentname` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> address <span class="keyword">IN</span> (<span class="string">&#x27;安徽&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询地址为空的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentname` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> address<span class="operator">=</span>&quot;&quot; <span class="keyword">OR</span> address <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询出生日期不为空的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentname` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> borndate <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询出生日期为空的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentno`,`studentname` <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> borndate <span class="keyword">IS</span>  <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><h3 id="4-5-联表查询"><a href="#4-5-联表查询" class="headerlink" title="4.5 联表查询"></a>4.5 联表查询</h3><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220123111220578.png" alt="image-20220123111220578"></p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220123111242854.png" alt="image-20220123111242854"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>联表查询<span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="comment">/*思路</span></span><br><span class="line"><span class="comment">1.分析需求，分析查询字段来自那些表。（连接查询）</span></span><br><span class="line"><span class="comment">2.确定使用那种连接？7种</span></span><br><span class="line"><span class="comment">确定交叉点（这两个表中那个数据是相同的）</span></span><br><span class="line"><span class="comment">判断的条件：学生表中的studentno=成绩表中的studentno</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectno,studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.studentno<span class="operator">=</span>r.studentno</span><br><span class="line"></span><br><span class="line"><span class="comment">-- RIGHT JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectno,studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.studentno<span class="operator">=</span>r.studentno</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEFT JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectno,studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.studentno<span class="operator">=</span>r.studentno</span><br></pre></td></tr></table></figure><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>INNTER JOIN</td><td>如果表中至少有一个匹配，就返回执行</td></tr><tr><td>LEFT JOIN</td><td>会从左表中返回所有的值，即使右表没有匹配</td></tr><tr><td>RIGHT JOIN</td><td>会从右表中返回所有的值，即使左表没有匹配</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- join(连接的表) on (判断的条件) 连接查询</span></span><br><span class="line"><span class="comment">-- where 等值查询</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectno,studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">WHERE</span> s.studentno<span class="operator">=</span>r.studentno</span><br><span class="line"></span><br><span class="line"><span class="comment">-- RIGHT JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectno,studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">WHERE</span> s.studentno<span class="operator">=</span>r.studentno</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEFT JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectno,studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">WHERE</span> s.studentno<span class="operator">=</span>r.studentno</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询缺考的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectno,studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.studentno <span class="operator">=</span> r.studentno</span><br><span class="line"><span class="keyword">WHERE</span> studentresult <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*思路(查询参加考试同学的信息，学号，姓名。科目名，成绩)</span></span><br><span class="line"><span class="comment">1.分析需求，分析查询字段来自那些表。student result subject（连接查询）</span></span><br><span class="line"><span class="comment">2.确定使用那种连接？7种</span></span><br><span class="line"><span class="comment">确定交叉点（这两个表中那个数据是相同的）</span></span><br><span class="line"><span class="comment">判断的条件：学生表中的studentno=成绩表中的studentno</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectname,studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> r.studentno <span class="operator">=</span> s.studentno</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> subject sub</span><br><span class="line"><span class="keyword">ON</span> r.subjectno <span class="operator">=</span> sub.subjectno</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 我要查询哪些数据 select</span></span><br><span class="line"><span class="comment">-- 从那几个表中查询 FROM 表 JOIN 连接的表 ON 交叉条件</span></span><br><span class="line"><span class="comment">-- 假设存在一种多张表查询，慢慢来，先查询两张表然后在慢慢增加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- From a left join b</span></span><br><span class="line"><span class="comment">-- From a right join b</span></span><br></pre></td></tr></table></figure><hr><p>自连接</p><p>自己的表和自己的表相连，核心：<strong>一张表拆为两张一样的表即可</strong> </p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220123171228812.png" alt="image-20220123171228812"></p><p>父类</p><table><thead><tr><th>categoryid</th><th>categoryname</th></tr></thead><tbody><tr><td>2</td><td>信息技术</td></tr><tr><td>3</td><td>软件开发</td></tr><tr><td>5</td><td>美术设计</td></tr><tr><td></td><td></td></tr></tbody></table><p>子类</p><table><thead><tr><th>pid</th><th>categoryid</th><th>categoryname</th></tr></thead><tbody><tr><td>3</td><td>4</td><td>数据库</td></tr><tr><td>2</td><td>8</td><td>办公信息</td></tr><tr><td>3</td><td>6</td><td>web开发</td></tr><tr><td>5</td><td>7</td><td>ps技术</td></tr></tbody></table><p>操作：查询父类对应的子类对象</p><table><thead><tr><th>父类</th><th>子类</th></tr></thead><tbody><tr><td>信息技术</td><td>办公信息</td></tr><tr><td>如那件开发</td><td>数据库</td></tr><tr><td>软件开发</td><td>web开发</td></tr><tr><td>美术设计</td><td>ps技术</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询父子信息：把一张表看成两个一模一样的表</span></span><br><span class="line"><span class="keyword">SELECT</span> a.`categoryname` <span class="keyword">AS</span> <span class="string">&#x27;父栏名&#x27;</span>,b.`categoryname` <span class="keyword">AS</span> <span class="string">&#x27;子栏目&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> `category` <span class="keyword">AS</span> a, `category` <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.`categoryid` <span class="operator">=</span> b.`pid`</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学员所属年级（学号，学生的姓名，年级名称）</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname,gradename</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> grade g</span><br><span class="line"><span class="keyword">ON</span> s.gradeid <span class="operator">=</span> g.gradeid</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询科目所属年级（科目名称，年级名称）</span></span><br><span class="line"><span class="keyword">SELECT</span> subjectname,gradename</span><br><span class="line"><span class="keyword">FROM</span> `subject` s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> grade g</span><br><span class="line"><span class="keyword">on</span> s.gradeid <span class="operator">=</span> g.gradeid</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询了参加 数据结构 考试的同学信息：学号，姓名，科目名，分数</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectname,studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.studentno <span class="operator">=</span> r.studentno</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.`subjectno` <span class="operator">=</span> sub.subjectno</span><br><span class="line"><span class="keyword">where</span> subjectname <span class="operator">=</span> <span class="string">&#x27;数据库结构-1&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-6-分页和排序"><a href="#4-6-分页和排序" class="headerlink" title="4.6 分页和排序"></a>4.6 分页和排序</h3><hr><p>ORDER BY</p><p>排序</p><p>升序 ASC  降序 DESC</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>排序<span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="comment">-- 排序： 升序 ASC  降序 DESC</span></span><br><span class="line"><span class="comment">-- 查询的结果根据成绩排序 降序</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectname,studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.studentno <span class="operator">=</span> r.studentno</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.`subjectno` <span class="operator">=</span> sub.subjectno</span><br><span class="line"><span class="keyword">where</span> subjectname <span class="operator">=</span> <span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> studentresult <span class="keyword">ASC</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>分页</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>分页<span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="comment">-- 分页：每页显示五条数据</span></span><br><span class="line"><span class="comment">-- 语法：limit 起始值，页面的大小</span></span><br><span class="line"><span class="comment">-- 网页应用：当前，总的页数，页面大小</span></span><br><span class="line"><span class="comment">-- LIMIT 0,51~5</span></span><br><span class="line"><span class="comment">-- LIMIT 2,52~6</span></span><br><span class="line"><span class="comment">-- LIMIT 5,5  6~10</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectname,studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.studentno <span class="operator">=</span> r.studentno</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.`subjectno` <span class="operator">=</span> sub.subjectno</span><br><span class="line"><span class="keyword">where</span> subjectname <span class="operator">=</span> <span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> studentresult <span class="keyword">ASC</span></span><br><span class="line">LIMIT <span class="number">5</span>,<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第一页 limit 0，5   （1-1）*5</span></span><br><span class="line"><span class="comment">-- 第二页 limit 5，5   （2-1）*5</span></span><br><span class="line"><span class="comment">-- 第三页 limit 10，5   （3-1）*5</span></span><br><span class="line"><span class="comment">-- 第N页 limit    （n-1）*pageSize,pageSize</span></span><br><span class="line">pageSize:页面大小</span><br><span class="line">（n<span class="number">-1</span>）<span class="operator">*</span>pageSize：起始值</span><br><span class="line">n：当前页</span><br><span class="line">数据总数<span class="operator">/</span>页面大小<span class="operator">=</span>总页数</span><br></pre></td></tr></table></figure><hr><p>作业</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询 Java第一学年 课程排名前十的学生，并且分数要大于80的学生信息（学号、姓名、课程名称、分数）</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectname,studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.studentno <span class="operator">=</span> r.studentno</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> subject sub</span><br><span class="line"><span class="keyword">ON</span> sub.subjectno <span class="operator">=</span> r.subjectno</span><br><span class="line"><span class="keyword">WHERE</span> subjectname<span class="operator">=</span><span class="string">&#x27;Java第一学年&#x27;</span> <span class="keyword">AND</span> studentresult<span class="operator">&gt;=</span><span class="number">80</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> studentresult <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="4-7-子查询"><a href="#4-7-子查询" class="headerlink" title="4.7 子查询"></a>4.7 子查询</h3><p>where（这个值是计算出来的）</p><p>本质：在where语句中嵌套一个子查询语句</p><p>where（select* from）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.查询数据库结构-1 的所有考试结果（学号，科目编号，成绩）降序排列</span></span><br><span class="line"><span class="comment">-- 方式一：使用联查</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,r.subjectno,studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> subject sub</span><br><span class="line"><span class="keyword">ON</span> r.subjectno <span class="operator">=</span> sub.subjectno</span><br><span class="line"><span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">&#x27;高等数学-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> studentresult <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二：使用子查询()</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,subjectno,studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> subjectno<span class="operator">=</span>(</span><br><span class="line"><span class="comment">-- 查询所有&#x27;高等数学-1&#x27;同学的学号</span></span><br><span class="line"><span class="keyword">SELECT</span> subjectno <span class="keyword">FROM</span> subject <span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">&#x27;高等数学-1&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.分数不下雨80分的学生的学号和姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.studentno,studentname</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.studentno<span class="operator">=</span>r.studentno</span><br><span class="line"><span class="keyword">WHERE</span> studentresult<span class="operator">&gt;=</span><span class="number">80</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在这个基础上加一个科目，高等数学-1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.studentno,studentname</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.studentno<span class="operator">=</span>r.studentno</span><br><span class="line"><span class="keyword">WHERE</span> studentresult<span class="operator">&gt;=</span><span class="number">80</span> <span class="keyword">AND</span> subjectno<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">SELECT</span> subjectno <span class="keyword">FROM</span> subject <span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">&#x27;高等数学-1&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在改造（由里即外）</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> studentno <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">SELECT</span> studentno <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="keyword">WHERE</span> studentresult<span class="operator">&gt;</span><span class="number">80</span> <span class="keyword">AND</span> subjectno<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">SELECT</span> subjectno <span class="keyword">FROM</span> subject <span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">&#x27;高等数学-1&#x27;</span></span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="4-8-分组和过滤"><a href="#4-8-分组和过滤" class="headerlink" title="4.8 分组和过滤"></a>4.8 分组和过滤</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>分组过滤<span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="keyword">SELECT</span> subjectname,<span class="built_in">AVG</span>(studentresult),<span class="built_in">MAX</span>(studentresult),<span class="built_in">MIN</span>(studentresult)</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.subjectno <span class="operator">=</span> sub.subjectno</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> r.subjectno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(studentresult)<span class="operator">&gt;</span><span class="number">80</span>;</span><br></pre></td></tr></table></figure><h3 id="4-9-SELECT-总结"><a href="#4-9-SELECT-总结" class="headerlink" title="4.9 SELECT 总结"></a>4.9 SELECT 总结</h3><p><strong>顺序很重要</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 去重 要查询的字段 <span class="keyword">from</span> 表 （注意：表和字段可以取别名）</span><br><span class="line">XXX <span class="keyword">join</span> 要连接的表 <span class="keyword">on</span> 等值判断</span><br><span class="line"><span class="keyword">where</span>（具体的值，子查询语句）</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> （通过那个字段来分组）</span><br><span class="line"><span class="keyword">having</span> （过滤后的信息，条件和<span class="keyword">where</span>是一样的，位置不同）</span><br><span class="line"><span class="keyword">order</span> by..（通过那个字段排序）[升序<span class="operator">/</span>降序]</span><br><span class="line">limit startindex，pagesize</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">业务层面：</span><br><span class="line">查询：跨表，跨数据库</span><br></pre></td></tr></table></figure><h2 id="5-、MySQL函数"><a href="#5-、MySQL函数" class="headerlink" title="5 、MySQL函数"></a>5 、MySQL函数</h2><h3 id="5-1-常用函数"><a href="#5-1-常用函数" class="headerlink" title="5.1  常用函数"></a>5.1  常用函数</h3><p><a href="https://dev.mysql.com/doc/refman/5.7/en/">https://dev.mysql.com/doc/refman/5.7/en/</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-8</span>); <span class="comment">-- 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">9.4</span>) ;<span class="comment">-- 向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">9.4</span>);<span class="comment">-- 向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> RAND(); <span class="comment">-- 返回一个0~1之间的随机数</span></span><br><span class="line"><span class="keyword">SELECT</span> SIGN(<span class="number">-10</span>); <span class="comment">-- 判断一个数的符号，0 返回0 负数返回-1 正数返回1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;哈哈&#x27;</span>); <span class="comment">-- 字符串长度</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;爱&#x27;</span>,<span class="string">&#x27;你&#x27;</span>); <span class="comment">-- 拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;我爱编程helloworld&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;超级热爱&#x27;</span>); <span class="comment">-- 插入，替换</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;ZYY&#x27;</span>); <span class="comment">-- 小写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;zyy&#x27;</span>); <span class="comment">-- 大写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;zyy&#x27;</span>,<span class="string">&#x27;y&#x27;</span>); <span class="comment">-- 返回第一次出现的子串的索引</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;坚持就能成功&#x27;</span>,<span class="string">&#x27;坚持&#x27;</span>,<span class="string">&#x27;努力&#x27;</span>); <span class="comment">-- 替换出现的指定字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;坚持就能成功&#x27;</span>, <span class="number">5</span>, <span class="number">2</span>); <span class="comment">-- 返回指定的子字符串（源字符串，截取的位置，截取的长度）</span></span><br><span class="line"><span class="keyword">SELECT</span> REVERSE(<span class="string">&#x27;清晨我上马&#x27;</span>); <span class="comment">-- 反转</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间和日期函数（记住！）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>(); <span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE(); <span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW(); <span class="comment">-- 获取当前的时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIME</span>(); <span class="comment">-- 获取本地时间</span></span><br><span class="line"><span class="keyword">SELECT</span> SYSDATE(); <span class="comment">-- 获取系统时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW()); <span class="comment">-- 年</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(NOW()); <span class="comment">-- 月</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(NOW()); <span class="comment">-- 日</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(NOW()); <span class="comment">-- 时</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(NOW()); <span class="comment">-- 分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(NOW()); <span class="comment">-- 秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 系统</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SYSTEM_USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> VERSION();</span><br></pre></td></tr></table></figure><h3 id="5-2-聚合函数（常用）"><a href="#5-2-聚合函数（常用）" class="headerlink" title="5.2 聚合函数（常用）"></a>5.2 聚合函数（常用）</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>技术</td></tr><tr><td>SUM()</td><td>求和</td></tr><tr><td>AVG()</td><td>平均值</td></tr><tr><td>MAX()</td><td>最大值</td></tr><tr><td>MIN()</td><td>最小值</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 聚合函数</span></span><br><span class="line"><span class="comment">-- 都能统计 表中数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- count(字段) 会忽略所有的null值(想查询一个表中有多少个记录，就使用这个count())</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(student_name) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- COUNT(*) 不会忽略所有的null值 本质计算行数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- COUNT(1) 不会忽略所有的null值 本质计算行数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(student_result) <span class="keyword">AS</span> <span class="string">&#x27;总和&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(student_result) <span class="keyword">AS</span> <span class="string">&#x27;平均分&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(student_result) <span class="keyword">AS</span> <span class="string">&#x27;最高分&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(student_result) <span class="keyword">AS</span> <span class="string">&#x27;最低分&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></figure><h3 id="5-3-数据库级别的MD5加密（拓展）"><a href="#5-3-数据库级别的MD5加密（拓展）" class="headerlink" title="5.3 数据库级别的MD5加密（拓展）"></a>5.3 数据库级别的MD5加密（拓展）</h3><p>什么是MD5?</p><p>主要增加算法复杂度和不可逆性。</p><p>MD5不可逆，具体的值的md5是一样的</p><p>MD5破解网站的原理，背后有一个字典，MD5加密后的值，加密前的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `testmd5`(</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `pwd` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 明文密码</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `testmd5`(`id`,`name`,`pwd`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `testmd5`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 加密</span></span><br><span class="line"><span class="keyword">UPDATE</span> testmd5 <span class="keyword">SET</span> pwd<span class="operator">=</span>MD5(pwd) <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入的时候加密</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `testmd5`(`id`,`name`,`pwd`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;小明&#x27;</span>,MD5(<span class="string">&#x27;123456&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何校验，将用户传递进来的密码，进行MD5加密，然后比对加密后的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `testmd5` <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;小明&#x27;</span> <span class="keyword">AND</span> pwd <span class="operator">=</span> MD5(<span class="string">&#x27;123456&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="6、事务"><a href="#6、事务" class="headerlink" title="6、事务"></a>6、事务</h2><h3 id="1-什么是事务"><a href="#1-什么是事务" class="headerlink" title="1.什么是事务"></a>1.什么是事务</h3><p>&#x3D;&#x3D;要么都成功，要么都失败&#x3D;&#x3D;</p><p>将一组sql放到一个批次中取执行</p><blockquote><p>事务原则：ACID原则 原子性 、一致性、隔离性、持久性 （脏读，幻读。。。）</p></blockquote><p>参考博客链接：<a href="https://gitee.com/link?target=https://blog.csdn.net/dengjili/article/details/82468576">事务ACID理解</a></p><p><strong>原子性（Atomicity）</strong></p><p>要么都成功，要么都失败</p><p><strong>一致性（Consistency）</strong></p><p>事务前后的数据完整性要保持一致</p><p>下图操作前和操作后的总和都是1000</p><p><strong>隔离性（Isolation）</strong></p><p>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</p><p><strong>持久性（Durability）</strong></p><p>事务一旦移交不可逆，被持久化到数据库中</p><blockquote><p>隔离所导致的一些问题</p></blockquote><p><strong>脏读：</strong></p><p><strong>指一个事务读取到另一个事务未提交的数据。</strong></p><p><strong>不可重复读：</strong></p><p>在一个事务内读取表中的某一行数据，多次读取结果不同。（这个不一定是错误，只是某些场合不对）</p><p><strong>虚读(幻读)</strong></p><p>是指在一个事务内读取到别人的事务插入的数据，导致前后读取不一致。</p><h3 id="2-执行事务"><a href="#2-执行事务" class="headerlink" title="2. 执行事务"></a>2. 执行事务</h3><p>MySQL事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 事务</span></span><br><span class="line"><span class="comment">-- mysql 是默认开启事务自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关闭</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line"><span class="comment">-- 开启（默认的）</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动处理事务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">-- 关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;  <span class="comment">-- 标记一个事务的开始，从这个之后的sql都在同一个事务内</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> XX</span><br><span class="line"><span class="keyword">INSERT</span> XX</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交 ： 持久化</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 回滚 ： 回到的原来的样子（失败）</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="comment">-- 事务结束</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 开启自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 了解</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">-- 设置一个事务的保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">-- 回滚到保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">-- 撤销保存点</span></span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 转帐案例</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE shop <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci</span><br><span class="line">USE shop</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`money` <span class="type">DECIMAL</span>(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(`name`,`money`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;A&#x27;</span>,<span class="number">2000.00</span>),(<span class="string">&#x27;B&#x27;</span>,<span class="number">10000.00</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模拟转账事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>; <span class="comment">-- 关闭自动提交</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION  <span class="comment">-- 开启一个事务（一组事务）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> money<span class="operator">=</span>money<span class="number">-500</span> <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;A&#x27;</span> <span class="comment">-- A-500</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> money<span class="operator">=</span>money<span class="operator">+</span><span class="number">500</span> <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;B&#x27;</span> <span class="comment">-- B+500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>; <span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>; <span class="comment">-- 回滚</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> autocommit<span class="operator">=</span><span class="number">1</span>; <span class="comment">-- 恢复默认值</span></span><br></pre></td></tr></table></figure><h2 id="7、索引"><a href="#7、索引" class="headerlink" title="7、索引"></a>7、索引</h2><blockquote><p>Msql官方对索引的定义为：<strong>索引（index）是帮助MySQL高效获取数据的数据结构</strong>。</p><p>提取句子主干，就可以得到索引的本质：索引是数据结构。</p></blockquote><h3 id="1-索引的分类"><a href="#1-索引的分类" class="headerlink" title="1.索引的分类"></a>1.索引的分类</h3><blockquote><p>在一个表中，主键索引只能有一个，唯一索引可以有多个</p></blockquote><ul><li>主键索引（primary key）<ul><li>唯一的标识，主键不可重复，只能有一个列作为主键</li></ul></li><li>唯一索引 （unique key）<ul><li>避免重复的列出现，可以重复，多个列都可以标示为唯一索引</li></ul></li><li>常规索引（key&#x2F;index）<ul><li>默认的 index 或者key关键字来设置</li></ul></li><li>全文索引（FullText）<ul><li>在特定的数据库引擎下才有，myisam</li><li>快速定位数据</li></ul></li></ul><p>基础语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 索引的使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1.在创建表的时候给字段增加索引</span></span><br><span class="line"><span class="comment">-- 2.创建完毕后，增加索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示所有的索引信息</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 新增一个索引 (索引名) 列名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> KEY `UK_IDENTITY_CARD` (`identity_card`);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> KEY `K_STUDENT_NAME`(`student_name`);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student`  <span class="keyword">ADD</span> FULLTEXT INDEX `FI_PHONE` (`phone`);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- explain 分析sql执行的状况</span></span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student; <span class="comment">-- 非全文索引</span></span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(`phone`) AGAINST(<span class="string">&#x27;138&#x27;</span>); <span class="comment">-- 全文索引</span></span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/link?target=https://blog.csdn.net/jiadajing267/article/details/81269067">【MySQL优化】——看懂explain_漫漫长途，终有回转；余味苦涩，终有回甘-CSDN博客_explain</a></p><h3 id="2-索引的测试"><a href="#2-索引的测试" class="headerlink" title="2. 索引的测试"></a>2. 索引的测试</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>测试索引<span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> app_user(</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;用户昵称&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户邮箱&#x27;</span>,</span><br><span class="line">`phone` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">`gender` TINYINT(<span class="number">4</span>) UNSIGNED <span class="keyword">DEFAULT</span><span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;性别（0：男 1：女）&#x27;</span>,</span><br><span class="line">`password` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`age` TINYINT(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">`creat_time` DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`update_time`<span class="type">TIMESTAMP</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;app用户表&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>插入百w条数据<span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line">DELIMITER $$ <span class="comment">-- 写函数之前必须要写，标志</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">WHILE i<span class="operator">&lt;</span>num DO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> app_user(`name`,`email`,`phone`,`gender`,`password`,`age`)</span><br><span class="line"><span class="keyword">VALUES</span>(concat(<span class="string">&#x27;用户&#x27;</span>,i),<span class="string">&#x27;mysql.jiuzhe@gmail.com&#x27;</span>,CONCAT(<span class="string">&#x27;18&#x27;</span>,<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span>((<span class="number">99999999</span><span class="number">-10000000</span>)<span class="operator">+</span><span class="number">10000000</span>))),<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">2</span>),UUID(),<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">100</span>));</span><br><span class="line"><span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行函数</span></span><br><span class="line"><span class="keyword">SELECT</span> mock_data();</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user;</span><br><span class="line"></span><br><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>测试<span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="comment">-- 加索引前</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>; <span class="comment">-- 0.5s</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建索引</span></span><br><span class="line"><span class="comment">-- id_表名_字段名 索引名</span></span><br><span class="line"><span class="comment">-- CREATE INDEX 索引名 ON 表名(`字段名`)</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX id_app_user_name <span class="keyword">ON</span> app_user(`name`);</span><br><span class="line"><span class="comment">-- 加索引后</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>;</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="3-索引原则"><a href="#3-索引原则" class="headerlink" title="3. 索引原则"></a>3. 索引原则</h3><ul><li>索引不是越多越好</li><li>不要对经常变动的的数据加索引</li><li>小数据量不需要加索引</li><li>索引一般加在常用查询的字段上</li></ul><blockquote><p>索引的数据结构</p></blockquote><p>Hash类型的索引</p><p>Btree:InnoDB的默认数据结构</p><h2 id="8、权限管理和备份"><a href="#8、权限管理和备份" class="headerlink" title="8、权限管理和备份"></a>8、权限管理和备份</h2><h3 id="1-用户管理"><a href="#1-用户管理" class="headerlink" title="1. 用户管理"></a>1. 用户管理</h3><p>可视化管理</p><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704145840971.png" alt="img"></p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220126152641888.png" alt="image-20220126152641888"></p><p>用户表：mysql.user</p><p>本质:读这张表进行增删改查</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> hrd IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码（修改当前用户密码）</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="comment">-- 修改密码（指定用户）</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> hrd <span class="operator">=</span> PASSWORD(<span class="string">&#x27;111111&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重命名 RENAME 原名子 zyy TO 新名字;</span></span><br><span class="line">RENAME <span class="keyword">USER</span> hrd <span class="keyword">TO</span> newhrd;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户授权  ALL PRIVILEGES 全部的权限，库，表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALL PRIVILEGES 除了给别人授权不行，其他都能干</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> hrd;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> hrd;<span class="comment">-- 查看指定用户的权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> root<span class="variable">@localhost</span>; <span class="comment">-- 查看root用户的权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销权限 REVOKE哪些权限，在哪个库，给谁撤销</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">FROM</span> hrd;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> hrd;</span><br></pre></td></tr></table></figure><h3 id="2-MySQL备份"><a href="#2-MySQL备份" class="headerlink" title="2. MySQL备份"></a>2. MySQL备份</h3><p>为什么要备份？</p><ul><li>保证重要的数据不丢失</li><li>数据转移</li></ul><p>mysql数据库备份的方式</p><ul><li>直接拷贝物理文件</li><li>在sqlyog这种可视化工具中手动导出<ul><li>在想要导出的表或者库中，右键，</li></ul></li></ul><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704155338509.png" alt="img"></p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220126171042582.png" alt="image-20220126171042582"></p><p>使用命令行导出 mysqldump 命令行使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 一张表 mysqldump -h主机 -u用户名 -p密码 数据库 表名 &gt;物理磁盘位置/文件名</span><br><span class="line">mysqldump -hlocalhost -uroot -p123456 school student &gt;D:/a.sql</span><br><span class="line"></span><br><span class="line"># 多张表 mysqldump -h主机 -u用户名 -p密码 数据库 表名1 表名2 &gt;物理磁盘位置/文件名</span><br><span class="line">mysqldump -hlocalhost -uroot -p123456 school student result &gt;D:/a.sql</span><br><span class="line"></span><br><span class="line"># 数据库 mysqldump -h主机 -u用户名 -p密码 数据库 &gt;物理磁盘位置/文件名</span><br><span class="line">mysqldump -hlocalhost -uroot -p123456 school &gt;D:/a.sql</span><br><span class="line"></span><br><span class="line"># 导入</span><br><span class="line"># 登录的情况下，切换到指定的数据库</span><br><span class="line"># source 备份文件</span><br><span class="line"># 也可以这样</span><br><span class="line">mysql -u用户名 -p密码 库名&lt;备份文件</span><br></pre></td></tr></table></figure><p>假设你要备份数据库，防止数据丢失。</p><p>把数据库给别人，直接给sql即可。</p><h2 id="9、规范数据库设计"><a href="#9、规范数据库设计" class="headerlink" title="9、规范数据库设计"></a>9、规范数据库设计</h2><h3 id="1-项目数据库"><a href="#1-项目数据库" class="headerlink" title="1.项目数据库"></a>1.项目数据库</h3><p>当数据库比较复杂的时候，我们就需要设计了。</p><p><strong>糟糕的数据库设计</strong></p><ul><li>数据冗余，浪费空间</li><li>数据库插入和删除都会麻烦、异常（屏蔽使用物理外键）</li><li>程序的性能差</li></ul><p><strong>良好的数据库设计</strong></p><ul><li>节省内存空间</li><li>保证数据库的完整性</li><li>方便我们开发系统</li></ul><p><strong>软件开发中，关于数据库的设计</strong></p><ul><li>分析需求，分析业务和需要处理的数据库的需求</li><li>概要设计：设计关系图E-R图</li></ul><p><strong>设计数据库的步骤（个人博客）</strong></p><ul><li><p>收集信息，分析需求</p><ul><li><p>用户表（用户登录注销，用户的个人信息，写博客，创建分类）</p><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704162821445.png" alt="image-20210704162821445"></p></li><li><p>分类表（文章分类，谁创建的）</p><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704163120753.png" alt="image-20210704163120753"></p></li><li><p>文章表（文章信息）</p><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704164131400.png" alt="image-20210704164131400"></p></li><li><p>评论表</p><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704164555263.png" alt="image-20210704164555263"></p></li><li><p>友链表（友情链接信息）</p><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704164938625.png" alt="image-20210704164938625"></p></li><li><p>自定义表（系统信息，某个关键的字，或者一些主字段） <code>key:value</code></p></li><li><p>关注表(粉丝数)</p><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210704165556127.png" alt="image-20210704165556127"></p></li><li><p>说说表（发表心情， id…content…create_time）</p></li></ul></li><li><p>标识实体（把需求落到每个字段）</p></li><li><p>标识实体之间的关系</p><ul><li>写博客：user –&gt; blog</li><li>创建分类：user –&gt; category</li><li>关注：user –&gt; user</li><li>友链：links</li><li>评论：user –&gt; user –&gt; blog</li></ul></li></ul><p>(bbs &#x2F; crm)</p><h3 id="2-三大范式"><a href="#2-三大范式" class="headerlink" title="2. 三大范式"></a>2. 三大范式</h3><p><strong>为什么需要数据规范化？</strong></p><ul><li>信息重复</li><li>更新异常</li><li>插入异常<ul><li>无法正常显示信息</li></ul></li><li>删除异常<ul><li>丢失有效的信息</li></ul></li></ul><blockquote><p>三大范式</p></blockquote><p><strong>第一范式（1NF）</strong></p><p>原子性：保证每一列不可再分</p><p><strong>第二范式（2NF）</strong></p><p>前提：满足第一范式</p><p>第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。</p><p>每张表只描述一件事情</p><p><strong>第三范式（3NF）</strong></p><p>前提：满足第一范式和第二范式</p><p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p><p>规范数据库的设计</p><p><strong>规范性和性能的问题</strong></p><p>关联查询的表不得超过三张表</p><ul><li>考虑商业化的需求和目标（成本，用户体验）数据库的性能更加重要</li><li>在规范性能的问题的时候，需要适当的考虑一下规范性</li><li>故意给某些表增加一些冗余的字段。（从多表查询中变为单表查询）</li><li>故意增加一些计算列（从大数据库降低为小数据量的查询：索引）</li></ul><h2 id="10、JDBC-重点"><a href="#10、JDBC-重点" class="headerlink" title="10、JDBC(重点)"></a>10、JDBC(重点)</h2><h3 id="1-数据库驱动"><a href="#1-数据库驱动" class="headerlink" title="1.数据库驱动"></a>1.数据库驱动</h3><p>驱动：声卡，显卡，数据库</p><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210713212553844.png" alt="image-20210713212553844"></p><p>我们的程序会通过数据库驱动，和数据库打交道！</p><h3 id="2-JDBC"><a href="#2-JDBC" class="headerlink" title="2.JDBC"></a>2.JDBC</h3><p>SUN公司为了简化开发人员的（对数据库的统一）操作，提供了一个（java操作数据库的）规范，俗称JDBC</p><p>这些规范的实现由具体的厂商去做~</p><p>对于开发人员来说，我们只需要掌握JDBC接口的操作即可！</p><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210713213250382.png" alt="image-20210713213250382"></p><p>java.sql</p><p>javax.sql</p><p>还需要导入一个数据库驱动包 mysql-connector-java-5.1.47.jar</p><h3 id="3-第一个JDBC程序"><a href="#3-第一个JDBC程序" class="headerlink" title="3.第一个JDBC程序"></a>3.第一个JDBC程序</h3><blockquote><p>创建测试数据库</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE jdbcstudy <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> jdbcstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users(</span><br><span class="line">  `id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">  `password` <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">  `email` <span class="type">VARCHAR</span>(<span class="number">60</span>),</span><br><span class="line">  `birthday` <span class="type">DATE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(`id`,`name`,`password`,`email`,`birthday`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;zs@sina.com&#x27;</span>,<span class="string">&#x27;1980-12-04&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;lisi@sina.com&#x27;</span>,<span class="string">&#x27;1981-12-04&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;wangwu@sina.com&#x27;</span>,<span class="string">&#x27;1982-12-04&#x27;</span>);</span><br></pre></td></tr></table></figure><ol><li><p>创建一个普通项目</p></li><li><p>导入数据库驱动（jar包）</p><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210713215804024.png" alt="image-20210713215804024"></p></li></ol><p>3.编写测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcFirstDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="comment">//固定写法，加载驱动</span></span><br><span class="line">        <span class="comment">//useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">        <span class="comment">//2.用户信息和url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;xduniversity20&quot;</span>;</span><br><span class="line">        <span class="comment">//3.连接成功，数据库对象  Connection 代表数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.执行SQL的对象 Statement 执行 SQL对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.执行SQL的对象 去执行SQL,可能存在结果，查看返回结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);<span class="comment">//返回的结果集，结果集集中封装了我们全部的查询出来的结果</span></span><br><span class="line">        <span class="comment">//resultSet是一个链表</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id=&quot;</span>+resultSet.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span>+resultSet.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;pwd=&quot;</span>+resultSet.getObject(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;email=&quot;</span>+resultSet.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;birth=&quot;</span>+resultSet.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.释放连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤总结：</p><ol><li>加载驱动</li><li>连接数据库DriverManager</li><li>获取执行SQL的对象 Statement</li><li>获得返回的结果集</li><li>释放连接</li></ol><h3 id="4-第一个JDBC程序解释"><a href="#4-第一个JDBC程序解释" class="headerlink" title="4.第一个JDBC程序解释"></a>4.第一个JDBC程序解释</h3><blockquote><p>DriverManager</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.加载驱动</span></span><br><span class="line"><span class="comment">//DriverManager.registerDriver(new com.mysql.jdbc.Driver()); 静态代码块执行了两次</span></span><br><span class="line"><span class="comment">//推荐这种写法加载驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, userName, passWord);</span><br><span class="line"><span class="comment">// connection代表数据库</span></span><br><span class="line">connection.setAutoCommit(<span class="literal">true</span>);<span class="comment">// 数据库设置自动提交</span></span><br><span class="line">connection.commit();<span class="comment">// 事务提交</span></span><br><span class="line">connection.rollback();<span class="comment">// 事务回滚</span></span><br></pre></td></tr></table></figure><blockquote><p>URL</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mysql默认端口3306</span></span><br><span class="line"><span class="comment">// 协议://主机地址:端口号/数据库名?参数1&amp;参数2&amp;参数3</span></span><br><span class="line"><span class="comment">// oracle默认端口1521</span></span><br><span class="line"><span class="comment">// jdbc:oracle:thin:@localhost:1521:sid</span></span><br></pre></td></tr></table></figure><blockquote><p>Statement 执行sql对象 、 PreparedStatement 执行sql对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users&quot;</span>;<span class="comment">//编写SQL语句</span></span><br><span class="line"></span><br><span class="line">statement.executeQuery();<span class="comment">//执行查询 返回ResultSet</span></span><br><span class="line">statement.executeUpdate();<span class="comment">//新增，删除，修改，都用这个，返回受影响的行数</span></span><br><span class="line">statement.execute();<span class="comment">//执行任何SQL</span></span><br></pre></td></tr></table></figure><blockquote><p>ResultSet 查询的结果集，封装了所有的查询结果</p></blockquote><p>获得指定的数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在不知道列类型的情况下使用</span></span><br><span class="line">resultSet.getObject();</span><br><span class="line"><span class="comment">//如果知道列类型，就使用指定的类型</span></span><br><span class="line">resultSet.getString();</span><br><span class="line">resultSet.getInt();</span><br><span class="line">resultSet.getDouble();</span><br><span class="line">resultSet.getBigDecimal();</span><br><span class="line">resultSet.getFloat();</span><br><span class="line">resultSet.getDate();</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>遍历，指针(结果集是一个链表)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resultSet.beforeFirst();<span class="comment">//移动到最前面</span></span><br><span class="line">resultSet.afterLast();<span class="comment">//移动到最后面</span></span><br><span class="line">resultSet.next();<span class="comment">//移动到下一个数据   重点，其他没啥用</span></span><br><span class="line">resultSet.previous();<span class="comment">//移动到前一行</span></span><br><span class="line">resultSet.absolute(row);<span class="comment">//移动到指定行</span></span><br></pre></td></tr></table></figure><blockquote><p>释放资源</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();<span class="comment">//消耗资源,用完要关掉！</span></span><br></pre></td></tr></table></figure><h3 id="5-Statement对象详情"><a href="#5-Statement对象详情" class="headerlink" title="5.Statement对象详情"></a>5.Statement对象详情</h3><p>&#x3D;&#x3D;jdbc中的statement对象用于向数据库发送SQL语句，想完成对数据库的增删改查，只需要通过这个对象向数据库发送增删改查语句即可。&#x3D;&#x3D;</p><p>Statement对象的executeUpdate方法，用于向数据库发送增、删、改的SQL语句，executeUpdate执行完后，将会返回一个整数（即增删改语句导致了数据库几行数据发送了变化）。</p><p>Statement.executeQuery方法用于向数据库发送查询语句，executeQuery方法返回代表查询结果的ResultSet对象。</p><blockquote><p>CRUD操作-create</p></blockquote><p>使用executeUpdate(String sql)方法完成数据添加操作，示例操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into user(...) values(...)&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;插入成功~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CRUD操作-delete</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from user where id=1&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;删除成功~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CRUD操作-update</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set name=&#x27;&#x27; where name =&#x27;&#x27;&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;修改成功~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CRUD操作-read</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">    <span class="comment">//根据获取列的数据类型，分别调用resultSet的相应方法映射到java对象中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码实现</p></blockquote><p>1.配置文件db.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver = com.mysql.jdbc.<span class="type">Driver</span></span><br><span class="line"><span class="variable">url</span> <span class="operator">=</span> jdbc:mysql:<span class="comment">//localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">username = <span class="type">root</span></span><br><span class="line"><span class="variable">password</span> <span class="operator">=</span> xduniversity20</span><br></pre></td></tr></table></figure><p>2.提取工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lesson1.JdbcFirstDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(in);</span><br><span class="line"></span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            username = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//驱动只用加载一次</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,username,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(Connection con, Statement st, ResultSet rs)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (con != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.增删改 方法 ，<strong>executeUpdate</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInsert</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            con = JdbcUtils.getConnection();</span><br><span class="line">            st = con.createStatement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO users(`id`,`name`,`password`,`email`,`birthday`)\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VALUES (4,&#x27;hrd&#x27;,&#x27;123456&#x27;,&#x27;hrd.@gmail.com&#x27;,&#x27;2002-12-26&#x27;);&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(con,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDelete</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            con = JdbcUtils.getConnection();</span><br><span class="line">            st = con.createStatement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;DELETE FROM users WHERE `id`=4&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(con,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUpdate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            con = JdbcUtils.getConnection();</span><br><span class="line">            st = con.createStatement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE users SET `name`=&#x27;hrd&#x27;,`email`=&#x27;hrd.@gmail.com&#x27; WHERE id =1&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;更新成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(con,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.查询  <strong>executeQuery</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.plaf.nimbus.State;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSelect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            con = JdbcUtils.getConnection();</span><br><span class="line">            st = con.createStatement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users WHERE id=1&quot;</span>;</span><br><span class="line">            rs = st.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id=&quot;</span>+rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;name=&quot;</span>+rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;email=&quot;</span>+rs.getString(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(con,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-SQL注入问题"><a href="#6-SQL注入问题" class="headerlink" title="6.SQL注入问题"></a>6.SQL注入问题</h3><p>sql存在漏洞，会被攻击导致数据泄露  <strong>SQL会被拼接</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SQLQuestion</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//正常登录</span></span><br><span class="line">        login(<span class="string">&quot;hrd&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sql注入 非法登录</span></span><br><span class="line">        login(<span class="string">&quot;&#x27; or &#x27;1=1&quot;</span>,<span class="string">&quot; &#x27;or&#x27;1=1 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登陆业务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String userName,String password)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            con = JdbcUtils.getConnection();</span><br><span class="line">            st = con.createStatement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users WHERE name=&#x27;&quot;</span>+userName+<span class="string">&quot;&#x27; AND password=&#x27;&quot;</span>+password+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            System.out.println(sql);</span><br><span class="line">            rs = st.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id=&quot;</span>+rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;name=&quot;</span>+rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;email=&quot;</span>+rs.getString(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(con,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>导致结果：错误的用户名或者密码可以获取到全部的用户信息</p><h3 id="7-PreparedStatement对象"><a href="#7-PreparedStatement对象" class="headerlink" title="7.PreparedStatement对象"></a>7.PreparedStatement对象</h3><p>PreparedStatement可以防止SQL注入，效率更好</p><p>1.新增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lesson2.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInsert</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            con = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//使用？占位符代替参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO users(id,name,password,email,birthday) VALUES(?,?,?,?,?)&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译SQL 先写SQL，然后不执行</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>,<span class="string">&quot;黄瑞冬&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>,<span class="string">&quot;xduniversity20&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>,<span class="string">&quot;huangruidong.xauat@gmail.com&quot;</span>);</span><br><span class="line">            st.setDate(<span class="number">5</span>,<span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="keyword">new</span> <span class="title class_">java</span>.util.Date().getTime()));</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(con,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lesson2.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextDelete</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            con = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//使用？占位符代替参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;DELETE FROM users WHERE id=?&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译SQL 先写SQL，然后不执行</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(con,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lesson2.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUpdate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            con = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//使用？占位符代替参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE users SET email=? WHERE id=?&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译SQL 先写SQL，然后不执行</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setString(<span class="number">1</span>,<span class="string">&quot;jiuzhe@gmail.com&quot;</span>);</span><br><span class="line">            st.setInt(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(con,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lesson2.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSelect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            con = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//?占位</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users WHERE id=?&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            rs = st.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id=&quot;</span>+rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;name=&quot;</span>+rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;email=&quot;</span>+rs.getString(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;birthday=&quot;</span>+rs.getDate(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(con,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.防止sql注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lesson2.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SQLQuestion</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//正常登录</span></span><br><span class="line">        login(<span class="string">&quot;hrd&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sql注入 非法登录</span></span><br><span class="line">        login(<span class="string">&quot;&#x27; or &#x27;1=1&quot;</span>,<span class="string">&quot; &#x27;or&#x27;1=1 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登陆业务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String userName,String password)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            con = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">// PreparedStatement 防止SQL注入的本质，把传递进来的参数当做字符</span></span><br><span class="line">            <span class="comment">// 假设其中存在转义字符，比如说&#x27;会被直接转义</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users WHERE name=? AND password=?&quot;</span>;</span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            st.setString(<span class="number">1</span>,userName);</span><br><span class="line">            st.setString(<span class="number">2</span>,password);</span><br><span class="line">            rs = st.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id=&quot;</span>+rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;name=&quot;</span>+rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;email=&quot;</span>+rs.getString(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(con,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-使用idea连接数据库"><a href="#8-使用idea连接数据库" class="headerlink" title="8.使用idea连接数据库"></a>8.使用idea连接数据库</h3><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210715092417582.png" alt="image-20210715092417582"></p><p>连接成功后，就可以选择数据库</p><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210715095230497.png" alt="image-20210715095230497"></p><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210715095449617.png" alt="image-20210715095449617"></p><p>连接不上的话，可以看一下下面这里，配置对应的mysql版本</p><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210715214953909.png" alt="image-20210715214953909"></p><p>双击数据库</p><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210715095953750.png" alt="image-20210715095953750"></p><p>更新数据（提交）</p><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210715100117897.png" alt="image-20210715100117897"></p><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210715214142285.png" alt="image-20210715214142285"></p><p>idea编写sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> account</span><br><span class="line">(</span><br><span class="line">    id    <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name  <span class="type">varchar</span>(<span class="number">40</span>),</span><br><span class="line">    money <span class="type">float</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account(name, money)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;A&#x27;</span>, <span class="number">1000</span>),</span><br><span class="line">       (<span class="string">&#x27;B&#x27;</span>, <span class="number">1000</span>),</span><br><span class="line">       (<span class="string">&#x27;C&#x27;</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zhayuyao/img/raw/master/zhayuyao/img/image-20210715214803462.png" alt="image-20210715214803462"></p><h3 id="9-JDBC操作事务"><a href="#9-JDBC操作事务" class="headerlink" title="9.JDBC操作事务"></a>9.JDBC操作事务</h3><p>&#x3D;&#x3D;要么都成功，要么都失败&#x3D;&#x3D;</p><blockquote><p>ACID原则</p></blockquote><p>原子性：要么全部成功，要么全部失败</p><p>一致性：总数不变</p><p>隔离性：多个进程互不干扰</p><p>持久性：一旦提交不可逆，持久化到数据库了</p><p>隔离性的问题：</p><p>脏读：一个事务读取了另外一个没有提交的事务</p><p>不可重复读：在同一个事务内，重复读取表中数据，表数据发生了改变</p><p>幻读：在一个事务内，读取到了别人插入的数据，导致前后读出来的结果不一致</p><blockquote><p>代码实现</p></blockquote><ol><li>开启事务<code>con.setAutoCommit(false);</code></li><li>一组业务执行完毕，提交事务</li><li>可以在catch语句中显示的定义回滚语句，但是默认失败就会回滚</li></ol><p>正常情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Connection;</span><br><span class="line"><span class="keyword">import</span> lesson2.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTransaction1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            con = (Connection) JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//关闭自动提交 自动开启事务</span></span><br><span class="line">            con.setAutoCommit(<span class="literal">false</span>);<span class="comment">//开启事务</span></span><br><span class="line">            <span class="comment">//A转B 100</span></span><br><span class="line">            String sql1=<span class="string">&quot;update account set money=money-100 where name=&#x27;A&#x27;&quot;</span>;</span><br><span class="line">            st = con.prepareStatement(sql1);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line">            String sql2=<span class="string">&quot;update account set money=money+100 where name=&#x27;B&#x27;&quot;</span>;</span><br><span class="line">            st = con.prepareStatement(sql2);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line">            <span class="comment">//业务完毕，提交事务</span></span><br><span class="line">            con.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;转账成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(con,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>异常情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Connection;</span><br><span class="line"><span class="keyword">import</span> lesson2.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTransaction2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            con = (Connection) JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//关闭自动提交 自动开启事务</span></span><br><span class="line">            con.setAutoCommit(<span class="literal">false</span>);<span class="comment">//开启事务</span></span><br><span class="line">            <span class="comment">//A转B 100</span></span><br><span class="line">            String sql1=<span class="string">&quot;update account set money=money-100 where name=&#x27;A&#x27;&quot;</span>;</span><br><span class="line">            st = con.prepareStatement(sql1);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//给一个异常</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            String sql2=<span class="string">&quot;update account set money=money+100 where name=&#x27;B&#x27;&quot;</span>;</span><br><span class="line">            st = con.prepareStatement(sql2);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line">            <span class="comment">//业务完毕，提交事务</span></span><br><span class="line">            con.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;转账成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">//即使不写回滚，系统提交不上去，也会自动回滚</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(con,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-DBCP-C3P0连接池"><a href="#10-DBCP-C3P0连接池" class="headerlink" title="10.DBCP-C3P0连接池"></a>10.DBCP-C3P0连接池</h3><p>数据库连接 – 执行完毕 – 释放</p><p>连接– 释放 是十分浪费系统资源的</p><p>池化技术：准备一些预先的资源，过来就连接预先准备好的</p><p>最小连接数：10(常用连接)</p><p>最大连接数：100 （业务最高承载上线）</p><p>等待超时：100ms</p><p>编写连接池，实现一个接口DataSource</p><blockquote><p>开源数据源实现</p></blockquote><p>DBCP</p><p>C3p0</p><p>Druid:阿里巴巴</p><p>使用了这些数据库连接池之后，我们在项目开发中就不需要编写连接数据库的代码了</p><blockquote><p>DBCP</p></blockquote><p>需要用到的jar包</p><p>commons-dbcp-1.4</p><p>commons-pool-1.6</p><p>配置文件dbcp.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#????</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">xduniversity20</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#?????</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#??????</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">50</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#??????</span></span><br><span class="line"><span class="attr">maxIdle</span>=<span class="string">20</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#??????</span></span><br><span class="line"><span class="attr">minIdle</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#???????????? 6000??/1000??60?</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">60000</span></span><br><span class="line"><span class="comment">#JDBC?????????????????????????????=property;?</span></span><br><span class="line"><span class="comment">#???user ? password ????????????????????????</span></span><br><span class="line"><span class="attr">connectionProperties</span>=<span class="string">useUnicode=true;characterEncoding=UTF8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#??????????????????auto-commit????</span></span><br><span class="line"><span class="attr">defaultAutoCommit</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#driver default ????????????????read-only????</span></span><br><span class="line"><span class="comment">#???????????setReadOnly?????????????????????????Informix?</span></span><br><span class="line"><span class="attr">defaultReadOnly</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#driver default ??????????????????TransactionIsolation??</span></span><br><span class="line"><span class="comment">#??????????????javadoc??NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE</span></span><br><span class="line"><span class="attr">defaultTransactionIsolation</span>=<span class="string">READ_COMMITTED</span></span><br></pre></td></tr></table></figure><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson5;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Connection;</span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Statement;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp.BasicDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDBCPUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> JDBCDBCPUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;dbcp.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(in);</span><br><span class="line">            <span class="comment">//创建数据源 工厂模式</span></span><br><span class="line">            dataSource = BasicDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//从数据源中获取连接</span></span><br><span class="line">        <span class="keyword">return</span> (Connection) dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(Connection con, Statement st, ResultSet rs)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (con != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lesson2.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDBCP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            con = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//使用？占位符代替参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO users(id,name,password,email,birthday) VALUES(?,?,?,?,?)&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译SQL 先写SQL，然后不执行</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">7</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>,<span class="string">&quot;黄瑞冬&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>,<span class="string">&quot;xduniversity20&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>,<span class="string">&quot;huangruidong.xauat@gmail.com&quot;</span>);</span><br><span class="line">            st.setDate(<span class="number">5</span>,<span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="keyword">new</span> <span class="title class_">java</span>.util.Date().getTime()));</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(con,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>C3P0</p></blockquote><p>需要用到的jar包</p><p>c3p0-0.9.5.5.jar</p><p>mchange-commons-java-0.2.19.jar</p><p>配置文件c3p0-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    c3p0的缺省（默认）配置</span></span><br><span class="line"><span class="comment">    如果在代码中ComboPooledDataSource ds=new ComboPooledDataSource();这样写就表示使用的是c3p0的缺省（默认）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>xduniversity20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquiredIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    c3p0的命名配置</span></span><br><span class="line"><span class="comment">    如果在代码中ComboPooledDataSource ds=new ComboPooledDataSource(&quot;MySQL&quot;);这样写就表示使用的是name是MySQL</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name-config</span> <span class="attr">name</span>=<span class="string">&quot;MySQL&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>xduniversity20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquiredIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">name-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCC3P0Utils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//private static ComboPooledDataSource dataSource = null;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//代码方式配置</span></span><br><span class="line"><span class="comment">//            dataSource = new ComboPooledDataSource();</span></span><br><span class="line"><span class="comment">//            dataSource.setDriverClass();</span></span><br><span class="line"><span class="comment">//            dataSource.setJdbcUrl();</span></span><br><span class="line"><span class="comment">//            dataSource.setUser();</span></span><br><span class="line"><span class="comment">//            dataSource.setPassword();</span></span><br><span class="line"><span class="comment">//            dataSource.setMaxPoolSize();</span></span><br><span class="line"><span class="comment">//            dataSource.setMinPoolSize();</span></span><br><span class="line">            <span class="comment">//配置文件写法</span></span><br><span class="line">            dataSource = <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(<span class="string">&quot;MySQL&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> java.sql.Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//从数据源中获取连接</span></span><br><span class="line">        <span class="keyword">return</span>  dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(Connection con, PreparedStatement st, ResultSet rs)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (con != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lesson2.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestC3P0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            con = JDBCC3P0Utils.getConnection();</span><br><span class="line">            <span class="comment">//使用？占位符代替参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO users(id,name,password,email,birthday) VALUES(?,?,?,?,?)&quot;</span>;</span><br><span class="line">            <span class="comment">//预编译SQL 先写SQL，然后不执行</span></span><br><span class="line">            st = con.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>,<span class="string">&quot;黄瑞冬&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>,<span class="string">&quot;xduniversity20&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>,<span class="string">&quot;huangruidong.xauat@gmail.com&quot;</span>);</span><br><span class="line">            st.setDate(<span class="number">5</span>,<span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="keyword">new</span> <span class="title class_">java</span>.util.Date().getTime()));</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCC3P0Utils.release((com.mysql.jdbc.Connection) con,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>总结</p></blockquote><p>无论用什么数据源，本质还是一样的，DataSource接口不会变，方法就不会变。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rabbit MQ</title>
      <link href="/2022/11/20/RabbitMQ/"/>
      <url>/2022/11/20/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="Rabbit-MQ"><a href="#Rabbit-MQ" class="headerlink" title="Rabbit MQ"></a>Rabbit MQ</h1><h2 id="MQ基本概念"><a href="#MQ基本概念" class="headerlink" title="MQ基本概念"></a>MQ基本概念</h2><h3 id="MQ概述"><a href="#MQ概述" class="headerlink" title="MQ概述"></a>MQ概述</h3><p>MQ全称 Message Queue（消息队列），是在<code>消息的传输过程中保存消息的容器</code>。多用于<code>分布式系统之间进行通信</code>。</p><p>直接调用：</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171023027.png" alt="image-20221017102354985"></p><p>改进为：</p><p>借助第三方完成通信</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171024464.png" alt="image-20221017102411430"></p><ul><li>MQ，消息队列，存储消息的中间件</li><li>分布式系统通信两种方式：直接远程调用 和 借助第三方 完成间接通信</li><li>发送方称为生产者，接收方称为消费者</li></ul><h3 id="MQ的优劣"><a href="#MQ的优劣" class="headerlink" title="MQ的优劣"></a>MQ的优劣</h3><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171026966.png" alt="image-20221017102603930"></p><h4 id="MQ的优势"><a href="#MQ的优势" class="headerlink" title="MQ的优势"></a>MQ的优势</h4><h5 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h5><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171026208.png" alt="image-20221017102635168"></p><p>对于修改相关连的子系统，需要对整个系统进行修改。系统耦合度高。</p><p><strong>系统的耦合性越高，容错性就越低，可维护性就越低</strong></p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171027077.png" alt="image-20221017102753030"></p><p>使用MQ，订单系统的信息直接存入MQ，后续的相关业务系统通过访问MQ来获取信息。</p><p><strong>使用 MQ 使得应用间解耦，提升容错性和可维护性。</strong></p><h5 id="异步提速"><a href="#异步提速" class="headerlink" title="异步提速"></a>异步提速</h5><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171029229.png" alt="image-20221017102929182"></p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171029493.png" alt="image-20221017102951445"></p><p>利用MQ，用户输入信息后，先存在MQ，直接对用户进行相应，降低延迟。后续业务可以利用多线程完成。</p><h5 id="削峰填谷"><a href="#削峰填谷" class="headerlink" title="削峰填谷"></a>削峰填谷</h5><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171031679.png" alt="image-20221017103158632"></p><p>如果系统可接受的请求数量小于发送的请求数量，系统就会直接崩掉。利用MQ来缓存请求信息，可以保证服务器的稳定，保证其正常运行。</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171033114.png" alt="image-20221017103321069"></p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171033709.png" alt="image-20221017103337658"></p><ul><li>应用解耦：提高系统容错性和可维护性</li><li>异步提速：提升用户体验和系统吞吐量</li><li>削峰填谷：提高系统稳定性</li></ul><h4 id="MQ的劣势"><a href="#MQ的劣势" class="headerlink" title="MQ的劣势"></a>MQ的劣势</h4><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171035406.png" alt="image-20221017103519369"></p><h5 id="系统可用性降低"><a href="#系统可用性降低" class="headerlink" title="系统可用性降低"></a>系统可用性降低</h5><p>系统引入的外部依赖越多，系统稳定性越差。一旦 MQ 宕机，就会对业务造成影响。如何保证MQ的高可用？</p><h5 id="系统复杂度降低"><a href="#系统复杂度降低" class="headerlink" title="系统复杂度降低"></a>系统复杂度降低</h5><p>MQ 的加入大大增加了系统的复杂度，以前系统间是同步的远程调用，现在是通过 MQ 进行异步调用。如何保证消息没有被重复消费？怎么处理消息丢失情况？那么保证消息传递的顺序性？</p><h5 id="一致性问题"><a href="#一致性问题" class="headerlink" title="一致性问题"></a>一致性问题</h5><p>A 系统处理完业务，通过 MQ 给B、C、D三个系统发消息数据，如果 B 系统、C 系统处理成功，D 系统处理失败。如何保证消息数据处理的一致性？</p><hr><p>对于MQ的优劣，MQ 需要满足什么条件：</p><p>① 生产者不需要从消费者处获得反馈。引入消息队列之前的直接调用，其接口的返回值应该为空，这才让明</p><p>明下层的动作还没做，上层却当成动作做完了继续往后走，即所谓异步成为了可能。</p><p>② 容许短暂的不一致性。</p><p>③ 确实是用了有效果。即解耦、提速、削峰这些方面的收益，超过加入MQ，管理MQ这些成本</p><h3 id="常见的MQ产品"><a href="#常见的MQ产品" class="headerlink" title="常见的MQ产品"></a>常见的MQ产品</h3><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171039420.png" alt="image-20221017103935360"></p><h3 id="Rabbit-MQ简介"><a href="#Rabbit-MQ简介" class="headerlink" title="Rabbit MQ简介"></a>Rabbit MQ简介</h3><p><strong>AMQP</strong>，即 Advanced Message Queuing Protocol（<code>高级消息队列协议</code>），是一个网络协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端&#x2F;中间件不同产品，不同的开发语言等条件的限制。2006年，AMQP 规范发布。类比HTTP。</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171040287.png" alt="image-20221017104038246"></p><p>2007年，Rabbit 技术公司基于 AMQP 标准开发的 RabbitMQ 1.0 发布。RabbitMQ 采用 Erlang 语言开发。</p><p>Erlang 语言由 Ericson 设计，专门为开发<code>高并发和分布式系统</code>的一种语言，在电信领域使用广泛。</p><p>RabbitMQ 基础架构如下图：</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171041216.png" alt="image-20221017104125171"></p><hr><p>RabbitMQ 中的相关概念：</p><ul><li><p>Broker：接收和分发消息的应用，RabbitMQ Server就是 Message Broker</p></li><li><p>Virtual host（虚拟机）：出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似于网络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出多个vhost，每个用户在自己的 vhost 创建 exchange／queue 等</p></li><li><p>Connection：publisher／consumer 和 broker 之间的 TCP 连接</p></li><li><p>Channel：如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP Connection的开销将是巨大的，效率也较低。Channel 是在 <code>connection 内部建立的逻辑连接</code>，如果应用程序支持多线程，通常每个thread创建单独的 channel 进行通讯，AMQP method 包含了channel id 帮助客户端和message broker 识别 channel，所以 channel 之间是完全隔离的。<strong>Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP connection 的开销</strong></p></li><li><p>Exchange(交换机)：message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发消息到queue 中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout (multicast)</p></li><li><p>Queue（队列）：消息最终被送到这里等待 consumer 取走</p></li><li><p>Binding（绑定）：exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key。Binding 信息被保存到 exchange 中的查询表中，用于 message 的分发依据</p></li></ul><hr><p>RabbitMQ 提供了 6 种<strong>工作模式</strong>：简单模式、work queues、Publish&#x2F;Subscribe 发布与订阅模式、Routing路由式、Topics 主题模式、RPC 远程调用模式（远程调用，不太算 MQ；暂不作介绍）。</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171046024.png" alt="image-20221017104656973"></p><h3 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h3><ul><li><p>JMS 即 Java 消息服务（JavaMessage Service）应用程序接口，是一个 Java 平台中关于面向消息中间件的API</p></li><li><p>JMS 是 JavaEE 规范中的一种，类比JDBC</p></li><li><p>很多消息中间件都实现了JMS规范，例如：ActiveMQ。RabbitMQ 官方没有提供 JMS 的实现包，但是开源社区有</p></li></ul><p><strong>小结</strong></p><ol><li><p>RabbitMQ 是基于 AMQP 协议使用 Erlang 语言开发的一款消息队列产品。</p></li><li><p>RabbitMQ提供了6种工作模式，我们学习5种。这是今天的重点。</p></li><li><p>AMQP 是协议，类比HTTP。</p></li><li><p>JMS 是 API 规范接口，类比 JDBC。</p></li></ol><h2 id="MQ快速入门"><a href="#MQ快速入门" class="headerlink" title="MQ快速入门"></a>MQ快速入门</h2><p>需求：使用简单模式完成消息传递</p><p>步骤：</p><p>① 创建工程（生成者、消费者）</p><p>② 分别添加依赖</p><p>③ 编写生产者发送消息</p><p>④ 编写消费者接收消息</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171050480.png" alt="image-20221017105000425"></p><p>和JDBC操作数据库类似</p><p>生产者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    <span class="comment">//2.设置参数</span></span><br><span class="line">    factory.setHost(<span class="string">&quot;192.168.184.100&quot;</span>);<span class="comment">//ip 默认值 localhost</span></span><br><span class="line">    factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">    factory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">    factory.setUsername(<span class="string">&quot;dong&quot;</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">    factory.setPassword(<span class="string">&quot;dong&quot;</span>);<span class="comment">//密码 默认 guest</span></span><br><span class="line">    <span class="comment">//3.创建连接 Connection</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="comment">//4.创建Channel</span></span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.创建队列Queue</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">        * 1.queue： 队列名称</span></span><br><span class="line"><span class="comment">        * 2.durable： 是否持久化，当mq重启后，还在</span></span><br><span class="line"><span class="comment">        * 3.exclusive：</span></span><br><span class="line"><span class="comment">        *   是否独占，只有一个消费者能够监听这个队列</span></span><br><span class="line"><span class="comment">        *   当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">        * 4.autoDelete： 是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">        * 5.arguments： 参数</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    <span class="comment">//如果没有一个叫hello_world的队列，则创建该队列，如果有该队列，则不创建</span></span><br><span class="line">    channel.queueDeclare(<span class="string">&quot;hello_world&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.发送消息</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body)</span></span><br><span class="line"><span class="comment">        * 1.exchange： 交换机的名称。简单模式交换机会使用默认的。</span></span><br><span class="line"><span class="comment">        * 2.routingKey： 路由名称</span></span><br><span class="line"><span class="comment">        * 3.props： 配置信息</span></span><br><span class="line"><span class="comment">        * 4.body： 发送消息数据</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;hello rabbit_mq!!!&quot;</span>;</span><br><span class="line">    channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;hello_world&quot;</span>, <span class="literal">null</span>, body.getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7.释放资源</span></span><br><span class="line">    channel.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    <span class="comment">//2.设置参数</span></span><br><span class="line">    factory.setHost(<span class="string">&quot;192.168.184.100&quot;</span>);<span class="comment">//ip 默认值 localhost</span></span><br><span class="line">    factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">    factory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">    factory.setUsername(<span class="string">&quot;dong&quot;</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">    factory.setPassword(<span class="string">&quot;dong&quot;</span>);<span class="comment">//密码 默认 guest</span></span><br><span class="line">    <span class="comment">//3.创建连接 Connection</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="comment">//4.创建Channel</span></span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.创建队列Queue</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">         * 1.queue： 队列名称</span></span><br><span class="line"><span class="comment">         * 2.durable： 是否持久化，当mq重启后，还在</span></span><br><span class="line"><span class="comment">         * 3.exclusive：</span></span><br><span class="line"><span class="comment">         *   是否独占，只有一个消费者能够监听这个队列</span></span><br><span class="line"><span class="comment">         *   当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">         * 4.autoDelete： 是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">         * 5.arguments： 参数</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">    <span class="comment">//如果没有一个叫hello_world的队列，则创建该队列，如果有该队列，则不创建</span></span><br><span class="line">    channel.queueDeclare(<span class="string">&quot;hello_world&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.接收消息</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">        * 1.queue: 队列名称</span></span><br><span class="line"><span class="comment">        * 2.autoAck： 是否自动确认</span></span><br><span class="line"><span class="comment">        * 3.callback： 回调对象</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            * 1.consumerTag： 标识</span></span><br><span class="line"><span class="comment">            * 2.envelope： 获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">            * 3.properties: 配置信息</span></span><br><span class="line"><span class="comment">            * 4.body： 数据</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;consumerTag：&quot;</span> + consumerTag);</span><br><span class="line">            System.out.println(<span class="string">&quot;Exchange：&quot;</span> + envelope.getExchange());</span><br><span class="line">            System.out.println(<span class="string">&quot;RoutingKey：&quot;</span> + envelope.getRoutingKey());</span><br><span class="line">            System.out.println(<span class="string">&quot;properties：&quot;</span> + properties);</span><br><span class="line">            System.out.println(<span class="string">&quot;body：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    channel.basicConsume(<span class="string">&quot;hello_world&quot;</span>, <span class="literal">true</span>, consumer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源？消费者是监听程序，不需要关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MQ的工作模式"><a href="#MQ的工作模式" class="headerlink" title="MQ的工作模式"></a>MQ的工作模式</h2><h3 id="Work-Queue工作队列模式"><a href="#Work-Queue工作队列模式" class="headerlink" title="Work Queue工作队列模式"></a>Work Queue工作队列模式</h3><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171052332.png" alt="image-20221017105234298"></p><ul><li><p><strong>Work Queues：</strong>与入门程序的简单模式相比，多了一个或一些消费端，多个消费端共同消费同一个队列中的息。</p></li><li><p><strong>应用场景</strong>：对于任务过重或任务较多情况使用工作队列可以提高任务处理的速度</p></li></ul><p>生产者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    <span class="comment">//2.设置参数</span></span><br><span class="line">    factory.setHost(<span class="string">&quot;192.168.184.100&quot;</span>);<span class="comment">//ip 默认值 localhost</span></span><br><span class="line">    factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">    factory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">    factory.setUsername(<span class="string">&quot;dong&quot;</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">    factory.setPassword(<span class="string">&quot;dong&quot;</span>);<span class="comment">//密码 默认 guest</span></span><br><span class="line">    <span class="comment">//3.创建连接 Connection</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="comment">//4.创建Channel</span></span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.创建队列Queue</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">    * 1.queue： 队列名称</span></span><br><span class="line"><span class="comment">    * 2.durable： 是否持久化，当mq重启后，还在</span></span><br><span class="line"><span class="comment">    * 3.exclusive：</span></span><br><span class="line"><span class="comment">    *   是否独占，只有一个消费者能够监听这个队列</span></span><br><span class="line"><span class="comment">    *   当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">    * 4.autoDelete： 是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">    * 5.arguments： 参数</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="comment">//如果没有一个叫hello_world的队列，则创建该队列，如果有该队列，则不创建</span></span><br><span class="line">    channel.queueDeclare(<span class="string">&quot;work_queues&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.发送消息</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body)</span></span><br><span class="line"><span class="comment">    * 1.exchange： 交换机的名称。简单模式交换机会使用默认的。</span></span><br><span class="line"><span class="comment">    * 2.routingKey： 路由名称</span></span><br><span class="line"><span class="comment">    * 3.props： 配置信息</span></span><br><span class="line"><span class="comment">    * 4.body： 发送消息数据</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> i + <span class="string">&quot;hello rabbit_mq!!!&quot;</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;work_queues&quot;</span>, <span class="literal">null</span>, body.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7.释放资源</span></span><br><span class="line">    channel.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    <span class="comment">//2.设置参数</span></span><br><span class="line">    factory.setHost(<span class="string">&quot;192.168.184.100&quot;</span>);<span class="comment">//ip 默认值 localhost</span></span><br><span class="line">    factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">    factory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">    factory.setUsername(<span class="string">&quot;dong&quot;</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">    factory.setPassword(<span class="string">&quot;dong&quot;</span>);<span class="comment">//密码 默认 guest</span></span><br><span class="line">    <span class="comment">//3.创建连接 Connection</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="comment">//4.创建Channel</span></span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.创建队列Queue</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">     * 1.queue： 队列名称</span></span><br><span class="line"><span class="comment">     * 2.durable： 是否持久化，当mq重启后，还在</span></span><br><span class="line"><span class="comment">     * 3.exclusive：</span></span><br><span class="line"><span class="comment">     *   是否独占，只有一个消费者能够监听这个队列</span></span><br><span class="line"><span class="comment">     *   当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">     * 4.autoDelete： 是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">     * 5.arguments： 参数</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="comment">//如果没有一个叫hello_world的队列，则创建该队列，如果有该队列，则不创建</span></span><br><span class="line">    channel.queueDeclare(<span class="string">&quot;work_queues&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.接收消息</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">    * 1.queue: 队列名称</span></span><br><span class="line"><span class="comment">    * 2.autoAck： 是否自动确认</span></span><br><span class="line"><span class="comment">    * 3.callback： 回调对象</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 1.consumerTag： 标识</span></span><br><span class="line"><span class="comment">        * 2.envelope： 获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">        * 3.properties: 配置信息</span></span><br><span class="line"><span class="comment">        * 4.body： 数据</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="comment">/*System.out.println(&quot;consumerTag：&quot; + consumerTag);</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;Exchange：&quot; + envelope.getExchange());</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;RoutingKey：&quot; + envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;properties：&quot; + properties);*/</span></span><br><span class="line">            System.out.println(<span class="string">&quot;body：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    channel.basicConsume(<span class="string">&quot;work_queues&quot;</span>, <span class="literal">true</span>, consumer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源？消费者是监听程序，不需要关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    <span class="comment">//2.设置参数</span></span><br><span class="line">    factory.setHost(<span class="string">&quot;192.168.184.100&quot;</span>);<span class="comment">//ip 默认值 localhost</span></span><br><span class="line">    factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">    factory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">    factory.setUsername(<span class="string">&quot;dong&quot;</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">    factory.setPassword(<span class="string">&quot;dong&quot;</span>);<span class="comment">//密码 默认 guest</span></span><br><span class="line">    <span class="comment">//3.创建连接 Connection</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="comment">//4.创建Channel</span></span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.创建队列Queue</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">     * 1.queue： 队列名称</span></span><br><span class="line"><span class="comment">     * 2.durable： 是否持久化，当mq重启后，还在</span></span><br><span class="line"><span class="comment">     * 3.exclusive：</span></span><br><span class="line"><span class="comment">     *   是否独占，只有一个消费者能够监听这个队列</span></span><br><span class="line"><span class="comment">     *   当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">     * 4.autoDelete： 是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">     * 5.arguments： 参数</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="comment">//如果没有一个叫hello_world的队列，则创建该队列，如果有该队列，则不创建</span></span><br><span class="line">    channel.queueDeclare(<span class="string">&quot;work_queues&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.接收消息</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">    * 1.queue: 队列名称</span></span><br><span class="line"><span class="comment">    * 2.autoAck： 是否自动确认</span></span><br><span class="line"><span class="comment">    * 3.callback： 回调对象</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 1.consumerTag： 标识</span></span><br><span class="line"><span class="comment">        * 2.envelope： 获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">        * 3.properties: 配置信息</span></span><br><span class="line"><span class="comment">        * 4.body： 数据</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="comment">/*System.out.println(&quot;consumerTag：&quot; + consumerTag);</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;Exchange：&quot; + envelope.getExchange());</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;RoutingKey：&quot; + envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;properties：&quot; + properties);*/</span></span><br><span class="line">            System.out.println(<span class="string">&quot;body：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    channel.basicConsume(<span class="string">&quot;work_queues&quot;</span>, <span class="literal">true</span>, consumer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源？消费者是监听程序，不需要关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><ol><li><p>在一个队列中如果有多个消费者，那么消费者之间对于同一个消息的关系是<strong>竞争</strong>的关系。</p></li><li><p><strong>Work Queues</strong> 对于任务过重或任务较多情况使用工作队列可以提高任务处理的速度。例如：短信服务部署多个，只需要有一个节点成功发送即。</p></li></ol><h3 id="Pub-x2F-Sub-订阅模式"><a href="#Pub-x2F-Sub-订阅模式" class="headerlink" title="Pub&#x2F;Sub 订阅模式"></a>Pub&#x2F;Sub 订阅模式</h3><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171055713.png" alt="image-20221017105524673"></p><p>多了一台交换机</p><p>在订阅模型中，多了一个 Exchange 角色，而且过程略有变化：</p><ul><li><p>P：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</p></li><li><p>C：消费者，消息的接收者，会一直等待消息到来</p></li><li><p>Queue：消息队列，接收消息、缓存消息</p></li><li><p>Exchange：交换机（X）。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有常见以下3种型：</p></li></ul><p>➢ Fanout：广播，将消息交给所有绑定到交换机的队列</p><p>➢ Direct：定向，把消息交给符合指定routing key 的队列</p><p>➢ Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</p><p><strong>Exchange</strong>（交换机）只负责转发消息，不具备存储消息的能力，因此如果没有任何队列与 Exchange 绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><p>生产者:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    <span class="comment">//2.设置参数</span></span><br><span class="line">    factory.setHost(<span class="string">&quot;192.168.184.100&quot;</span>);<span class="comment">//ip 默认值 localhost</span></span><br><span class="line">    factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">    factory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">    factory.setUsername(<span class="string">&quot;dong&quot;</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">    factory.setPassword(<span class="string">&quot;dong&quot;</span>);<span class="comment">//密码 默认 guest</span></span><br><span class="line">    <span class="comment">//3.创建连接 Connection</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="comment">//4.创建Channel</span></span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.创建交换机</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * exchangeDeclare(String exchange, BuiltinExchangeType type, boolean durable, boolean autoDelete, boolean internal, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">    * 1.exchange:交换机名称</span></span><br><span class="line"><span class="comment">    * 2.type：交换机类型</span></span><br><span class="line"><span class="comment">    *   DIRECT(&quot;direct&quot;),定向</span></span><br><span class="line"><span class="comment">        FANOUT(&quot;fanout&quot;),扇形（广播），发送消息到每一个与之绑定的队列</span></span><br><span class="line"><span class="comment">        TOPIC(&quot;topic&quot;),通配符的方式</span></span><br><span class="line"><span class="comment">        HEADERS(&quot;headers&quot;);参数匹配</span></span><br><span class="line"><span class="comment">     3.durable：是否持久化</span></span><br><span class="line"><span class="comment">     4.autoDelete：是否自动删除</span></span><br><span class="line"><span class="comment">     5.internal：内部使用。一般false</span></span><br><span class="line"><span class="comment">     6.arguments:参数</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;test_fanout&quot;</span>;</span><br><span class="line">    channel.exchangeDeclare(exchangeName, BuiltinExchangeType.FANOUT, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//6.创建队列</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_fanout_queue1&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_fanout_queue2&quot;</span>;</span><br><span class="line">    channel.queueDeclare(queue1Name, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    channel.queueDeclare(queue2Name, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//7.绑定队列和交换机</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * queueBind(String queue, String exchange, String routingKey)</span></span><br><span class="line"><span class="comment">    * 1.queue：队列名称</span></span><br><span class="line"><span class="comment">    * 2.exchange：交换机名称</span></span><br><span class="line"><span class="comment">    * 3.routingKey：路由键，绑定规则     如果交换机的类型为fanout,routingKey设置为&quot;&quot;</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    channel.queueBind(queue1Name, exchangeName, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    channel.queueBind(queue2Name, exchangeName, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">//8.发送消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;日志信息：张三调用了finaAll方法...日志级别：info...&quot;</span>;</span><br><span class="line">    channel.basicPublish(exchangeName, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, body.getBytes());</span><br><span class="line">    <span class="comment">//9.释放资源</span></span><br><span class="line">    channel.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    <span class="comment">//2.设置参数</span></span><br><span class="line">    factory.setHost(<span class="string">&quot;192.168.184.100&quot;</span>);<span class="comment">//ip 默认值 localhost</span></span><br><span class="line">    factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">    factory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">    factory.setUsername(<span class="string">&quot;dong&quot;</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">    factory.setPassword(<span class="string">&quot;dong&quot;</span>);<span class="comment">//密码 默认 guest</span></span><br><span class="line">    <span class="comment">//3.创建连接 Connection</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="comment">//4.创建Channel</span></span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.创建队列Queue</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">     * 1.queue： 队列名称</span></span><br><span class="line"><span class="comment">     * 2.durable： 是否持久化，当mq重启后，还在</span></span><br><span class="line"><span class="comment">     * 3.exclusive：</span></span><br><span class="line"><span class="comment">     *   是否独占，只有一个消费者能够监听这个队列</span></span><br><span class="line"><span class="comment">     *   当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">     * 4.autoDelete： 是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">     * 5.arguments： 参数</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="comment">//如果没有一个叫hello_world的队列，则创建该队列，如果有该队列，则不创建</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_fanout_queue1&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_fanout_queue2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.接收消息</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">    * 1.queue: 队列名称</span></span><br><span class="line"><span class="comment">    * 2.autoAck： 是否自动确认</span></span><br><span class="line"><span class="comment">    * 3.callback： 回调对象</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 1.consumerTag： 标识</span></span><br><span class="line"><span class="comment">        * 2.envelope： 获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">        * 3.properties: 配置信息</span></span><br><span class="line"><span class="comment">        * 4.body： 数据</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="comment">/*System.out.println(&quot;consumerTag：&quot; + consumerTag);</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;Exchange：&quot; + envelope.getExchange());</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;RoutingKey：&quot; + envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;properties：&quot; + properties);*/</span></span><br><span class="line">            System.out.println(<span class="string">&quot;body:&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            System.out.println(<span class="string">&quot;将日志信息打印到控制台....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    channel.basicConsume(queue1Name, <span class="literal">true</span>, consumer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源？消费者是监听程序，不需要关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    <span class="comment">//2.设置参数</span></span><br><span class="line">    factory.setHost(<span class="string">&quot;192.168.184.100&quot;</span>);<span class="comment">//ip 默认值 localhost</span></span><br><span class="line">    factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">    factory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">    factory.setUsername(<span class="string">&quot;dong&quot;</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">    factory.setPassword(<span class="string">&quot;dong&quot;</span>);<span class="comment">//密码 默认 guest</span></span><br><span class="line">    <span class="comment">//3.创建连接 Connection</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="comment">//4.创建Channel</span></span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.创建队列Queue</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">     * 1.queue： 队列名称</span></span><br><span class="line"><span class="comment">     * 2.durable： 是否持久化，当mq重启后，还在</span></span><br><span class="line"><span class="comment">     * 3.exclusive：</span></span><br><span class="line"><span class="comment">     *   是否独占，只有一个消费者能够监听这个队列</span></span><br><span class="line"><span class="comment">     *   当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">     * 4.autoDelete： 是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">     * 5.arguments： 参数</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="comment">//如果没有一个叫hello_world的队列，则创建该队列，如果有该队列，则不创建</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_fanout_queue1&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_fanout_queue2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.接收消息</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">    * 1.queue: 队列名称</span></span><br><span class="line"><span class="comment">    * 2.autoAck： 是否自动确认</span></span><br><span class="line"><span class="comment">    * 3.callback： 回调对象</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 1.consumerTag： 标识</span></span><br><span class="line"><span class="comment">        * 2.envelope： 获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">        * 3.properties: 配置信息</span></span><br><span class="line"><span class="comment">        * 4.body： 数据</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="comment">/*System.out.println(&quot;consumerTag：&quot; + consumerTag);</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;Exchange：&quot; + envelope.getExchange());</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;RoutingKey：&quot; + envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;properties：&quot; + properties);*/</span></span><br><span class="line">            System.out.println(<span class="string">&quot;body:&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            System.out.println(<span class="string">&quot;将日志信息保存数据库....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    channel.basicConsume(queue2Name, <span class="literal">true</span>, consumer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源？消费者是监听程序，不需要关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>小结</strong></p><ol><li><p>交换机需要与队列进行绑定，绑定之后；一个消息可以被多个消费者都收到。</p></li><li><p>发布订阅模式与工作队列模式的区别：</p><ul><li><p>工作队列模式不用定义交换机，而发布&#x2F;订阅模式需要定义交换机</p></li><li><p>发布&#x2F;订阅模式的生产方是面向交换机发送消息，工作队列模式的生产方是面向队列发送消息(底层使用默认交换机)</p></li><li><p>发布&#x2F;订阅模式需要设置队列和交换机的绑定，工作队列模式不需要设置，实际上工作队列模式会将队列绑定到默认的交换机</p></li></ul></li></ol><h3 id="Routing路由模式"><a href="#Routing路由模式" class="headerlink" title="Routing路由模式"></a>Routing路由模式</h3><ul><li><p>队列与交换机的绑定，不能是任意绑定了，而是要指定一个 RoutingKey（路由key）</p></li><li><p>消息的发送方在向 Exchange 发送消息时，也必须指定消息的 RoutingKey</p></li><li><p>Exchange 不再把消息交给每一个绑定的队列，而是根据消息的 Routing Key 进行判断，<code>只有队列的Routingkey 与消息的 Routing key 完全一致</code>，才会接收到消息</p></li></ul><p>图解：<img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171101955.png" alt="image-20221017110151906"></p><ul><li><p>P：生产者，向 Exchange 发送消息，发送消息时，会指定一个routing key</p></li><li><p>X：Exchange（交换机），接收生产者的消息，然后把消息递交给与 routing key 完全匹配的队列</p></li><li><p>C1：消费者，其所在队列指定了需要 routing key 为 error 的消息</p></li><li><p>C2：消费者，其所在队列指定了需要 routing key 为 info、error、warning 的消息</p></li></ul><p>生产者:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    <span class="comment">//2.设置参数</span></span><br><span class="line">    factory.setHost(<span class="string">&quot;192.168.184.100&quot;</span>);<span class="comment">//ip 默认值 localhost</span></span><br><span class="line">    factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">    factory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">    factory.setUsername(<span class="string">&quot;dong&quot;</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">    factory.setPassword(<span class="string">&quot;dong&quot;</span>);<span class="comment">//密码 默认 guest</span></span><br><span class="line">    <span class="comment">//3.创建连接 Connection</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="comment">//4.创建Channel</span></span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.创建交换机</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * exchangeDeclare(String exchange, BuiltinExchangeType type, boolean durable, boolean autoDelete, boolean internal, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">    * 1.exchange:交换机名称</span></span><br><span class="line"><span class="comment">    * 2.type：交换机类型</span></span><br><span class="line"><span class="comment">    *   DIRECT(&quot;direct&quot;),定向</span></span><br><span class="line"><span class="comment">        FANOUT(&quot;fanout&quot;),扇形（广播），发送消息到每一个与之绑定的队列</span></span><br><span class="line"><span class="comment">        TOPIC(&quot;topic&quot;),通配符的方式</span></span><br><span class="line"><span class="comment">        HEADERS(&quot;headers&quot;);参数匹配</span></span><br><span class="line"><span class="comment">     3.durable：是否持久化</span></span><br><span class="line"><span class="comment">     4.autoDelete：是否自动删除</span></span><br><span class="line"><span class="comment">     5.internal：内部使用。一般false</span></span><br><span class="line"><span class="comment">     6.arguments:参数</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;test_direct&quot;</span>;</span><br><span class="line">    channel.exchangeDeclare(exchangeName, BuiltinExchangeType.DIRECT, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//6.创建队列</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_direct_queue1&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_direct_queue2&quot;</span>;</span><br><span class="line">    channel.queueDeclare(queue1Name, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    channel.queueDeclare(queue2Name, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//7.绑定队列和交换机</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * queueBind(String queue, String exchange, String routingKey)</span></span><br><span class="line"><span class="comment">    * 1.queue：队列名称</span></span><br><span class="line"><span class="comment">    * 2.exchange：交换机名称</span></span><br><span class="line"><span class="comment">    * 3.routingKey：路由键，绑定规则     如果交换机的类型为fanout,routingKey设置为&quot;&quot;</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="comment">//队列1的绑定error</span></span><br><span class="line">    channel.queueBind(queue1Name, exchangeName, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="comment">//队列2的绑定info error warning</span></span><br><span class="line">    channel.queueBind(queue2Name, exchangeName, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">    channel.queueBind(queue2Name, exchangeName, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">    channel.queueBind(queue2Name, exchangeName, <span class="string">&quot;warning&quot;</span>);</span><br><span class="line">    <span class="comment">//8.发送消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;日志信息：张三调用了delete方法...出错了...日志级别：error...&quot;</span>;</span><br><span class="line">    channel.basicPublish(exchangeName, <span class="string">&quot;error&quot;</span>, <span class="literal">null</span>, body.getBytes());</span><br><span class="line">    <span class="comment">//9.释放资源</span></span><br><span class="line">    channel.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    <span class="comment">//2.设置参数</span></span><br><span class="line">    factory.setHost(<span class="string">&quot;192.168.184.100&quot;</span>);<span class="comment">//ip 默认值 localhost</span></span><br><span class="line">    factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">    factory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">    factory.setUsername(<span class="string">&quot;dong&quot;</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">    factory.setPassword(<span class="string">&quot;dong&quot;</span>);<span class="comment">//密码 默认 guest</span></span><br><span class="line">    <span class="comment">//3.创建连接 Connection</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="comment">//4.创建Channel</span></span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.创建队列Queue</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">     * 1.queue： 队列名称</span></span><br><span class="line"><span class="comment">     * 2.durable： 是否持久化，当mq重启后，还在</span></span><br><span class="line"><span class="comment">     * 3.exclusive：</span></span><br><span class="line"><span class="comment">     *   是否独占，只有一个消费者能够监听这个队列</span></span><br><span class="line"><span class="comment">     *   当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">     * 4.autoDelete： 是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">     * 5.arguments： 参数</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="comment">//如果没有一个叫hello_world的队列，则创建该队列，如果有该队列，则不创建</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_direct_queue1&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_direct_queue2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.接收消息</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">    * 1.queue: 队列名称</span></span><br><span class="line"><span class="comment">    * 2.autoAck： 是否自动确认</span></span><br><span class="line"><span class="comment">    * 3.callback： 回调对象</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 1.consumerTag： 标识</span></span><br><span class="line"><span class="comment">        * 2.envelope： 获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">        * 3.properties: 配置信息</span></span><br><span class="line"><span class="comment">        * 4.body： 数据</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="comment">/*System.out.println(&quot;consumerTag：&quot; + consumerTag);</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;Exchange：&quot; + envelope.getExchange());</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;RoutingKey：&quot; + envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;properties：&quot; + properties);*/</span></span><br><span class="line">            System.out.println(<span class="string">&quot;body:&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            System.out.println(<span class="string">&quot;将日志信息存储在数据库....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    channel.basicConsume(queue1Name, <span class="literal">true</span>, consumer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源？消费者是监听程序，不需要关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    <span class="comment">//2.设置参数</span></span><br><span class="line">    factory.setHost(<span class="string">&quot;192.168.184.100&quot;</span>);<span class="comment">//ip 默认值 localhost</span></span><br><span class="line">    factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">    factory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">    factory.setUsername(<span class="string">&quot;dong&quot;</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">    factory.setPassword(<span class="string">&quot;dong&quot;</span>);<span class="comment">//密码 默认 guest</span></span><br><span class="line">    <span class="comment">//3.创建连接 Connection</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="comment">//4.创建Channel</span></span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.创建队列Queue</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">     * 1.queue： 队列名称</span></span><br><span class="line"><span class="comment">     * 2.durable： 是否持久化，当mq重启后，还在</span></span><br><span class="line"><span class="comment">     * 3.exclusive：</span></span><br><span class="line"><span class="comment">     *   是否独占，只有一个消费者能够监听这个队列</span></span><br><span class="line"><span class="comment">     *   当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">     * 4.autoDelete： 是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">     * 5.arguments： 参数</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="comment">//如果没有一个叫hello_world的队列，则创建该队列，如果有该队列，则不创建</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_direct_queue1&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_direct_queue2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.接收消息</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">    * 1.queue: 队列名称</span></span><br><span class="line"><span class="comment">    * 2.autoAck： 是否自动确认</span></span><br><span class="line"><span class="comment">    * 3.callback： 回调对象</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 1.consumerTag： 标识</span></span><br><span class="line"><span class="comment">        * 2.envelope： 获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">        * 3.properties: 配置信息</span></span><br><span class="line"><span class="comment">        * 4.body： 数据</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="comment">/*System.out.println(&quot;consumerTag：&quot; + consumerTag);</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;Exchange：&quot; + envelope.getExchange());</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;RoutingKey：&quot; + envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;properties：&quot; + properties);*/</span></span><br><span class="line">            System.out.println(<span class="string">&quot;body:&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            System.out.println(<span class="string">&quot;将日志信息打印到控制台....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    channel.basicConsume(queue2Name, <span class="literal">true</span>, consumer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源？消费者是监听程序，不需要关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Routing</strong> 模式要求队列在绑定交换机时要指定 <strong>routing key</strong>，消息会转发到符合 routing key 的队列。</p><h3 id="Topics通配符模式"><a href="#Topics通配符模式" class="headerlink" title="Topics通配符模式"></a>Topics通配符模式</h3><ul><li><p>Topic 类型与 Direct 相比，都是可以根据 RoutingKey 把消息路由到不同的队列。只不过 Topic 类型Exchange 可以让队列在绑定 Routing key 的时候使用<strong>通配符</strong>！</p></li><li><p>Routingkey 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： item.insert </p></li><li><p>通配符规则：# 匹配一个或多个词，* 匹配不多不少恰好1个词，例如：item.# 能够匹配 item.insert.abc 或者 item.insert，item.* 只能匹配 item.insert</p></li></ul><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171106259.png" alt="image-20221017110625191"></p><ul><li><p>红色 Queue：绑定的是 usa.# ，因此凡是以 usa. 开头的 routing key 都会被匹配到</p></li><li><p>黄色 Queue：绑定的是 #.news ，因此凡是以 .news 结尾的 routing key 都会被匹配</p></li></ul><p>生产者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    <span class="comment">//2.设置参数</span></span><br><span class="line">    factory.setHost(<span class="string">&quot;192.168.184.100&quot;</span>);<span class="comment">//ip 默认值 localhost</span></span><br><span class="line">    factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">    factory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">    factory.setUsername(<span class="string">&quot;dong&quot;</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">    factory.setPassword(<span class="string">&quot;dong&quot;</span>);<span class="comment">//密码 默认 guest</span></span><br><span class="line">    <span class="comment">//3.创建连接 Connection</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="comment">//4.创建Channel</span></span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.创建交换机</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * exchangeDeclare(String exchange, BuiltinExchangeType type, boolean durable, boolean autoDelete, boolean internal, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">    * 1.exchange:交换机名称</span></span><br><span class="line"><span class="comment">    * 2.type：交换机类型</span></span><br><span class="line"><span class="comment">    *   DIRECT(&quot;direct&quot;),定向</span></span><br><span class="line"><span class="comment">        FANOUT(&quot;fanout&quot;),扇形（广播），发送消息到每一个与之绑定的队列</span></span><br><span class="line"><span class="comment">        TOPIC(&quot;topic&quot;),通配符的方式</span></span><br><span class="line"><span class="comment">        HEADERS(&quot;headers&quot;);参数匹配</span></span><br><span class="line"><span class="comment">     3.durable：是否持久化</span></span><br><span class="line"><span class="comment">     4.autoDelete：是否自动删除</span></span><br><span class="line"><span class="comment">     5.internal：内部使用。一般false</span></span><br><span class="line"><span class="comment">     6.arguments:参数</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;test_topic&quot;</span>;</span><br><span class="line">    channel.exchangeDeclare(exchangeName, BuiltinExchangeType.TOPIC, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//6.创建队列</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_topic_queue1&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_topic_queue2&quot;</span>;</span><br><span class="line">    channel.queueDeclare(queue1Name, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    channel.queueDeclare(queue2Name, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//7.绑定队列和交换机</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * queueBind(String queue, String exchange, String routingKey)</span></span><br><span class="line"><span class="comment">    * 1.queue：队列名称</span></span><br><span class="line"><span class="comment">    * 2.exchange：交换机名称</span></span><br><span class="line"><span class="comment">    * 3.routingKey：路由键，绑定规则     如果交换机的类型为fanout,routingKey设置为&quot;&quot;</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="comment">//routing key 系统的名称 日志的级别</span></span><br><span class="line">    <span class="comment">//需求：所有error级别的日志存在数据库，所有order系统的日志存在数据库</span></span><br><span class="line">    channel.queueBind(queue1Name, exchangeName, <span class="string">&quot;#.error&quot;</span>);</span><br><span class="line">    channel.queueBind(queue1Name, exchangeName, <span class="string">&quot;order.*&quot;</span>);</span><br><span class="line">    channel.queueBind(queue2Name, exchangeName, <span class="string">&quot;*.*&quot;</span>);</span><br><span class="line">    <span class="comment">//8.发送消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;日志信息：张三调用了finaAll方法...日志级别：info...&quot;</span>;</span><br><span class="line">    channel.basicPublish(exchangeName, <span class="string">&quot;.error&quot;</span>, <span class="literal">null</span>, body.getBytes());</span><br><span class="line">    <span class="comment">//9.释放资源</span></span><br><span class="line">    channel.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    <span class="comment">//2.设置参数</span></span><br><span class="line">    factory.setHost(<span class="string">&quot;192.168.184.100&quot;</span>);<span class="comment">//ip 默认值 localhost</span></span><br><span class="line">    factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">    factory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">    factory.setUsername(<span class="string">&quot;dong&quot;</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">    factory.setPassword(<span class="string">&quot;dong&quot;</span>);<span class="comment">//密码 默认 guest</span></span><br><span class="line">    <span class="comment">//3.创建连接 Connection</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="comment">//4.创建Channel</span></span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.创建队列Queue</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">     * 1.queue： 队列名称</span></span><br><span class="line"><span class="comment">     * 2.durable： 是否持久化，当mq重启后，还在</span></span><br><span class="line"><span class="comment">     * 3.exclusive：</span></span><br><span class="line"><span class="comment">     *   是否独占，只有一个消费者能够监听这个队列</span></span><br><span class="line"><span class="comment">     *   当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">     * 4.autoDelete： 是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">     * 5.arguments： 参数</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="comment">//如果没有一个叫hello_world的队列，则创建该队列，如果有该队列，则不创建</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_topic_queue1&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_topic_queue2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.接收消息</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">    * 1.queue: 队列名称</span></span><br><span class="line"><span class="comment">    * 2.autoAck： 是否自动确认</span></span><br><span class="line"><span class="comment">    * 3.callback： 回调对象</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 1.consumerTag： 标识</span></span><br><span class="line"><span class="comment">        * 2.envelope： 获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">        * 3.properties: 配置信息</span></span><br><span class="line"><span class="comment">        * 4.body： 数据</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="comment">/*System.out.println(&quot;consumerTag：&quot; + consumerTag);</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;Exchange：&quot; + envelope.getExchange());</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;RoutingKey：&quot; + envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;properties：&quot; + properties);*/</span></span><br><span class="line">            System.out.println(<span class="string">&quot;body:&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            System.out.println(<span class="string">&quot;将日志信息存入数据库....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    channel.basicConsume(queue1Name, <span class="literal">true</span>, consumer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源？消费者是监听程序，不需要关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">    <span class="comment">//2.设置参数</span></span><br><span class="line">    factory.setHost(<span class="string">&quot;192.168.184.100&quot;</span>);<span class="comment">//ip 默认值 localhost</span></span><br><span class="line">    factory.setPort(<span class="number">5672</span>);<span class="comment">//端口 默认值5672</span></span><br><span class="line">    factory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">    factory.setUsername(<span class="string">&quot;dong&quot;</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">    factory.setPassword(<span class="string">&quot;dong&quot;</span>);<span class="comment">//密码 默认 guest</span></span><br><span class="line">    <span class="comment">//3.创建连接 Connection</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">    <span class="comment">//4.创建Channel</span></span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.创建队列Queue</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">     * 1.queue： 队列名称</span></span><br><span class="line"><span class="comment">     * 2.durable： 是否持久化，当mq重启后，还在</span></span><br><span class="line"><span class="comment">     * 3.exclusive：</span></span><br><span class="line"><span class="comment">     *   是否独占，只有一个消费者能够监听这个队列</span></span><br><span class="line"><span class="comment">     *   当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">     * 4.autoDelete： 是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">     * 5.arguments： 参数</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="comment">//如果没有一个叫hello_world的队列，则创建该队列，如果有该队列，则不创建</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_topic_queue1&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_topic_queue2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.接收消息</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">    * 1.queue: 队列名称</span></span><br><span class="line"><span class="comment">    * 2.autoAck： 是否自动确认</span></span><br><span class="line"><span class="comment">    * 3.callback： 回调对象</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 1.consumerTag： 标识</span></span><br><span class="line"><span class="comment">        * 2.envelope： 获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">        * 3.properties: 配置信息</span></span><br><span class="line"><span class="comment">        * 4.body： 数据</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="comment">/*System.out.println(&quot;consumerTag：&quot; + consumerTag);</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;Exchange：&quot; + envelope.getExchange());</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;RoutingKey：&quot; + envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;properties：&quot; + properties);*/</span></span><br><span class="line">            System.out.println(<span class="string">&quot;body:&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            System.out.println(<span class="string">&quot;将日志信息打印控制台....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    channel.basicConsume(queue2Name, <span class="literal">true</span>, consumer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源？消费者是监听程序，不需要关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><p>Topic 主题模式可以实现 Pub&#x2F;Sub 发布与订阅模式和 Routing 路由模式的功能，只是 Topic 在配置routing key 的时候可以使用通配符，显得更加灵活。</p><h3 id="工作模式总结"><a href="#工作模式总结" class="headerlink" title="工作模式总结"></a>工作模式总结</h3><ol><li>简单模式 HelloWorld</li></ol><p>一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）。</p><ol start="2"><li>工作队列模式 Work Queue</li></ol><p>一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）。</p><ol start="3"><li>发布订阅模式 Publish&#x2F;subscribe</li></ol><p>需要设置类型为 fanout 的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列。</p><ol start="4"><li>路由模式 Routing</li></ol><p>需要设置类型为 direct 的交换机，交换机和队列进行绑定，并且指定 routing key，当发送消息到交换机</p><p>后，交换机会根据 routing key 将消息发送到对应的队列。</p><ol start="5"><li>通配符模式 Topic</li></ol><p>需要设置类型为 topic 的交换机，交换机和队列进行绑定，并且指定通配符方式的 routing key，当发送</p><p>消息到交换机后，交换机会根据 routing key 将消息发送到对应的队列。</p><h2 id="Spring-Boot整合Rabbit-MQ"><a href="#Spring-Boot整合Rabbit-MQ" class="headerlink" title="Spring Boot整合Rabbit MQ"></a>Spring Boot整合Rabbit MQ</h2><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171110248.png" alt="image-20221017111012195"></p><h3 id="创建Boot工程"><a href="#创建Boot工程" class="headerlink" title="创建Boot工程"></a>创建Boot工程</h3><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>需要的依赖是springboot整合rabbitmq, spring-boot-starter-amqp是springboot整合rabbitmq的包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置Rabbit-MQ的基本信息"><a href="#配置Rabbit-MQ的基本信息" class="headerlink" title="配置Rabbit MQ的基本信息"></a>配置Rabbit MQ的基本信息</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.184</span><span class="number">.100</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">dong</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">dong</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itcast</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br></pre></td></tr></table></figure><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>生产者编写代码发送信息。</p><p>生产者编写Rabbit MQ的配置信息。配置交换机、队列以及队列和交换机的绑定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;boot_topic_exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;boot_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;bootExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">bootExchange</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;bootQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">bootQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.队列交换机绑定关系 Binding</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 1.知道那个队列</span></span><br><span class="line"><span class="comment">    * 2.知道那个交换机</span></span><br><span class="line"><span class="comment">    * 3.routing key</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueueExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;bootQueue&quot;)</span> Queue queue, <span class="meta">@Qualifier(&quot;bootExchange&quot;)</span> Exchange exchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;boot.#&quot;</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者利用<code>RabbitTemplate</code>来发送信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.注入RabbitTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSend</span><span class="params">()</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.EXCHANGE_NAME, <span class="string">&quot;boot.haha&quot;</span>, <span class="string">&quot;boot mq hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者编写消息监听器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;boot_queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ListenerQueue</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(message);</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：</p><ul><li><p>使用 Spring 整合 RabbitMQ 将组件全部使用配置方式实现，简化编码</p></li><li><p>Spring 提供 RabbitTemplate 简化发送消息 API</p></li><li><p>使用监听机制简化消费者编码</p></li></ul><h2 id="Rabbit-MQ高级特性"><a href="#Rabbit-MQ高级特性" class="headerlink" title="Rabbit MQ高级特性"></a>Rabbit MQ高级特性</h2><h3 id="消息的可靠投递"><a href="#消息的可靠投递" class="headerlink" title="消息的可靠投递"></a>消息的可靠投递</h3><p>在使用 RabbitMQ 的时候，作为消息发送方希望杜绝任何消息丢失或者投递失败场景。RabbitMQ 为我们提供了两种方式用来控制消息的投递可靠性模式。</p><ul><li><p>confirm 确认模式</p></li><li><p>return 退回模式</p></li></ul><p>rabbitmq 整个消息投递的路径为：</p><p>producer—&gt;rabbitmq broker—&gt;exchange—&gt;queue—&gt;consumer</p><ul><li><p>消息从 producer 到 exchange 则会返回一个 confirmCallback(confirm 确认模式) 。</p></li><li><p>消息从 exchange–&gt;queue 投递失败则会返回一个 returnCallback(return 退回模式) 。</p></li></ul><p>我们将利用这两个 callback 控制消息的可靠性投递</p><p>编写配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;test_exchange_confirm&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;test_queue_confirm&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">confirmExchange</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> ExchangeBuilder.directExchange(EXCHANGE_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">confirmQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.队列交换机绑定关系 Binding</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 1.知道那个队列</span></span><br><span class="line"><span class="comment">    * 2.知道那个交换机</span></span><br><span class="line"><span class="comment">    * 3.routing key</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueueExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;confirmQueue&quot;)</span> Queue queue, <span class="meta">@Qualifier(&quot;confirmExchange&quot;)</span> Exchange exchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;confirm&quot;</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置RabbitMQ的基本信息 ip端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.184</span><span class="number">.100</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">dong</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">dong</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itcast</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="comment"># 确认模式开启</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br><span class="line">    <span class="comment"># 回退模式开启</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="confirm确认模式"><a href="#confirm确认模式" class="headerlink" title="confirm确认模式"></a>confirm确认模式</h4><p>确认模式：</p><ul><li>步骤：<ul><li><ol><li>确认模式开启：publisher-confirm-type: correlated</li></ol></li><li><ol start="2"><li>在rabbitTemplate定义confirmCallBack回调函数</li></ol></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确认模式：</span></span><br><span class="line"><span class="comment">     *  步骤：</span></span><br><span class="line"><span class="comment">     *      1. 确认模式开启：publisher-confirm-type: correlated</span></span><br><span class="line"><span class="comment">     *      2. 在rabbitTemplate定义confirmCallBack回调函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConfirm</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 定义回调</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback()&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> correlationData 相关的配置信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> ack exchange交换机 是否成功收到了消息。true 成功， false 失败</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cause 失败原因</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;confirm running...&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">                    <span class="comment">//接收成功</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;accepting success:&quot;</span> + cause);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//接收失败</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;accepting fail:&quot;</span> + cause);</span><br><span class="line">                    <span class="comment">//做一些处理，让消息再次发送</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_confirm&quot;</span>, <span class="string">&quot;confirm&quot;</span>, <span class="string">&quot;message confirm&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="return退回模式"><a href="#return退回模式" class="headerlink" title="return退回模式"></a>return退回模式</h4><p>回退模式： 当消息发送给 Exchange 后，Exchange 路由到 Queue 失败后才会执行 ReturnCallBack</p><ul><li>步骤：<ol><li>开启回退模式 publisher-returns: true</li><li>设置ReturnCallBack</li><li>设置Exchange处理消息的模式：<ol><li>如果消息没有路由到Queue,则丢弃消息（默认）</li><li>如果消息没有路由到Queue,返回给消息发送方ReturnCallBack</li></ol></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回退模式： 当消息发送给 Exchange 后，Exchange 路由到 Queue 失败后才会执行 ReturnCallBack</span></span><br><span class="line"><span class="comment">     *  步骤：</span></span><br><span class="line"><span class="comment">     *      1. 开启回退模式 publisher-returns: true</span></span><br><span class="line"><span class="comment">     *      2. 设置ReturnCallBack</span></span><br><span class="line"><span class="comment">     *      3. 设置Exchange处理消息的模式：</span></span><br><span class="line"><span class="comment">     *         3.1 如果消息没有路由到Queue,则丢弃消息（默认）</span></span><br><span class="line"><span class="comment">     *         3.2 如果消息没有路由到Queue,返回给消息发送方ReturnCallBack</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReturn</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置交换机处理失败消息的模式</span></span><br><span class="line">    rabbitTemplate.setMandatory(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 设置ReturnCallBack</span></span><br><span class="line">    rabbitTemplate.setReturnCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnCallback()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> message 消息对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> replyCode 错误码</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> replyText 错误信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> exchange 交换机</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> routingKey 路由器</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(Message message, <span class="type">int</span> replyCode, String replyText, String exchange, String routingKey)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;return running...&quot;</span>);</span><br><span class="line">            System.out.println(message);</span><br><span class="line">            System.out.println(replyCode);</span><br><span class="line">            System.out.println(replyText);</span><br><span class="line">            System.out.println(exchange);</span><br><span class="line">            System.out.println(routingKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_confirm&quot;</span>, <span class="string">&quot;confirm2&quot;</span>, <span class="string">&quot;message confirm&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息的可靠投递小结"><a href="#消息的可靠投递小结" class="headerlink" title="消息的可靠投递小结"></a>消息的可靠投递小结</h4><p>➢ 配置application.yml的publisher-confirm-type: correlated 开启确认模式。</p><p>➢ 使用rabbitTemplate.setConfirmCallback设置回调函数。当消息发送到exchange后回调confirm方法。在方法中判断ack，如果为true，则发送成功，如果为false，则发送失败，需要处理。</p><p>➢ 配置application.yml的publisher-returns: true开启 退回模式。</p><p>➢ 使用rabbitTemplate.setReturnCallback设置退回函数，当消息从exchange路由到queue失败后，如果设置了rabbitTemplate.setMandatory(true)参数，则会将消息退回给producer。并执行回调函数returnedMessage。</p><p>➢ 在RabbitMQ中也提供了事务机制，但是性能较差，此处不做讲解。</p><p>使用channel下列方法，完成事务控制：</p><p>txSelect(), 用于将当前channel设置成transaction模式</p><p>txCommit()，用于提交事务</p><p>txRollback(),用于回滚事务</p><h3 id="Consumer-Ack"><a href="#Consumer-Ack" class="headerlink" title="Consumer Ack"></a>Consumer Ack</h3><p>ack指Acknowledge，确认。 表示消费端收到消息后的确认方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">类比confirm</span><br><span class="line">confirm是consumer到broker</span><br><span class="line">ack是broker到consumer</span><br></pre></td></tr></table></figure><p>有三种确认方式：</p><ul><li><p>自动确认：acknowledge&#x3D;”none”</p></li><li><p>手动确认：acknowledge&#x3D;”manual”</p></li><li><p>根据异常情况确认：acknowledge&#x3D;”auto”（这种方式使用麻烦，不作讲解）</p></li></ul><p>其中自动确认是指，当消息一旦被Consumer接收到，则自动确认收到，并将相应 message 从 RabbitMQ 的消息缓存中移除。但是在实际业务处理中，很可能消息接收到，业务处理出现异常，那么该消息就会丢失。</p><p>如果设置了手动确认方式，则需要在业务处理成功后，调用channel.basicAck()，手动签收。</p><p>如果出现异常，则调用channel.basicNack()方法，让其自动重新发送消息。</p><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Consumer ACK机制：</span></span><br><span class="line"><span class="comment"> *   1. 设置手动签收 acknowledge-mode: manual</span></span><br><span class="line"><span class="comment"> *   2. 让监听器实现 ChannelAwareMessageListener</span></span><br><span class="line"><span class="comment"> *   3. 如果消息成功处理，则调用channel的basicAck()签收</span></span><br><span class="line"><span class="comment"> *   4. 如果消息处理失败，则调用channel的basicNck()拒绝签收，broker重新发给consumer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AckListener</span> <span class="keyword">implements</span> <span class="title class_">ChannelAwareMessageListener</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;test_queue_confirm&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> message.getMessageProperties().getDeliveryTag();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 接受转换消息</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 处理业务逻辑</span></span><br><span class="line">            System.out.println(<span class="string">&quot;handle business logic&quot;</span>);</span><br><span class="line">            <span class="comment">//int i = 3 / 0;</span></span><br><span class="line">            <span class="comment">//3. 手动签收</span></span><br><span class="line">            channel.basicAck(deliveryTag, <span class="literal">true</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//4. 拒绝签收</span></span><br><span class="line">            <span class="comment">/***</span></span><br><span class="line"><span class="comment">             * 第三个参数requeue：重回队列。如果设置为true,则重回queue，broker会重新发送该消息给消费端</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicNack(deliveryTag, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//channel.basicReject(deliveryTag, true);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置RabbitMQ的基本信息 ip端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.184</span><span class="number">.100</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">dong</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">dong</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itcast</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">direct:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br></pre></td></tr></table></figure><h4 id="Consumer-Ack-小结"><a href="#Consumer-Ack-小结" class="headerlink" title="Consumer Ack 小结"></a>Consumer Ack 小结</h4><p>➢ 在appliacation.yml标签中设置acknowledge-mode属性，设置ack方式 none：自动确认，manual：手动确认</p><p>➢ 如果在消费端没有出现异常，则调用channel.basicAck(deliveryTag,false);方法确认签收消息</p><p>➢ 如果出现异常，则在catch中调用 basicNack或 basicReject，拒绝消息，让MQ重新发送消息。</p><h3 id="消费端限流"><a href="#消费端限流" class="headerlink" title="消费端限流"></a>消费端限流</h3><p>请求瞬间增多，每秒5000个请求</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210180831992.png" alt="image-20221018083146873"></p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Consumer 限流机制：</span></span><br><span class="line"><span class="comment"> * 1. 确保ack机制为手动确认。</span></span><br><span class="line"><span class="comment"> * 2. 配置属性</span></span><br><span class="line"><span class="comment"> *  perfetch = 1，表示消费端每次从mq拉取一天消息来消费，直到手动确认消费完毕后，才会继续拉取下一条消息。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QosListener</span> <span class="keyword">implements</span> <span class="title class_">ChannelAwareMessageListener</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;test_queue_confirm&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//1. 获取消息</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 处理业务逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 签收</span></span><br><span class="line">        <span class="comment">//channel.basicAck(message.getMessageProperties().getDeliveryTag(), true);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置RabbitMQ的基本信息 ip端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.184</span><span class="number">.100</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">dong</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">dong</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itcast</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="消费端限流小结"><a href="#消费端限流小结" class="headerlink" title="消费端限流小结"></a>消费端限流小结</h4><p>➢ 在alllication.yml 中配置 prefetch属性设置消费端一次拉取多少消息</p><p>➢ 消费端的确认模式一定为手动确认。acknowledge&#x3D;”manual”</p><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>➢ TTL 全称 Time To Live（存活时间&#x2F;过期时间）。</p><p>➢ 当消息到达存活时间后，还没有被消费，会被自动清除。</p><p>➢ RabbitMQ可以对消息设置过期时间，也可以对整个队列（Queue）设置过期时间。</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210181832870.png" alt="image-20221018183210610"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfigTTL</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;test_exchange_ttl&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;test_queue_ttl&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">ttlExchange</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">// 设置queue的过期时间</span></span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">ttlQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_NAME).ttl(<span class="number">10000</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.队列交换机绑定关系 Binding</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 1.知道那个队列</span></span><br><span class="line"><span class="comment">    * 2.知道那个交换机</span></span><br><span class="line"><span class="comment">    * 3.routing key</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueueExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;ttlQueue&quot;)</span> Queue queue, <span class="meta">@Qualifier(&quot;ttlExchange&quot;)</span> Exchange exchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;ttl.*&quot;</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><ol><li><p>队列的统一过期时间</p></li><li><p>消息单独过期</p></li></ol><ul><li>如果设置了消息的过期时间，也设置了队列的过期时间，以时间短的为准。</li><li>队列过期后，会将队列所有信息全部移除。</li><li>消息过期后，只有消息在队列顶端，才会判断其是否过期了（移除掉）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TTL:过期时间</span></span><br><span class="line"><span class="comment"> * 1. 队列的统一过期时间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2. 消息单独过期</span></span><br><span class="line"><span class="comment"> * 如果设置了消息的过期时间，也设置了队列的过期时间，以时间短的为准。</span></span><br><span class="line"><span class="comment"> * 队列过期后，会将队列所有信息全部移除。</span></span><br><span class="line"><span class="comment"> * 消息过期后，只有消息在队列顶端，才会判断其是否过期了（移除掉）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTtl</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/*// 队列的统一过期时间</span></span><br><span class="line"><span class="comment">    for (int i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">        //发送消息</span></span><br><span class="line"><span class="comment">        rabbitTemplate.convertAndSend(&quot;test_exchange_ttl&quot;, &quot;ttl.haha&quot;, &quot;message ttl....&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息单独过期</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息的后处理对象，设置一些信息的参数信息</span></span><br><span class="line">    <span class="type">MessagePostProcessor</span> <span class="variable">messagePostProcessor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">            <span class="comment">//1. 设置message的信息</span></span><br><span class="line">            message.getMessageProperties().setExpiration(<span class="string">&quot;5000&quot;</span>);<span class="comment">//消息过期时间</span></span><br><span class="line">            <span class="comment">//2. 返回该消息</span></span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//rabbitTemplate.convertAndSend(&quot;test_exchange_ttl&quot;, &quot;ttl.haha&quot;, &quot;message ttl....&quot;, messagePostProcessor);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="comment">//消息单独过期</span></span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_ttl&quot;</span>, <span class="string">&quot;ttl.haha&quot;</span>, <span class="string">&quot;message ttl....&quot;</span>, messagePostProcessor);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//不过期的消息</span></span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;test_exchange_ttl&quot;</span>, <span class="string">&quot;ttl.haha&quot;</span>, <span class="string">&quot;message ttl....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TTL-小结"><a href="#TTL-小结" class="headerlink" title="TTL 小结"></a>TTL 小结</h4><p>➢ 设置队列过期时间使用参数：x-message-ttl，单位：ms(毫秒)，会对整个队列消息统一过期。</p><p>➢ 设置消息过期时间使用参数：expiration。单位：ms(毫秒)，当该消息在队列头部时（消费时），会单独判断这一消息是否过期。</p><p>➢ 如果两者都进行了设置，以时间短的为准。</p><h3 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a><strong>死信队列</strong></h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>死信队列，英文缩写：DLX 。Dead Letter Exchange（死信交换机），当消息成为Dead message后，可以被重新发送到另一个交换机，这个交换机就是DLX。</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210181917671.png" alt="image-20221018191726586"></p><h4 id="消息成为死信的三种情况"><a href="#消息成为死信的三种情况" class="headerlink" title="消息成为死信的三种情况"></a>消息成为死信的三种情况</h4><ol><li><p>队列消息长度到达限制；</p></li><li><p>消费者拒接消费消息，basicNack&#x2F;basicReject,并且不把消息重新放入原目标队列,requeue&#x3D;false；</p></li><li><p>原队列存在消息过期设置，消息到达超时时间未被消费；</p></li></ol><h4 id="队列绑定死信交换机"><a href="#队列绑定死信交换机" class="headerlink" title="队列绑定死信交换机"></a>队列绑定死信交换机</h4><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210181920148.png" alt="image-20221018192015082"></p><p>给队列设置参数： x-dead-letter-exchange 和 x-dead-letter-routing-key</p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><p>配置类配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//死信交换机和死信队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_DLX_NAME</span> <span class="operator">=</span> <span class="string">&quot;queue_dlx&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_DLX_NAME</span> <span class="operator">=</span> <span class="string">&quot;exchange_dlx&quot;</span>;</span><br><span class="line">    <span class="comment">//正常交换机和正常队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NORMAL_NAME</span> <span class="operator">=</span> <span class="string">&quot;the_queue_dlx&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NORMAL_NAME</span> <span class="operator">=</span> <span class="string">&quot;the_exchange_dlx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;normalExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">normalExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_NORMAL_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//死信交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;dlxExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">dlxExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_DLX_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;normalQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">normalQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        <span class="comment">//x-dead-letter-exchange    这里声明当前队列绑定的死信交换机</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, EXCHANGE_DLX_NAME);</span><br><span class="line">        <span class="comment">//x-dead-letter-routing-key  这里声明当前队列的死信路由key</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;dlx.hehe&quot;</span>);</span><br><span class="line">        <span class="comment">//过期时间</span></span><br><span class="line">        args.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">10000</span>);</span><br><span class="line">        <span class="comment">//最大长度</span></span><br><span class="line">        args.put(<span class="string">&quot;x-max-length&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_NORMAL_NAME).withArguments(args).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//死信队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;dlxQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">dlxQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_DLX_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.正常队列交换机绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueueExchangeNormal</span><span class="params">(<span class="meta">@Qualifier(&quot;normalQueue&quot;)</span> Queue queue, <span class="meta">@Qualifier(&quot;normalExchange&quot;)</span> Exchange exchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;the.dlx.*&quot;</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.死信队列交换机绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueueExchangeDlx</span><span class="params">(<span class="meta">@Qualifier(&quot;dlxQueue&quot;)</span> Queue queue, <span class="meta">@Qualifier(&quot;dlxExchange&quot;)</span> Exchange exchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;dlx.*&quot;</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.正常队列绑定死信交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueueExchangeDlxNormal</span><span class="params">(<span class="meta">@Qualifier(&quot;dlxQueue&quot;)</span> Queue queue, <span class="meta">@Qualifier(&quot;normalExchange&quot;)</span> Exchange exchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;dlx.hehe&quot;</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 发送测试死信消息：</span></span><br><span class="line"><span class="comment">     * 1.过期时间</span></span><br><span class="line"><span class="comment">     * 2.长度限制</span></span><br><span class="line"><span class="comment">     * 3.消息拒收</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDlx</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 测试过期时间，死信消息</span></span><br><span class="line"><span class="comment">//        rabbitTemplate.convertAndSend(&quot;the_exchange_dlx&quot;, &quot;the.dlx.haha&quot;, &quot;message dlx??....&quot;);</span></span><br><span class="line">        <span class="comment">//2. 测试长度限制，消息死信</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; 20; i++) &#123;</span></span><br><span class="line"><span class="comment">//            rabbitTemplate.convertAndSend(&quot;the_exchange_dlx&quot;, &quot;the.dlx.haha&quot;, &quot;message dlx??....&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//3. 测试消息绝收</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;the_exchange_dlx&quot;</span>, <span class="string">&quot;the.dlx.haha&quot;</span>, <span class="string">&quot;message dlx??....&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DlxListener</span> <span class="keyword">implements</span> <span class="title class_">ChannelAwareMessageListener</span> &#123;</span><br><span class="line">    <span class="comment">//定义监听器，监听正常队列</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;the_queue_dlx&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> message.getMessageProperties().getDeliveryTag();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 接受转换消息</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 处理业务逻辑</span></span><br><span class="line">            System.out.println(<span class="string">&quot;handle business logic&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span> / <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//3. 手动签收</span></span><br><span class="line">            channel.basicAck(deliveryTag, <span class="literal">true</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/***</span></span><br><span class="line"><span class="comment">             * 第三个参数requeue：重回队列。如果设置为true,则重回queue，broker会重新发送该消息给消费端</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            System.out.println(<span class="string">&quot;出现异常，拒绝接受&quot;</span>);</span><br><span class="line">            <span class="comment">//4. 拒绝签收，不重回队列，requeue=false</span></span><br><span class="line">            channel.basicNack(deliveryTag, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//channel.basicReject(deliveryTag, true);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="死信队列小结"><a href="#死信队列小结" class="headerlink" title="死信队列小结"></a>死信队列小结</h4><ol><li>死信交换机和死信队列和普通的没有区别</li><li>当消息成为死信后，如果该队列绑定了死信交换机，则消息会被死信交换机重新路由到死信队列</li><li>消息成为死信的三种情况：<ol><li>队列消息长度到达限制；</li><li>消费者拒接消费消息，并且不重回队列；</li><li>原队列存在消息过期设置，消息到达超时时间未被消费；</li></ol></li></ol><h3 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a><strong>延迟队列</strong></h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>延迟队列，即消息进入队列后不会立即被消费，只有到达指定时间后，才会被消费。</p><p>需求：</p><ol><li><p>下单后，30分钟未支付，取消订单，回滚库存。</p></li><li><p>新用户注册成功7天后，发送短信问候。</p></li></ol><p>实现方式：</p><ol><li><p>定时器（不好，不优雅，开销大）</p></li><li><p>延迟队列</p></li></ol><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210191032656.png" alt="image-20221019103248546"></p><p>很可惜，在RabbitMQ中并未提供延迟队列功能。</p><p>但是可以使用：TTL+死信队列 组合实现延迟队列的效果。</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210191036225.png" alt="image-20221019103614158"></p><h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><p>配置类：</p><ul><li>配值死信队列、死信交换机</li><li>配置正常队列、正常交换机</li><li>正常队列绑定正常交换机</li><li>死信队列绑定死信交换机</li><li>正常队列绑定死信交换机</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 延迟队列：</span></span><br><span class="line"><span class="comment">     * 1. 定义正常交换机order_exchange和队列order_queue</span></span><br><span class="line"><span class="comment">     * 2. 定义死信交换机exchange_order_dlx和队列queue_order_dlx</span></span><br><span class="line"><span class="comment">     * 3. 绑定，设置正常队列过期时间为30min</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//死信交换机和死信队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_ORDER_DLX_NAME</span> <span class="operator">=</span> <span class="string">&quot;queue_order_dlx&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_ORDER_DLX_NAME</span> <span class="operator">=</span> <span class="string">&quot;exchange_order_dlx&quot;</span>;</span><br><span class="line"><span class="comment">//正常交换机和正常队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_ORDER_NAME</span> <span class="operator">=</span> <span class="string">&quot;order_queue&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_ORDER_NAME</span> <span class="operator">=</span> <span class="string">&quot;order_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正常交换机</span></span><br><span class="line"><span class="meta">@Bean(&quot;orderExchange&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Exchange <span class="title function_">orderExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_ORDER_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//死信交换机</span></span><br><span class="line"><span class="meta">@Bean(&quot;exchangeOrderDlx&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Exchange <span class="title function_">exchangeOrderDlx</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_ORDER_DLX_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正常队列</span></span><br><span class="line"><span class="meta">@Bean(&quot;orderQueue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">orderQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    <span class="comment">//x-dead-letter-exchange    这里声明当前队列绑定的死信交换机</span></span><br><span class="line">    args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, EXCHANGE_ORDER_DLX_NAME);</span><br><span class="line">    <span class="comment">//x-dead-letter-routing-key  这里声明当前队列的死信路由key</span></span><br><span class="line">    args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;dlx.order.cancel&quot;</span>);</span><br><span class="line">    <span class="comment">//过期时间</span></span><br><span class="line">    args.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">return</span> QueueBuilder.durable(QUEUE_ORDER_NAME).withArguments(args).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//死信队列</span></span><br><span class="line"><span class="meta">@Bean(&quot;queueOrderDlx&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">queueOrderDlx</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QueueBuilder.durable(QUEUE_ORDER_DLX_NAME).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正常队列交换机绑定</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">bindingQueueExchangePOrderNormal</span><span class="params">(<span class="meta">@Qualifier(&quot;orderQueue&quot;)</span> Queue queue, <span class="meta">@Qualifier(&quot;orderExchange&quot;)</span> Exchange exchange)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;order.*&quot;</span>).noargs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//死信队列交换机绑定</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">bindingQueueExchangeOrderDlx</span><span class="params">(<span class="meta">@Qualifier(&quot;queueOrderDlx&quot;)</span> Queue queue, <span class="meta">@Qualifier(&quot;exchangeOrderDlx&quot;)</span> Exchange exchange)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;dlx.order.*&quot;</span>).noargs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正常队列绑定死信交换机</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">bindingQueueExchangeOrderDlxNormal</span><span class="params">(<span class="meta">@Qualifier(&quot;orderQueue&quot;)</span> Queue queue, <span class="meta">@Qualifier(&quot;exchangeOrderDlx&quot;)</span> Exchange exchange)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;&quot;</span>).noargs();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者测试发送消息：向正常交换机发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延迟队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelay</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">//1. 发送订单消息。将来是在订单系统中，下单完成，发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;order_exchange&quot;</span>, <span class="string">&quot;order.msg&quot;</span>, <span class="string">&quot;订单：id=1;name=huang&quot;</span>);</span><br><span class="line">    <span class="comment">//2. 打印倒计时</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        System.out.println(i + <span class="string">&quot;...&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者：监听死信队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderListener</span> <span class="keyword">implements</span> <span class="title class_">ChannelAwareMessageListener</span> &#123;</span><br><span class="line">    <span class="comment">//延时队列：定义监听器，监听死信队列</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue_order_dlx&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> message.getMessageProperties().getDeliveryTag();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 接受转换消息</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 处理业务逻辑</span></span><br><span class="line">            System.out.println(<span class="string">&quot;handle business logic&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;根据订单id查询其状态...&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;判断订单是否支付成功...&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;取消订单，回滚库存...&quot;</span>);</span><br><span class="line">            <span class="comment">//3. 手动签收</span></span><br><span class="line">            channel.basicAck(deliveryTag, <span class="literal">true</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/***</span></span><br><span class="line"><span class="comment">             * 第三个参数requeue：重回队列。如果设置为true,则重回queue，broker会重新发送该消息给消费端</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            System.out.println(<span class="string">&quot;出现异常，拒绝接受&quot;</span>);</span><br><span class="line">            <span class="comment">//4. 拒绝签收，不重回队列，requeue=false</span></span><br><span class="line">            channel.basicNack(deliveryTag, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//channel.basicReject(deliveryTag, true);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：10秒后监听死信队列的监听器响应。</p><h4 id="延迟队列小结"><a href="#延迟队列小结" class="headerlink" title="延迟队列小结"></a>延迟队列小结</h4><ol><li><p>延迟队列 指消息进入队列后，可以被延迟一定时间，再进行消费。</p></li><li><p>RabbitMQ没有提供延迟队列功能，但是可以使用 ： TTL + DLX 来实现延迟队列效果。</p></li></ol><h3 id="日志与监控"><a href="#日志与监控" class="headerlink" title="日志与监控"></a>日志与监控</h3><h4 id="RabbitMQ日志"><a href="#RabbitMQ日志" class="headerlink" title="RabbitMQ日志"></a>RabbitMQ日志</h4><p>RabbitMQ默认日志存放路径： &#x2F;var&#x2F;log&#x2F;rabbitmq&#x2F;<a href="mailto:&#114;&#x61;&#x62;&#x62;&#105;&#x74;&#64;&#x78;&#x78;&#120;&#x2e;&#108;&#111;&#x67;">&#114;&#x61;&#x62;&#x62;&#105;&#x74;&#64;&#x78;&#x78;&#120;&#x2e;&#108;&#111;&#x67;</a></p><p>日志包含了RabbitMQ的版本号、Erlang的版本号、RabbitMQ服务节点名称、cookie的hash值、RabbitMQ配置文件地址、内存限制、磁盘限制、默认账户guest的创建以及权限配置等等。</p><h4 id="web管控台监控"><a href="#web管控台监控" class="headerlink" title="web管控台监控"></a>web管控台监控</h4><h4 id="rabbitmqctl管理和监控"><a href="#rabbitmqctl管理和监控" class="headerlink" title="rabbitmqctl管理和监控"></a>rabbitmqctl管理和监控</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">查看队列</span><br><span class="line"># rabbitmqctl list_queues</span><br><span class="line">查看exchanges</span><br><span class="line"># rabbitmqctl list_exchanges</span><br><span class="line">查看用户</span><br><span class="line"># rabbitmqctl list_users</span><br><span class="line">查看连接</span><br><span class="line"># rabbitmqctl list_connections</span><br><span class="line">查看消费者信息</span><br><span class="line"># rabbitmqctl list_consumers</span><br><span class="line">查看环境变量</span><br><span class="line"># rabbitmqctl environment</span><br><span class="line">查看未被确认的队列</span><br><span class="line"># rabbitmqctl list_queues name messages_unacknowledged</span><br><span class="line">查看单个队列的内存使用</span><br><span class="line"># rabbitmqctl list_queues name memory</span><br><span class="line">查看准备就绪的队列</span><br><span class="line"># rabbitmqctl list_queues name messages_ready</span><br></pre></td></tr></table></figure><h3 id="消息追踪"><a href="#消息追踪" class="headerlink" title="消息追踪"></a>消息追踪</h3><p>在使用任何消息中间件的过程中，难免会出现某条消息异常丢失的情况。对于RabbitMQ而言，可能是因为生产者或消费者与RabbitMQ断开了连接，而它们与RabbitMQ又采用了不同的确认机制；也有可能是因为交换器与队列之间不同的转发策略；甚至是交换器并没有与任何队列进行绑定，生产者又不感知或者没有采取相应的措施；另外RabbitMQ本身的集群策略也可能导致消息的丢失。这个时候就需要有一个较好的机制跟踪记录消息的投递过程，以此协助开发和运维人员进行问题的定位。</p><p>在RabbitMQ中可以使用Firehose和rabbitmq_tracing插件功能来实现消息追踪。</p><h4 id="消息追踪-Firehose"><a href="#消息追踪-Firehose" class="headerlink" title="消息追踪-Firehose"></a>消息追踪-Firehose</h4><p>firehose的机制是将生产者投递给rabbitmq的消息，rabbitmq投递给消费者的消息按照指定的格式发送到默认的exchange上。这个默认的exchange的名称为amq.rabbitmq.trace，它是一个topic类型的exchange。发送到这个exchange上的消息的routing key为 publish.exchangename 和deliver.queuename。其中exchangename和queuename为实际exchange和queue的名称，分别对应生产者投递到exchange的消息，和消费者从queue上获取的消息。</p><p>注意：打开 trace 会影响消息写入功能，适当打开后请关闭。</p><p>rabbitmqctl trace_on：开启Firehose命令</p><p>rabbitmqctl trace_off：关闭Firehose命令</p><p>指定虚拟机开启：rabbitmqctl trace_on -p &#x2F;itcast</p><h4 id="消息追踪-rabbitmq-tracing"><a href="#消息追踪-rabbitmq-tracing" class="headerlink" title="消息追踪-rabbitmq_tracing"></a>消息追踪-rabbitmq_tracing</h4><p>rabbitmq_tracing和Firehose在实现上如出一辙，只不过rabbitmq_tracing的方式比Firehose多了一层GUI的包装，更容易使用和管理。</p><p>启用插件：rabbitmq-plugins enable rabbitmq_tracing</p><p>关闭插件：rabbitmq-plugins disable rabbitmq_tracing</p><h2 id="Rabbit-MQ应用问题"><a href="#Rabbit-MQ应用问题" class="headerlink" title="Rabbit MQ应用问题"></a>Rabbit MQ应用问题</h2><h3 id="消息可靠性保障"><a href="#消息可靠性保障" class="headerlink" title="消息可靠性保障"></a><strong>消息可靠性保障</strong></h3><p>需求：</p><p>100%确保消息发送成功</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210191246843.png" alt="image-20221019124645756"></p><h3 id="消息幂等性保障"><a href="#消息幂等性保障" class="headerlink" title="消息幂等性保障"></a><strong>消息幂等性保障</strong></h3><p>幂等性指一次和多次请求某一个资源，对于资源本身应该具有同样的结果。也就是说，其任意多次执行对资源本身所产生的影响均与一次执行的影响相同。</p><p>在MQ中指，消费多条相同的消息，得到与消费该消息一次相同的结果</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210191256721.png" alt="image-20221019125631634"></p><h2 id="Rabbit-MQ集群搭建"><a href="#Rabbit-MQ集群搭建" class="headerlink" title="Rabbit MQ集群搭建"></a>Rabbit MQ集群搭建</h2><h2 id="Spring-Boot配置Rabbit-MQ"><a href="#Spring-Boot配置Rabbit-MQ" class="headerlink" title="Spring Boot配置Rabbit MQ"></a>Spring Boot配置Rabbit MQ</h2><ol><li>可以在配置文件中配置属性（全局）</li><li>在@RabbitListener配置contanierFactory属性</li></ol><p>inux系统：centos7<br>1.启动前，查看mq状态</p><p>systemctl status rabbitmq-server<br>2.启动</p><p>systemctl start rabbitmq-server<br>3.停止</p><p>systemctl stop rabbitmq-server<br>4.重启</p><p>restart<br>5.打开浏览器管理页面：默认端口号15672</p><p>systemctl status firewalld<br>&#x2F;&#x2F;关闭防火墙<br>systemctl disable firewalld<br>systemctl stop firewalld<br>6.登陆<br>用户名和密码都是guest</p><p>7.插件管理相关命令</p><p>rabbitmq-plugins enable|list|disable</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> Rabbit MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2022/11/20/css/"/>
      <url>/2022/11/20/css/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="1-CSS介绍"><a href="#1-CSS介绍" class="headerlink" title="1.CSS介绍"></a>1.CSS介绍</h2><h3 id="1-1什么是CSS"><a href="#1-1什么是CSS" class="headerlink" title="1.1什么是CSS"></a>1.1什么是CSS</h3><p><strong>层叠样式表</strong> (Cascading Style Sheets，缩写为 <strong>CSS</strong>）</p><p>CSS:表现（美化网页）</p><p>字体，颜色，编剧，高度，宽度，背景图片，网页定位，网页浮动…</p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220130231708471.png" alt="image-20220130231708471"></p><h3 id="1-2CSS发展史"><a href="#1-2CSS发展史" class="headerlink" title="1.2CSS发展史"></a>1.2CSS发展史</h3><p>CSS1.0</p><p>CSS2.0DIV(块)+CSS,HTML与CSS结构分离的思想，网页变得简单，SEO</p><p>CSS2.1浮动、定位</p><p>CSS3.0圆角，阴影，动画…浏览器的兼容性~</p><h3 id="1-3CSS快速入门"><a href="#1-3CSS快速入门" class="headerlink" title="1.3CSS快速入门"></a>1.3CSS快速入门</h3><p>CSS 1.0:style CSS代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--规范&lt;style&gt; 可以编写css代码,每一个声明最好用分号结尾</span></span><br><span class="line"><span class="comment">    语法：</span></span><br><span class="line"><span class="comment">        选择器&#123;</span></span><br><span class="line"><span class="comment">            声明1；</span></span><br><span class="line"><span class="comment">            声明2；</span></span><br><span class="line"><span class="comment">            ...</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blanchedalmond;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css 3.0分离</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--规范&lt;style&gt; 可以编写css代码,每一个声明最好用分号结尾</span></span><br><span class="line"><span class="comment">    语法：</span></span><br><span class="line"><span class="comment">        选择器&#123;</span></span><br><span class="line"><span class="comment">            声明1；</span></span><br><span class="line"><span class="comment">            声明2；</span></span><br><span class="line"><span class="comment">            ...</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blanchedalmond;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码分离，css通过链接link到html代码中。</strong></p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220130232851037.png" alt="image-20220130232851037"></p><p><strong>css优势：</strong></p><ol><li>内容和变现分离</li><li>网页结构表现统一，可以实现复用</li><li>样式十分丰富</li><li>建议使用独立于html的css文件</li><li>利用SEO，更容易被搜索引擎收录</li></ol><h3 id="1-4CSS的3种导入方式"><a href="#1-4CSS的3种导入方式" class="headerlink" title="1.4CSS的3种导入方式"></a>1.4CSS的3种导入方式</h3><p>三种导入方式：</p><ol><li><p>行内样式；</p></li><li><p>内部样式；</p></li><li><p>外部样式；</p></li></ol><p>外部样式的两种写法：</p><ul><li><p>链接法 （常用）</p></li><li><p>导入法    （CSS 2.1特有，不常用）</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--内部样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: darkgreen;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--外部1.链接方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--外部2.引用方式 不常用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@import</span> <span class="string">&quot;css/style.css&quot;</span>;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">行内最高，外边就近原则;</span></span><br><span class="line"><span class="comment">其实是覆盖原则，外边依次覆盖，行内最后执行，所以最后显示，优先级最高；</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--行内样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color:deepskyblue&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*外部样式*/</span></span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-CSS选择器（重点）"><a href="#2-CSS选择器（重点）" class="headerlink" title="2.CSS选择器（重点）"></a>2.CSS选择器（重点）</h2><blockquote><p>作用：选择页面上的某一个或者某一类元素</p></blockquote><h3 id="2-1-基本选择器"><a href="#2-1-基本选择器" class="headerlink" title="2.1 基本选择器"></a>2.1 基本选择器</h3><ol><li><p>标签选择器：选择一类标签标签{}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*标签选择器，会选择到页面上所有的这个标签的元素*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: coral;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标签选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标签选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>类选择器 class:选择所有class属性一致的标签，跨标签，类名{}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*类选择器：</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    .class的方式使用</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    不同的标签可以归为一类</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    一个类可以有多个标签，也可以有多种标签，可以复用</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.style</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;style&quot;</span>&gt;</span>类选择器1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;style&quot;</span>&gt;</span>java<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>id选择器：全局唯一！ #id名{}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*id选择器：</span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css">        选择特有的标签操作</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        一个标签只有一个id</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#style1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*测试*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.lala</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: deepskyblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;style1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;lala&quot;</span>&gt;</span>id选择器1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>id选择器2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>存在优先级问题：</p><p><strong>id&gt;类&gt;标签</strong></p></li></ol><h3 id="2-2-层次选择器"><a href="#2-2-层次选择器" class="headerlink" title="2.2 层次选择器"></a>2.2 层次选择器</h3><ol><li><p>后代选择器：在某个元素的后面       祖爷爷   爷爷   爸爸    你</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*后代选择器*/</span></span><br><span class="line">        <span class="selector-tag">body</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: aqua;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>子选择器：一代，儿子</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*子选择器，一代，儿子*/</span></span><br><span class="line">        <span class="selector-tag">body</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: red;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>相邻兄弟选择器：同辈  只有一个，向下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*相邻兄弟选择器，只有一个，相邻的（向下）*/</span></span><br><span class="line">        <span class="selector-class">.text</span>+<span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: fuchsia;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>通用选择器：当前元素向下的所有兄弟元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*通用选择器*/</span></span><br><span class="line">        <span class="selector-class">.text</span>~<span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: greenyellow;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="2-3伪类选择器"><a href="#2-3伪类选择器" class="headerlink" title="2.3伪类选择器"></a>2.3伪类选择器</h3><p>伪类：条件</p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220202224406586.png" alt="image-20220202224406586"></p></li></ol><h3 id="2-4-属性选择器-重点"><a href="#2-4-属性选择器-重点" class="headerlink" title="2.4 属性选择器(重点)"></a>2.4 属性选择器(重点)</h3><p>可实现同时使用class+id</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: greenyellow;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font</span>: bold <span class="number">20px</span>/<span class="number">50px</span> Arial;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*属性名，属性名=属性值（正则）*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*存在id属性的元素  a[]&#123;&#125;*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*选中id为first元素*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*a[id=first]&#123;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*    background: fuchsia;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*选中类中含links的元素*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*a[class*=&quot;links&quot;]&#123;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*    background: blue;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*!*选中以href中以http开头的元素*!*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*a[href^=http]&#123;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*    background: coral;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*选中以pdf结尾的*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-attr">[href$=pdf]</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item first&quot;</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item first&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;test&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;images/123.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;images/123.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;images/123.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/a.pdf&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/abc.pdf&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;abc.doc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;links item&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>&#x3D; 完全等于</li><li>*&#x3D; 包含</li><li>^&#x3D; 以什么开头</li><li>$&#x3D; 以什么结尾</li></ul><h2 id="3-美化网页元素"><a href="#3-美化网页元素" class="headerlink" title="3.美化网页元素"></a>3.美化网页元素</h2><h3 id="3-1-为什么美化网页"><a href="#3-1-为什么美化网页" class="headerlink" title="3.1 为什么美化网页"></a>3.1 为什么美化网页</h3><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220203214321307.png" alt="image-20220203214321307"></p><p>span标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#title1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">欢迎学习 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;title1&quot;</span>&gt;</span>java<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-字体样式"><a href="#3-2-字体样式" class="headerlink" title="3.2 字体样式"></a>3.2 字体样式</h3><ul><li>font-family字体</li><li>font-size字体大小</li><li>font-weight字体粗细</li><li>color字体颜色</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">font-family</span>: <span class="string">&quot;Arial Black&quot;</span>,楷体;</span><br><span class="line">        <span class="attribute">color</span>: coral;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">h1</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: large;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.p1</span>&#123;</span><br><span class="line">        <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="3-3-文字样式"><a href="#3-3-文字样式" class="headerlink" title="3.3 文字样式"></a>3.3 文字样式</h3><p>1.颜色</p><ul><li>英语单词</li><li>RGB 三原色 0~f</li><li>RGBA A表示透明度 0~1</li></ul><p>2.文字对齐的方式</p><p>text-align: 排版、剧中、靠左</p><p>3.首行缩进</p><p>text-indent: 2em 首行缩进两个字符</p><p>4.行高</p><p>行高和块高一样，就可以上下居中line-height&#x3D;height</p><p>5.装饰</p><ul><li>underline   下划线</li><li>line-through    中划线</li><li>overline    上划线</li></ul><p>6.文字图片水平对齐</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*颜色：</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        英语单词</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        RGB 三原色 0~f</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        RGBA A表示透明度 0~1</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.9</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*text-align: 排版、剧中、靠左..*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*text-indent: 2em 首行缩进两个字符*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*行高和块高一样，就可以上下居中line-height=height*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.p1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.p2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: coral;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        underline   下划线</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        line-through    中划线</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        overline    上划线</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.t1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.t2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: line-through;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.t3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: overline;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*图片文字居中*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">img</span>,<span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../image/a.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;t1&quot;</span>&gt;</span>12456<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;t2&quot;</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;t3&quot;</span>&gt;</span>55555<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>火影忍者<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p1&quot;</span>&gt;</span></span><br><span class="line">    《火影忍者》（日语：NARUTO -ナルト-），通常简称为“火影”，为日本漫画家岸本齐史创作的少年漫画，讲述忍者世界里围绕着身为对手的漩涡鸣人与宇智波佐助两人，与其他角色的经历。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span></span><br><span class="line">    漫画自1999年开始在日本集英社旗下的少年漫画杂志《周刊少年Jump》上连载。2002年，由日本动画工作室Studio Pierrot根据漫画原作所改编制作的电视动画版《火影忍者》开始在日本东京电视台播出。2004年，漫画进而改编成电影。2006年，漩涡鸣人入选美国《新闻周刊》日文版于10月18日发行的特集中选出的“全世界最受尊敬的100位日本人”。[1]</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-阴影"><a href="#3-4-阴影" class="headerlink" title="3.4 阴影"></a>3.4 阴影</h3><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220203224114207.png" alt="image-20220203224114207"></p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220203224134771.png" alt="image-20220203224134771"></p><h3 id="3-5-超链接伪类"><a href="#3-5-超链接伪类" class="headerlink" title="3.5 超链接伪类"></a>3.5 超链接伪类</h3><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220203223957899.png" alt="image-20220203223957899"></p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220203224210624.png" alt="image-20220203224210624"></p><h3 id="3-6-列表"><a href="#3-6-列表" class="headerlink" title="3.6 列表"></a>3.6 列表</h3><p>list-style:</p><ul><li>​    none 去掉原点</li><li>​    circle 空心圆</li><li>​    decimal 数字</li><li>​    square 正方形</li></ul><p>商城案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>全部商品分类<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图书<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>音像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>数字商品<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>家用电器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>数码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>电脑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>办公<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>家居<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>家装<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>厨具<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>服饰鞋帽<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>个性化妆<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>礼品箱包<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>钟表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>珠宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>食品饮料<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>保健食品<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>彩票<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>旅行<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>充值<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>票务<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#nav</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: beige;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: beige;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">list-style:</span></span><br><span class="line"><span class="comment">    none 去掉原点</span></span><br><span class="line"><span class="comment">    circle 空心圆</span></span><br><span class="line"><span class="comment">    decimal 数字</span></span><br><span class="line"><span class="comment">    square 正方形</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220203230651354.png" alt="image-20220203230651354"></p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220203230659490.png" alt="image-20220203230659490"></p><p>修改样式</p><h3 id="3-7-背景"><a href="#3-7-背景" class="headerlink" title="3.7 背景"></a>3.7 背景</h3><p>背景颜色</p><p>背景图片</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">          width: <span class="number">1000</span>px;</span><br><span class="line">          height: <span class="number">700</span>px;</span><br><span class="line">          border: <span class="number">1</span>px solid red;</span><br><span class="line">          background-image: url(<span class="string">&quot;../image/a.png&quot;</span>);</span><br><span class="line">          <span class="comment">/*默认是全部平铺的*/</span></span><br><span class="line">      &#125;</span><br><span class="line">      .div1&#123;</span><br><span class="line">          background-repeat: repeat-x;</span><br><span class="line">      &#125;</span><br><span class="line">      .div2&#123;</span><br><span class="line">          background-repeat: repeat-y;</span><br><span class="line">      &#125;</span><br><span class="line">      .div3&#123;</span><br><span class="line">          background-repeat: no-repeat;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-渐变"><a href="#3-8-渐变" class="headerlink" title="3.8 渐变"></a>3.8 渐变</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">131deg</span>, <span class="number">#ffffff</span> <span class="number">0%</span>, <span class="number">#62daff</span> <span class="number">50%</span>, <span class="number">#FF0000</span> <span class="number">100%</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>grabient 找 css代码</p><h2 id="4-盒子模型"><a href="#4-盒子模型" class="headerlink" title="4.盒子模型"></a>4.盒子模型</h2><h3 id="1-什么是盒子模型"><a href="#1-什么是盒子模型" class="headerlink" title="1. 什么是盒子模型"></a>1. 什么是盒子模型</h3><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220204231504389.png" alt="image-20220204231504389"></p><p>margin:外边框</p><p>padding:内边框</p><p>border:边框</p><h3 id="2-边框"><a href="#2-边框" class="headerlink" title="2.边框"></a>2.边框</h3><p>1.边框的粗细</p><p>2.边框的样式</p><p>3.边框的颜色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*body总有一个默认的外边距*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*border:粗细 样式 颜色*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: coral;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">form</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#62daff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>)&gt;<span class="selector-tag">input</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">3px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>)&gt;<span class="selector-tag">input</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#0ae648</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>)&gt;<span class="selector-tag">input</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#ff6600</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>会员登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>邮箱：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-内外边距"><a href="#3-内外边距" class="headerlink" title="3.内外边距"></a>3.内外边距</h3><p>盒子的计算方式：你这个元素到底有多大</p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220205121530667.png" alt="image-20220205121530667"></p><p>margin+border+padding+内容宽度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*margin+border+padding的参数*/</span></span><br><span class="line"><span class="comment">/*两个参数 上下 左右*/</span></span><br><span class="line"><span class="comment">/*一个参数，上下左右*/</span></span><br><span class="line"><span class="comment">/*三个参数 上 下 左右*/</span></span><br><span class="line"><span class="comment">/*四个参数 上 右 下 左  顺时针*/</span></span><br></pre></td></tr></table></figure><h3 id="4-圆角边框"><a href="#4-圆角边框" class="headerlink" title="4.圆角边框"></a>4.圆角边框</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一个参数，☞每个角</span></span><br><span class="line"><span class="comment">左上 右上 右下 左下 顺时针</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="5-阴影"><a href="#5-阴影" class="headerlink" title="5.阴影"></a>5.阴影</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">#62daff</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">100px</span>;</span><br><span class="line"><span class="comment">/*颜色 水平偏移 垂直偏移 阴影半径 */</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220205131856990.png" alt="image-20220205131856990"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">#62daff</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../image/a.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-浮动"><a href="#5-浮动" class="headerlink" title="5.浮动"></a>5.浮动</h2><h3 id="5-1-标准文档流"><a href="#5-1-标准文档流" class="headerlink" title="5.1 标准文档流"></a>5.1 标准文档流</h3><p>块级元素：独占一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h1~h6 p div 列表..</span><br></pre></td></tr></table></figure><p>行内元素：不独占一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">span a img strong</span><br></pre></td></tr></table></figure><p>行内元素 可以被包括在块级元素中，反之，则不可以。</p><h3 id="5-2-display"><a href="#5-2-display" class="headerlink" title="5.2 display"></a>5.2 display</h3><ol><li>block块元素</li><li>inline行内元素</li><li>inline-block 是块元素，但可以内联，在一行！</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        block块元素</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        inline行内元素</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        inline-block 是块元素，但可以内联，在一行！</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">#FF0000</span> <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">#FF0000</span> <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div块元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span行内元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.这个也是一种实现行内元素排列的方式，当时很多情况使用float </p><h3 id="5-3-float"><a href="#5-3-float" class="headerlink" title="5.3 float"></a>5.3 float</h3><p>1.左右浮动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> solid;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.layer1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#F00</span> dashed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.layer2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#00f</span> dashed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.layer3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#060</span> dashed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.layer4</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#62daff</span> dashed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">23px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../image/a.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../image/a.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../image/a.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer4&quot;</span>&gt;</span></span><br><span class="line">        浮动的盒子可以向左，也可以向右浮动，直到它的外边缘碰到包含框或者另一个浮动盒子为止。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-父级边框塌陷"><a href="#5-4-父级边框塌陷" class="headerlink" title="5.4 父级边框塌陷"></a>5.4 父级边框塌陷</h3><p>clear</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">      clear: both;两侧不允许有浮动元素</span></span><br><span class="line"><span class="comment">      clear: right;右侧不允许有浮动元素</span></span><br><span class="line"><span class="comment">      clear: left;左侧不允许有浮动元素</span></span><br><span class="line"><span class="comment">      clear: none;</span></span><br><span class="line"><span class="comment">      */</span></span><br></pre></td></tr></table></figure><p>解决方案：</p><p>1.增加父级元素的高度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1.增加父级元素高度*/</span></span><br><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> solid;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>2.增加一个div标签，清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;<span class="attribute">clear</span>&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">   <span class="selector-class">.clear</span>&#123;</span><br><span class="line">        <span class="attribute">clear</span>: both;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3.overflow</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*3.父类增加一个overflow*/</span></span><br><span class="line">            <span class="attribute">overflow</span>: hidden;</span><br></pre></td></tr></table></figure><p>4.父类增加一个伪类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#father</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">            <span class="comment">/*4.增加一个伪类*/</span></span><br><span class="line">            <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">            <span class="attribute">clear</span>: both;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>小结：</strong></p><ol><li>浮动元素后面增加空div简单，代码尽量避免空的div</li><li>设置父类的高度简单，元素假设有了固定的高度，就会被限制</li><li>overflow简单，下拉的场景避免使用</li><li>父类增加一个伪类：after（推荐）无副作用</li></ol><h3 id="5-5-对比"><a href="#5-5-对比" class="headerlink" title="5.5 对比"></a>5.5 对比</h3><p>display</p><p>方向不能控制</p><p>float</p><p>浮动起来的话会脱离标准文档流，所以要解决父级边框塌陷</p><h2 id="6-定位"><a href="#6-定位" class="headerlink" title="6.定位"></a>6.定位</h2><h3 id="6-1相对定位"><a href="#6-1相对定位" class="headerlink" title="6.1相对定位"></a>6.1相对定位</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">#62daff</span> <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#first</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: fuchsia <span class="number">1px</span> dashed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#e64c38</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#second</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">#56dfbf</span> <span class="number">1px</span> dashed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;<span class="comment">/*相对定位*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#third</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">#e64c38</span> <span class="number">1px</span> dashed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: brown;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>第一个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;second&quot;</span>&gt;</span>第二个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;third&quot;</span>&gt;</span>第三个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相对定位：position: relative；</p><p>相对于原来的位置，经行指定的偏移，相对定位的话，他任然在标准文档流中，原来的位置会被保留。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">top</span>: -<span class="number">10px</span>;上</span><br><span class="line"><span class="attribute">left</span>: <span class="number">20px</span>;左</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">20px</span>;下</span><br><span class="line"><span class="attribute">right</span>: <span class="number">30px</span>;右</span><br><span class="line">数值表示距离</span><br></pre></td></tr></table></figure><h3 id="6-2-测试"><a href="#6-2-测试" class="headerlink" title="6.2 测试"></a>6.2 测试</h3><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220205225313089.png" alt="image-20220205225313089"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">#e64c38</span> solid <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#e086ee</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#62daff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#a2</span>,<span class="selector-id">#a4</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#a5</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: -<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a1&quot;</span>&gt;</span>链接1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a2&quot;</span>&gt;</span>链接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a3&quot;</span>&gt;</span>链接3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a4&quot;</span>&gt;</span>链接4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a5&quot;</span>&gt;</span>链接5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-绝对定位"><a href="#6-3-绝对定位" class="headerlink" title="6.3 绝对定位"></a>6.3 绝对定位</h3><p>定位：基于xxxx定位，上下左右</p><ol><li>没有父级元素的前提下，相较于浏览器定位</li><li>假设父级元素存在定位，我们通常相对于父级元素进行偏移</li></ol><p>相对于父级或者浏览器的位置，经行指定的偏移，相对定位的话，他不在标准文档流中，原来的位置不会被保留。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#father</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">#62daff</span> <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/*父级定位*/</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#first</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: fuchsia <span class="number">1px</span> dashed;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#e64c38</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#second</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">#56dfbf</span> <span class="number">1px</span> dashed;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: aquamarine;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#third</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">#e64c38</span> <span class="number">1px</span> dashed;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: brown;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>第一个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;second&quot;</span>&gt;</span>第二个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;third&quot;</span>&gt;</span>第三个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-4-固定定位"><a href="#6-4-固定定位" class="headerlink" title="6.4 固定定位"></a>6.4 固定定位</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span> lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">1000px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">/*绝对定位，相对于浏览器*/</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background</span>: red;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">/*fixed 固定定位*/</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">background</span>: yellow;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt;div1&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt;div2&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="6-5-z-index"><a href="#6-5-z-index" class="headerlink" title="6.5 z-index"></a>6.5 z-index</h3><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220205231753979.png" alt="image-20220205231753979"></p><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h2><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220205235511888.png" alt="image-20220205235511888"></p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220205235600771.png" alt="image-20220205235600771"></p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220205235627831.png" alt="image-20220205235627831"></p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220205235713500.png" alt="image-20220205235713500"></p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220205235736349.png" alt="image-20220205235736349"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2022/11/20/html/"/>
      <url>/2022/11/20/html/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="1、初识HTML"><a href="#1、初识HTML" class="headerlink" title="1、初识HTML"></a>1、初识HTML</h2><h3 id="1-html"><a href="#1-html" class="headerlink" title="1.html"></a>1.html</h3><p><strong>超文本标记语言</strong>（英语：<strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage，简称：<strong>HTML</strong>）是一种用于创建<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E9%A1%B5">网页</a>的标准<a href="https://zh.wikipedia.org/wiki/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80">标记语言</a>。</p><p>HTML是一种基础技术，常与<a href="https://zh.wikipedia.org/wiki/CSS">CSS</a>、<a href="https://zh.wikipedia.org/wiki/JavaScript">JavaScript</a>一起被众多网站用于设计网页、网页应用程序以及移动应用程序的用户界面[<a href="https://zh.wikipedia.org/wiki/HTML#cite_note-3">3]</a>。</p><h3 id="2-html、css、JavaScript"><a href="#2-html、css、JavaScript" class="headerlink" title="2.html、css、JavaScript"></a>2.html、css、JavaScript</h3><p>html:基础网页html5</p><p>css:样式美化  css3</p><p>javaScript：动态渲染</p><h3 id="3-网页的基本信息"><a href="#3-网页的基本信息" class="headerlink" title="3. 网页的基本信息"></a>3. 网页的基本信息</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DOCTYPE:告诉浏览器，我们要使用什么规范 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- head:网页的头部 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mate:描述性标签，描述网站的一些信息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mate 一般用来做SEO--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- title：网页标题 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- body:网页主体 代码主要写在这--&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- DOCTYPE:告诉浏览器，我们要使用什么规范 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- head:网页的头部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mate:描述性标签，描述网站的一些信息--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mate 一般用来做SEO--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;跳动的猪&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;这是一个可以跳的🐖&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- title：网页标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- body:网页主体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">🐖在跳动！！！</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、网页的基本标签"><a href="#2、网页的基本标签" class="headerlink" title="2、网页的基本标签"></a>2、网页的基本标签</h2><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220128153751776.png" alt="image-20220128153751776"></p><table><thead><tr><th>标题标签</th><th><h1>一级标题</h1>   <h2>二级标题</h2></th></tr></thead><tbody><tr><td>段落标签</td><td><p>两只老虎，</p></td></tr><tr><td>水平线标签</td><td><hr/></td></tr><tr><td>换行标签</td><td><br/></td></tr><tr><td>粗体</td><td><strong>i love you</strong></td></tr><tr><td>斜体</td><td><em>i love you</em></td></tr><tr><td>空格</td><td>&amp;nbsp</td></tr><tr><td>大于</td><td>&amp;gt</td></tr><tr><td>小于</td><td>&amp;lt</td></tr><tr><td>版权</td><td>&amp;copy</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基本标签学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--标题标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--段落标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两只老虎，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两只老虎，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>跑得快，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>跑得快，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一只没有眼睛<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一只没有尾巴<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>真奇怪,真奇怪<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--水平线标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--换行标签--&gt;</span></span><br><span class="line">两只老虎，<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">两只老虎<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">跑得快,<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">跑得快,<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">一只没有眼睛,<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">一只没有尾巴,<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">真奇怪,真奇怪.<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--粗体，斜体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>字体样式标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">粗体：i love you    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>i love you<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">斜体：i love you    <span class="tag">&lt;<span class="name">em</span>&gt;</span>i love you<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--特殊符号--&gt;</span></span><br><span class="line">空格</span><br><span class="line">空<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>格</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">&amp;gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">&amp;copy;</span>版权</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、图像、超链接、网页布局"><a href="#3、图像、超链接、网页布局" class="headerlink" title="3、图像、超链接、网页布局"></a>3、图像、超链接、网页布局</h2><h3 id="1-图像标签"><a href="#1-图像标签" class="headerlink" title="1.图像标签"></a>1.图像标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">src:图片地址（必填）</span><br><span class="line">    相对地址（推荐），绝对地址</span><br><span class="line">    ../  -- 上一级目录</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;&quot;</span> <span class="attr">height</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图像标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">src:图片地址（必填）</span></span><br><span class="line"><span class="comment">    相对地址（推荐），绝对地址 D:\JAVA项目\HTML\resources\image\1.png</span></span><br><span class="line"><span class="comment">    ../  -- 上一级目录</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;风景&quot;</span> <span class="attr">title</span>=<span class="string">&quot;风景&quot;</span> <span class="attr">width</span>=<span class="string">&quot;384&quot;</span> <span class="attr">height</span>=<span class="string">&quot;245&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-链接标签学习"><a href="#2-链接标签学习" class="headerlink" title="2.链接标签学习"></a>2.链接标签学习</h3><ul><li><p>a标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">href:必填，表示要跳转到那个界面</span><br><span class="line">target:表示窗口在哪打开</span><br><span class="line">        _blank  在新标签打开</span><br><span class="line">        _self   在自己的网页中打开</span><br></pre></td></tr></table></figure></li><li><p>锚链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">锚链接</span><br><span class="line">1.需要一个锚标记</span><br><span class="line">2.跳转到标记</span><br></pre></td></tr></table></figure></li><li><p>功能链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">功能链接</span><br><span class="line"></span><br><span class="line">邮件链接：mailto</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>链接标签学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用name标记--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;top&quot;</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--a标签</span></span><br><span class="line"><span class="comment">href:必填，表示要跳转到那个界面</span></span><br><span class="line"><span class="comment">target:表示窗口在哪打开</span></span><br><span class="line"><span class="comment">        _blank  在新标签打开</span></span><br><span class="line"><span class="comment">        _self   在自己的网页中打开</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.我的第一个html文件.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>点记我跳转到第一个界面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;2.基本标签学习.html&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;风景&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;2.基本标签学习.html&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;风景&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;2.基本标签学习.html&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;风景&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;2.基本标签学习.html&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;风景&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;2.基本标签学习.html&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;风景&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--锚链接</span></span><br><span class="line"><span class="comment">1.需要一个锚标记</span></span><br><span class="line"><span class="comment">2.跳转到标记</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;down&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--功能链接</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">邮件链接：mailto</span></span><br><span class="line"><span class="comment">qq推广</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:huangruidong.xauat@gmail.com&quot;</span>&gt;</span>点击联系我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-行元素，块元素"><a href="#3-行元素，块元素" class="headerlink" title="3.行元素，块元素"></a>3.行元素，块元素</h3><p>块元素：无论内容多少，该元素独占一行（p、h1-h6）</p><p>行内元素：内容撑开宽度，左右都是行内元素的可以排在一行（a.strong.em…）</p><h2 id="4、列表、表格、媒体元素"><a href="#4、列表、表格、媒体元素" class="headerlink" title="4、列表、表格、媒体元素"></a>4、列表、表格、媒体元素</h2><h3 id="1-列表"><a href="#1-列表" class="headerlink" title="1.列表"></a>1.列表</h3><ul><li>有序列表ol</li><li>无序列表     ul</li><li>自定义列表   dl</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--有序列表</span></span><br><span class="line"><span class="comment">应用范围：试卷，问答...</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>cpp<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>golang<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>rust<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--无序列表</span></span><br><span class="line"><span class="comment">应用范围：导航栏，侧边栏...</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>cpp<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>golang<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>rust<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自定义列表</span></span><br><span class="line"><span class="comment">dl:标签</span></span><br><span class="line"><span class="comment">dt:列表名称</span></span><br><span class="line"><span class="comment">dd:列表内容</span></span><br><span class="line"><span class="comment">应用范围:公司网站底部</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>语言<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>java<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>python<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>cpp<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>golang<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>rust<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-表格"><a href="#2-表格" class="headerlink" title="2.表格"></a>2.表格</h3><p>colspan 跨列</p><p>rowspan跨行</p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220128224929843.png" alt="image-20220128224929843"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--表格table</span></span><br><span class="line"><span class="comment">行 tr rows</span></span><br><span class="line"><span class="comment">列 td</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--colspan 跨列--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--rowspan跨行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-媒体"><a href="#3-媒体" class="headerlink" title="3.媒体"></a>3.媒体</h3><p>音频和视频</p><ul><li>src:资源路径</li><li>controls:控制条</li><li>autoplay:自动播放</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>媒体<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--音频和视频</span></span><br><span class="line"><span class="comment">src:资源路径</span></span><br><span class="line"><span class="comment">controls:控制条</span></span><br><span class="line"><span class="comment">autoplay:自动播放</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;video src=&quot;../resources/video/xxx.mp4&quot; controls autoplay&gt;&lt;/video&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;../resources/audio/暗杠%20-%20走歌人.mp3&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-页面结构分析"><a href="#4-页面结构分析" class="headerlink" title="4.页面结构分析"></a>4.页面结构分析</h3><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220128230608569.png" alt="image-20220128230608569"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面结构<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页头部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页主题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页脚部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-iframe内联框架"><a href="#5-iframe内联框架" class="headerlink" title="5.iframe内联框架"></a>5.iframe内联框架</h3><p>iframe内联框架</p><ul><li>src：引用页面地址 </li><li>w-h:宽度高度</li><li>name:框架标识符</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>内联框架iframe<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--iframe内联框架</span></span><br><span class="line"><span class="comment">src：地址</span></span><br><span class="line"><span class="comment">w-h:宽度高度</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;1.我的第一个html文件.html&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800px0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://blog.kuangstudy.com&quot;</span>&gt;</span>狂神<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=55631961&amp;bvid=BV1x4411V75C&amp;cid=97257967&amp;page=11&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/iframe&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、列表及表单应用"><a href="#5、列表及表单应用" class="headerlink" title="5、列表及表单应用"></a>5、列表及表单应用</h2><h3 id="1-from表单"><a href="#1-from表单" class="headerlink" title="1.from表单"></a>1.from表单</h3><p>form表单</p><p>action:表单提交的位置，可以是网站，也可以是一个请求处理的地址</p><p>method:post,get 提交方式</p><ul><li><p>​    get方式提交：我们可以在url中看到我们提交的信息，不安全，高效</p><p>在浏览器审查元素获取输入</p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220129212305053.png" alt="image-20220129212305053"></p></li><li><p>​    post:比较安全，不能传输大文件</p><p>user后缀</p><p><a href="http://localhost:63342/HTML/html/1.%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAhtml%E6%96%87%E4%BB%B6.html?username=2005010112&amp;pwd=123456">http://localhost:63342/HTML/html/1.%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAhtml%E6%96%87%E4%BB%B6.html?username=2005010112&amp;pwd=123456</a></p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220129212425873.png" alt="image-20220129212425873"></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登陆注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--form表单</span></span><br><span class="line"><span class="comment">action:表单提交的位置，可以是网站，也可以是一个请求处理的地址</span></span><br><span class="line"><span class="comment">method:post,get 提交方式</span></span><br><span class="line"><span class="comment">    get方式提交：我们可以在url中看到我们提交的信息，不安全，高效</span></span><br><span class="line"><span class="comment">    post:比较安全，不能传输大文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;1.我的第一个html文件.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文本输入框input type=&quot;text&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--密码框：input type=&quot;password&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码框:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-文本框单选框"><a href="#2-文本框单选框" class="headerlink" title="2.文本框单选框"></a>2.文本框单选框</h3><p><strong>文本框选择标签</strong>：可以没有</p><ul><li>value&#x3D;”跳动的猪”    默认是初始值</li><li>maxlength&#x3D;”8”      最大字符长度</li><li>size&#x3D;”30”           文本框长度</li></ul><p><strong>单选框标签</strong>：至少有的三个值</p><ul><li>input type&#x3D;”radio”  radio是单选框</li><li>value&#x3D;”boy”     单选框的值</li><li>name&#x3D;”sex”       表示组：只有值在一个组才可以单选</li></ul><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220129212725281.png" alt="image-20220129212725281"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登陆注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--form表单</span></span><br><span class="line"><span class="comment">action:表单提交的位置，可以是网站，也可以是一个请求处理的地址</span></span><br><span class="line"><span class="comment">method:post,get 提交方式</span></span><br><span class="line"><span class="comment">    get方式提交：我们可以在url中看到我们提交的信息，不安全，高效</span></span><br><span class="line"><span class="comment">    post:比较安全，不能传输大文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;1.我的第一个html文件.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文本输入框input type=&quot;text&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">value=&quot;跳动的猪&quot;    默认是初始值</span></span><br><span class="line"><span class="comment">maxlength=&quot;8&quot;      最大字符长度</span></span><br><span class="line"><span class="comment">size=&quot;30&quot;           文本框长度--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;跳动的猪&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;8&quot;</span> <span class="attr">size</span>=<span class="string">&quot;30&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--密码框：input type=&quot;password&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码框:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--单选框标签</span></span><br><span class="line"><span class="comment">input type=&quot;radio&quot;  radio是单选框</span></span><br><span class="line"><span class="comment">value=&quot;boy&quot;     单选框的值</span></span><br><span class="line"><span class="comment">name=&quot;sex&quot;       表示组：只有值在一个组才可以单选</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        性别：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-按钮多选框"><a href="#3-按钮多选框" class="headerlink" title="3.按钮多选框"></a>3.按钮多选框</h3><p><strong>多选框</strong></p><ul><li>input type&#x3D;”checkbox”   多选框</li><li>value&#x3D;”sleep”            值</li><li>name&#x3D;”hobby”            分组</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;chat&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>聊天</span><br></pre></td></tr></table></figure><p><strong>显示的是后边的文字，提交的值是value</strong></p><p><strong>按钮</strong>：</p><ul><li>input type&#x3D;”button” 普通按钮</li><li>input type&#x3D;”image”  图像按钮    提交</li><li>input type&#x3D;”submit” 提交按钮</li><li>input type&#x3D;”reset”  重置</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登陆注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--form表单</span></span><br><span class="line"><span class="comment">action:表单提交的位置，可以是网站，也可以是一个请求处理的地址</span></span><br><span class="line"><span class="comment">method:post,get 提交方式</span></span><br><span class="line"><span class="comment">    get方式提交：我们可以在url中看到我们提交的信息，不安全，高效</span></span><br><span class="line"><span class="comment">    post:比较安全，不能传输大文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;1.我的第一个html文件.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文本输入框input type=&quot;text&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">value=&quot;跳动的猪&quot;    默认是初始值</span></span><br><span class="line"><span class="comment">maxlength=&quot;8&quot;      最大字符长度</span></span><br><span class="line"><span class="comment">size=&quot;30&quot;           文本框长度--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;跳动的猪&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;8&quot;</span> <span class="attr">size</span>=<span class="string">&quot;30&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--密码框：input type=&quot;password&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码框:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--单选框标签</span></span><br><span class="line"><span class="comment">input type=&quot;radio&quot;  radio是单选框</span></span><br><span class="line"><span class="comment">value=&quot;boy&quot;     单选框的值</span></span><br><span class="line"><span class="comment">name=&quot;sex&quot;       表示组：只有值在一个组才可以单选</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        性别：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--多选框</span></span><br><span class="line"><span class="comment">input type=&quot;checkbox&quot;   多选框</span></span><br><span class="line"><span class="comment">value=&quot;sleep&quot;            值</span></span><br><span class="line"><span class="comment">name=&quot;hobby&quot;            分组</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>多选框:爱好</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sleep&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>睡觉</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;code&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>敲代码</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;chat&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>聊天</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>游戏</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--按钮：</span></span><br><span class="line"><span class="comment">input type=&quot;button&quot; 普通按钮</span></span><br><span class="line"><span class="comment">input type=&quot;image&quot;  图像按钮    提交</span></span><br><span class="line"><span class="comment">input type=&quot;submit&quot; 提交按钮</span></span><br><span class="line"><span class="comment">input type=&quot;reset&quot;  重置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>按钮：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;你也想跳动吗&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-文本域、文件域、下拉框"><a href="#4-文本域、文件域、下拉框" class="headerlink" title="4.文本域、文件域、下拉框"></a>4.文本域、文件域、下拉框</h3><p><strong>文本域：</strong></p><ul><li>cols&#x3D;”30”列</li><li>rows&#x3D;”10” 行</li></ul><p><strong>文件域</strong></p><ul><li>input type&#x3D;”file”</li><li>name&#x3D;”files”</li></ul><p><strong>下拉框，列表框</strong>    </p><ul><li>select 列表</li><li>option 值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文本域：</span></span><br><span class="line"><span class="comment">cols=&quot;30&quot;列</span></span><br><span class="line"><span class="comment">rows=&quot;10&quot; 行</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>反馈（文本域）：</span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文件域</span></span><br><span class="line"><span class="comment">input type=&quot;file&quot;</span></span><br><span class="line"><span class="comment">name=&quot;files&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>上传文件（文件域）</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--下拉框，列表框    </span></span><br><span class="line"><span class="comment">select 列表</span></span><br><span class="line"><span class="comment">option 值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>国家（下拉框，列表框）：</span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;列表名称&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;us&quot;</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;eth&quot;</span>&gt;</span>瑞士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-其他相关框"><a href="#5-其他相关框" class="headerlink" title="5.其他相关框"></a>5.其他相关框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    邮箱验证--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    url--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    数字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>商品数量</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;num&quot;</span> <span class="attr">max</span>=<span class="string">&quot;10&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">step</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    滑块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>音量：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;voice&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">step</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    搜索框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>搜索：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-表单的应用"><a href="#6-表单的应用" class="headerlink" title="6.表单的应用"></a>6.表单的应用</h3><ul><li>隐藏域 hidden</li><li>只读 readonly</li><li>禁用 disabled</li><li>默认 selected</li><li>提示 placeholder</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    增强鼠标可读性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mark&quot;</span>&gt;</span>你点我试试<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6、表单初级验证"><a href="#6、表单初级验证" class="headerlink" title="6、表单初级验证"></a>6、表单初级验证</h2><ul><li>placeholder 提示信息</li><li>required 非空判断</li><li>pattern 正则表达式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">required</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>自定义邮箱:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;diy email&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h2><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220129230412584.png" alt="image-20220129230412584"></p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220129230443469.png" alt="image-20220129230443469"></p><p><img src="C:\Users\huangruidong\AppData\Roaming\Typora\typora-user-images\image-20220129230347184.png" alt="image-20220129230347184"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2022/11/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/11/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1、什么是操作系统"><a href="#1、什么是操作系统" class="headerlink" title="1、什么是操作系统"></a>1、什么是操作系统</h3><p>给用户提供服务、对程序进行管理、对资源进行分配。</p><ul><li>操作系统是一个控制软件，管理应用程序</li><li>操作系统为应用程序提供服务，杀死应用程序</li><li>操作系统进行资源管理，管理外设、分配资源</li></ul><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210161917251.png" alt="image-20221016191756140" style="zoom: 50%;" /><h4 id="1-1、操作系统的架层次结构"><a href="#1-1、操作系统的架层次结构" class="headerlink" title="1.1、操作系统的架层次结构"></a>1.1、操作系统的架层次结构</h4><blockquote><p>硬件之上，应用程序之下。处于中间位置</p></blockquote><p>操作系统位于应用软件之下，为应用软件提供服务支撑。</p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210161922006.png" alt="image-20221016192204876" style="zoom: 50%;" /><p>操作系统给外部提供的服务shell</p><h4 id="1-2、操作系统的功能"><a href="#1-2、操作系统的功能" class="headerlink" title="1.2、操作系统的功能"></a>1.2、操作系统的功能</h4><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210161927344.png" alt="image-20221016192700234" style="zoom:50%;" /><ol><li>CPU的调度</li><li>物理内存的管理</li><li>虚拟内存的管理</li><li>文件系统的管理</li><li>中断处理和设备驱动</li></ol><h4 id="1-3、操作系统的特征"><a href="#1-3、操作系统的特征" class="headerlink" title="1.3、操作系统的特征"></a>1.3、操作系统的特征</h4><ol><li><p>并发</p><p>计算机系统中同时存在多个运行的程序，需要OS管理和调度</p><p><code>并发和并行的区别</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">并发：在一段时间内，有多个程序可以运行。</span><br><span class="line">并行：在一个时间点上，有多个程序可以运行。</span><br><span class="line">并行一般要求计算机系统存在多个CPU，这样才能使OS在一个时间同时执行多个程序。只有一个CPU，则不能并行。</span><br></pre></td></tr></table></figure></li><li><p>共享</p><ul><li>”同时“访问</li><li>互斥访问</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">互斥访问：对于同一个内存空间，同一个时间点只有一个程序能够访问。</span><br><span class="line">同时访问：一个程序可以在同一个时间点访问多块不同的内存。</span><br></pre></td></tr></table></figure></li><li><p>虚拟</p><ul><li>利用多道程序设计，让每个用户都觉得有一个计算机专门为他服务</li></ul></li><li><p>异步</p><ul><li>程序执行不是一贯到底，而是走走停停，向前推进的速度不可预知</li><li>但只要运行环境相同，OS需要保证程序运行的结果也要相同</li></ul></li></ol><h3 id="2、为什么学习操作系统"><a href="#2、为什么学习操作系统" class="headerlink" title="2、为什么学习操作系统"></a>2、为什么学习操作系统</h3><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210161958530.png" alt="image-20221016195802432"></p><h4 id="2-1、操作系统需要权衡"><a href="#2-1、操作系统需要权衡" class="headerlink" title="2.1、操作系统需要权衡"></a>2.1、操作系统需要权衡</h4><ul><li>空间和时间</li><li>性能和可预测性</li><li>公平和性能</li></ul><h3 id="3、操作系统实例"><a href="#3、操作系统实例" class="headerlink" title="3、操作系统实例"></a>3、操作系统实例</h3><ul><li>UNIX</li><li>LINUX</li><li>WINDOWS</li></ul><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210162009726.png" alt="image-20221016200900650"></p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210162010103.png" alt="image-20221016201051018"></p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210162011766.png" alt="image-20221016201153666"></p><h3 id="4、操作系统的发展"><a href="#4、操作系统的发展" class="headerlink" title="4、操作系统的发展"></a>4、操作系统的发展</h3><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210162013743.png" alt="image-20221016201341616"></p><ol><li>纸带机（监视器）</li></ol><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210162014261.png" alt="image-20221016201450137"></p><ol start="2"><li>CPU等硬件快速发展，计算机速度提升，性能未得到充分利用。</li></ol><p>流水线程序设计</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210162016585.png" alt="image-20221016201617502"></p><ol start="3"><li>内存容量越来越大，CPU执行多个程序。</li></ol><p>多道程序设计，cpu在IO执行过程中，执行其他的程序。</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210162017166.png" alt="image-20221016201704115"></p><p>多道程序设计提高了CPU的利用效率，但是交互性不好。</p><ol start="4"><li>为了更好的利用计算机资源，并且更好的和用户进行交互，出现了分时系统。</li></ol><p>CPU将时间片分为1&#x2F;1000S，1&#x2F;1000执行程序1，之后执行程序2，再来回切换。</p><ol start="5"><li><p>个人电脑操作系统PC</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210162026243.png" alt="image-20221016202656160"></p></li><li><p>网络的快速发展，出现了分布式的操作系统</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210162028707.png" alt="image-20221016202830643"></p></li><li><p>云计算</p><p>人的周围出现大量嵌入式系统，给人个性化服务。</p></li></ol><h3 id="5、操作系统的结构"><a href="#5、操作系统的结构" class="headerlink" title="5、操作系统的结构"></a>5、操作系统的结构</h3><p>微内核的设计，尽可能把内核功能熙东到用户空间</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210162038032.png" alt="image-20221016203805979"></p><p>VMM</p><p>位于操作系统之下，让OS觉得自己直接在操纵硬件。（虚拟化）</p><p>充分发挥硬件资源，防止资源过剩。</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210162040832.png" alt="image-20221016204023743"></p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210162041321.png" alt="image-20221016204103221"></p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210162041559.png" alt="image-20221016204115441"></p><h2 id="二、操作系统的基本操作"><a href="#二、操作系统的基本操作" class="headerlink" title="二、操作系统的基本操作"></a>二、操作系统的基本操作</h2><h3 id="1、启动、中断、异常和系统调用"><a href="#1、启动、中断、异常和系统调用" class="headerlink" title="1、启动、中断、异常和系统调用"></a>1、启动、中断、异常和系统调用</h3><h4 id="1-1、启动"><a href="#1-1、启动" class="headerlink" title="1.1、启动"></a>1.1、启动</h4><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171640102.png" alt="image-20221017164000023" style="zoom:50%;" /><p>DISK:存放OS</p><p>BIOS:基本的I&#x2F;O处理系统</p><p>Bootloader:加载OS</p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171641326.png" alt="image-20221017164154259" style="zoom:50%;" /><p>POST（加电自检）：寻找显卡和执行BIOS</p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171646179.png" alt="image-20221017164622111" style="zoom: 80%;" /><h4 id="1-2、中断、异常和系统调用"><a href="#1-2、中断、异常和系统调用" class="headerlink" title="1.2、中断、异常和系统调用"></a>1.2、中断、异常和系统调用</h4><p>操作系统怎样管理外设，怎么给应用程序提供服务?</p><ul><li><p>系统调用（来源于应用程序）：系统程序主动向操作系统发出服务请求。</p></li><li><p>异常（来源于不良的应用程序）：非法指令或者其他坏的处理状态（如：内存出错）</p></li><li><p>中断（来源于外设）：来自不同的硬件设备的计时器和网络中断</p></li></ul><p>为什么应用程序要通过操作系统来管理硬件？</p><ul><li>操作系统是一种特殊的软件，在计算机运行中，内核是被信任的第三方，计算机认为操作系统是安全的，而软件并不都是安全的。</li><li>因此，只有内核可以执行特权命令。</li><li>把计算机的硬件资源全部交给操作系统进行管理，有利于软件设计时便捷，软件的可移植性较高。</li></ul><p>操作系统如何实现中断、异常和系统调用？</p><p>这三者有什么联系和差异？</p><p>源头：</p><ul><li>中断：外设</li><li>异常：应用程序意想不到的行为</li><li>系统调用：应用程序请求操作提供服务（主动的）</li></ul><p>处理时间：</p><ul><li><p>中断：异步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  异步时间：当中断产生时，应用程序并不知道什么时候产生的</span><br><span class="line"></span><br><span class="line">- 异常：同步</span><br><span class="line"></span><br><span class="line">- 系统调用：异步或同步</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>系统调用发出请求时，返回的时间可能是异步的，当系统调用发送请求后，如果执行其他程序，则返回数据是异步的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">响应：</span><br><span class="line"></span><br><span class="line">- 中断：持续，对用户应用程序是透明的（应用程序不知道有没有发生中断）。</span><br><span class="line">- 异常：杀死或者重新执行意想不到的应用程序指令。</span><br><span class="line">- 系统调用：等待和持续。</span><br><span class="line"></span><br><span class="line">##### 中断的处理过程</span><br><span class="line"></span><br><span class="line">硬件：</span><br><span class="line"></span><br><span class="line">1. 将内部、外部事件设置中断标记</span><br><span class="line">2. 中断事件的ID</span><br><span class="line"></span><br><span class="line">硬件：</span><br><span class="line"></span><br><span class="line">1. 保存当前状态</span><br><span class="line">2. 中断服务程序处理</span><br><span class="line">3. 清楚中断标记</span><br><span class="line">4. 恢复之前保存的处理状态</span><br><span class="line"></span><br><span class="line">##### 异常的处理过程</span><br><span class="line"></span><br><span class="line">异常会产生相应的异常编号:</span><br><span class="line"></span><br><span class="line">1. 保存现场</span><br><span class="line">2. 异常处理</span><br><span class="line">   - 杀死产生异常的程序</span><br><span class="line">   - 重新执行异常的指令</span><br><span class="line">3. 恢复现常</span><br><span class="line"></span><br><span class="line">##### 系统调用的处理</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171915550.png&quot; alt=&quot;image-20221017191542503&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">程序访问主要通过高层次的API接口而不是直接进行系统调用。</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171919724.png&quot; alt=&quot;image-20221017191919661&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202210171920439.png&quot; alt=&quot;image-20221017192013385&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">当应用程序进行系统调用时，操作系统会从用户态到内核态的转化，操作权从应用程序转为操作系统。操作系统对应用程序的系统调用的id号进行标识。</span><br><span class="line"></span><br><span class="line">系统调用和程序调用的区别？</span><br><span class="line"></span><br><span class="line">程序调用是一个栈空间完成的</span><br><span class="line"></span><br><span class="line">系统调用，在应用程序调用系统调用时会切换堆栈，还要完成用户态的转换，因此系统调用的开销比较大，但是安全性高。</span><br><span class="line"></span><br><span class="line">##### 跨越操作系统边界的开销</span><br><span class="line"></span><br><span class="line">- 在执行时间上的开销超过程序调用</span><br><span class="line">- 开销：</span><br><span class="line">  - 建立中断、异常、系统调用号与对应服务例程映射关系的初始化开销</span><br><span class="line">  - 建立内核堆栈</span><br><span class="line">  - 验证参数</span><br><span class="line">  - 内核态映射到用户态的地址空间，更新页面映射权限</span><br><span class="line">  - 内核态独立地址空间 TLB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&gt; 操作系统如何管理物理内存</span><br><span class="line"></span><br><span class="line">## 三、连续内存分配</span><br><span class="line"></span><br><span class="line">### 1、计算机体系结构、内存分层体系</span><br><span class="line"></span><br><span class="line">![image-20221018211705744](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210182117488.png)</span><br><span class="line"></span><br><span class="line">内存的层次结构：</span><br><span class="line"></span><br><span class="line">![image-20221018211801644](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210182118723.png)</span><br><span class="line"></span><br><span class="line">通过操作系统来管理内存，达到稳定快速。</span><br><span class="line"></span><br><span class="line">![image-20221018212040398](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210182120477.png)</span><br><span class="line"></span><br><span class="line">操作系统还能隔离进程之间的地址空间，也能在进程间进行保护。</span><br><span class="line"></span><br><span class="line">1. 抽象(对逻辑地址空间)</span><br><span class="line">2. 保护(进程的独立地址空间)</span><br><span class="line">3. 共享</span><br><span class="line">4. 虚拟化(更多的地址空间 虚拟内存：硬盘)</span><br><span class="line"></span><br><span class="line">操作系统管理内存的方法：</span><br><span class="line"></span><br><span class="line">- 程序重定位</span><br><span class="line">- 分段</span><br><span class="line">- 分页</span><br><span class="line">- 虚拟内存</span><br><span class="line">- 按需分配内存</span><br><span class="line"></span><br><span class="line">以上的方法高度依赖于硬件：</span><br><span class="line"></span><br><span class="line">- 必须直到内存架构</span><br><span class="line">- MMU（内存管理单元）：硬件组件负责处理CPU的内存访问请求。</span><br><span class="line"></span><br><span class="line">### 2、地址空间、地址生成</span><br><span class="line"></span><br><span class="line">#### 地址空间</span><br><span class="line"></span><br><span class="line">![image-20221018212807441](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210182128534.png)</span><br><span class="line"></span><br><span class="line">物理地址空间：内存条、硬盘</span><br><span class="line"></span><br><span class="line">逻辑地址空间：一个运行的程序对应的地址空间</span><br><span class="line"></span><br><span class="line">逻辑地址空间实际上是落脚在实际的物理地址空间的，需要操作系统的管理。</span><br><span class="line"></span><br><span class="line">#### 地址生成</span><br><span class="line"></span><br><span class="line">逻辑地址怎么生成的？</span><br><span class="line"></span><br><span class="line">![image-20221018213031811](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210182130906.png)</span><br><span class="line"></span><br><span class="line">一步一步的编译，最后通过loader（应用程序）把执行程序的逻辑地址分配在物理地址。</span><br><span class="line"></span><br><span class="line">![image-20221018213334501](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210182133589.png)</span><br><span class="line"></span><br><span class="line">CPU中的MMU保存了逻辑地址到物理地址的映射关系。来让我们通过映射访问到实际的物理地址。</span><br><span class="line"></span><br><span class="line">1. CPU执行某条指令，ALU请求逻辑地址</span><br><span class="line">2. CPU的MMU查找逻辑地址的映射表map是否存在对应物理地址，找到，返回。没有，去内存找。</span><br><span class="line">3. 如果有，给主存发送请求，需要物理地址的内容。</span><br><span class="line">4. 主存通过总线，把内容传给CPU。</span><br><span class="line">5. CPU拿到数据后，继续指令的执行。</span><br><span class="line"></span><br><span class="line">操作系统实际上是完成了从逻辑地址到物理地址关系的映射。</span><br><span class="line"></span><br><span class="line">![image-20221018214110531](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210182142610.png)</span><br><span class="line"></span><br><span class="line">- 编译器会把基于符号的地址空间到逻辑地址空间。</span><br><span class="line">- 操作系统会把逻辑地址空间映射到物理地址空间。同时保证程序独立分配地址空间，保证程序的正常运行。</span><br><span class="line"></span><br><span class="line">### 3、连续内存分配</span><br><span class="line"></span><br><span class="line">#### 内存碎片问题</span><br><span class="line"></span><br><span class="line">![image-20221018214320476](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210182143566.png)</span><br><span class="line"></span><br><span class="line">希望通过一种有效的分配方法，来减少内碎片、外碎片的问题。</span><br><span class="line"></span><br><span class="line">#### 分区的动态分配</span><br><span class="line"></span><br><span class="line">![image-20221018214531315](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210182145391.png)</span><br><span class="line"></span><br><span class="line">操作系统需要管理分配了和未分配的空间。</span><br><span class="line"></span><br><span class="line">#### 分配策略</span><br><span class="line"></span><br><span class="line">##### 首次适配</span><br><span class="line"></span><br><span class="line">![image-20221018214653040](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210182147966.png)</span><br><span class="line"></span><br><span class="line">实现：从第一块开始分配 0地址</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202210182149601.png&quot; alt=&quot;image-20221018214916478&quot; style=&quot;zoom: 67%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">##### 最优适配</span><br><span class="line"></span><br><span class="line">寻找最匹配的空间块。内存差最小。</span><br><span class="line"></span><br><span class="line">![image-20221018215023254](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210182150373.png)</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202210182150929.png&quot; alt=&quot;image-20221018215046854&quot; style=&quot;zoom:67%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">##### 最差适配</span><br><span class="line"></span><br><span class="line">![image-20221018215205253](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210182152368.png)</span><br><span class="line"></span><br><span class="line">和最优适配对应，找到内存差最大的内存块。</span><br><span class="line"></span><br><span class="line">![image-20221018215253220](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210182152296.png)</span><br><span class="line"></span><br><span class="line">中大型请求，最差适配还是比较合适的。</span><br><span class="line"></span><br><span class="line">应对不同的情况，选择不同的分配策略。</span><br><span class="line"></span><br><span class="line">#### 压缩式和交换式碎片处理</span><br><span class="line"></span><br><span class="line">如何把碎片联合起来，组成大的连续的碎片？</span><br><span class="line"></span><br><span class="line">##### 压缩式碎片处理</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202210182158695.png&quot; alt=&quot;image-20221018215857582&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">把之前的内存进行拷贝。</span><br><span class="line"></span><br><span class="line">问题：</span><br><span class="line"></span><br><span class="line">- 什么时候进行拷贝？(时机：可以在程序等待的过程中)</span><br><span class="line">- 开销大不大？（时间的开销，会不会影响程序的执行）</span><br><span class="line"></span><br><span class="line">##### 交换式碎片整理</span><br><span class="line"></span><br><span class="line">![image-20221018220200392](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210182202473.png)</span><br><span class="line"></span><br><span class="line">没有空闲空间了，不能使用紧致(压缩式)。</span><br><span class="line"></span><br><span class="line">通过把程序耗费的内存移到硬盘中。</span><br><span class="line"></span><br><span class="line">问题：</span><br><span class="line"></span><br><span class="line">- 选择哪一个程序进行移动？</span><br><span class="line">- 在什么时机进行移动？</span><br><span class="line">- 开销的大小？</span><br><span class="line"></span><br><span class="line">## 四、非连续内存分配</span><br><span class="line"></span><br><span class="line">### 1、为什么需要非连续内存分配这种管理方式？</span><br><span class="line"></span><br><span class="line">连续内存分配的缺点：</span><br><span class="line"></span><br><span class="line">- 分配给一个程序的物理内存是连续的</span><br><span class="line">- 内存利用率较低</span><br><span class="line">- 有外碎片、内碎片问题</span><br><span class="line"></span><br><span class="line">非连续分配的优点：</span><br><span class="line"></span><br><span class="line">- 一个程序的物理地址空间是连续的</span><br><span class="line">- 更好的内存利用和管理</span><br><span class="line">- 允许共享代码与数据（贡献库等...）</span><br><span class="line">- 支持动态加载和动态链接</span><br><span class="line"></span><br><span class="line">非连续分配的缺点：</span><br><span class="line"></span><br><span class="line">建立虚拟地址和物理地址之间转换的开销</span><br><span class="line"></span><br><span class="line">- 硬件方案</span><br><span class="line">  - 分页</span><br><span class="line">  - 分段</span><br><span class="line">- 软件方案</span><br><span class="line"></span><br><span class="line">### 2、非连续内存分配的方法</span><br><span class="line"></span><br><span class="line">- 分段(Segmentation)</span><br><span class="line">- 分页(Paging)</span><br><span class="line"></span><br><span class="line">#### 分段</span><br><span class="line"></span><br><span class="line">- 程序的分段地址空间</span><br><span class="line">- 分段寻址方案</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;C:/Users/huangruidong/AppData/Roaming/Typora/typora-user-images/image-20221021112201543.png&quot; alt=&quot;image-20221021112201543&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">![image-20221021112305222](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211123316.png)</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211124935.png&quot; alt=&quot;image-20221021112415866&quot; style=&quot;zoom:67%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">将连续的逻辑地址空间分段为非连续的物理地址空间</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211125905.png&quot; alt=&quot;image-20221021112538821&quot; style=&quot;zoom:67%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">![image-20221021112646245](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211126339.png)</span><br><span class="line"></span><br><span class="line">分段地址选址：段号+段的偏移</span><br><span class="line"></span><br><span class="line">#### 分页</span><br><span class="line"></span><br><span class="line">页地址选址：页号+页的偏移</span><br><span class="line"></span><br><span class="line">分页和分段的区别：</span><br><span class="line"></span><br><span class="line">- 在分段里边，段的尺寸是可变的</span><br><span class="line">- 在分页里边，页的尺寸大小是不变的</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211140279.png&quot; alt=&quot;image-20221021114022106&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211141715.png&quot; alt=&quot;image-20221021114130624&quot; style=&quot;zoom: 80%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211144516.png&quot; alt=&quot;image-20221021114456415&quot; style=&quot;zoom:80%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;C:/Users/huangruidong/AppData/Roaming/Typora/typora-user-images/image-20221021114907052.png&quot; alt=&quot;image-20221021114907052&quot; style=&quot;zoom:80%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211153061.png&quot; alt=&quot;image-20221021115234290&quot; style=&quot;zoom:80%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">通过页号查帧号</span><br><span class="line"></span><br><span class="line">![image-20221021115635068](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211156179.png)</span><br><span class="line"></span><br><span class="line">#### 页表</span><br><span class="line"></span><br><span class="line">![image-20221021132609864](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211326985.png)</span><br><span class="line"></span><br><span class="line">![image-20221021132637568](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211326654.png)</span><br><span class="line"></span><br><span class="line">![image-20221021150916315](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211509423.png)</span><br><span class="line"></span><br><span class="line">![image-20221021151523105](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211515167.png)</span><br><span class="line"></span><br><span class="line">- 页表可能占的空间很大</span><br><span class="line">- 页表如果放在内存上，时间上的开销很大。</span><br><span class="line"></span><br><span class="line">##### 应对时间开销：TLB</span><br><span class="line"></span><br><span class="line">![image-20221021151553493](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211515561.png)</span><br><span class="line"></span><br><span class="line">##### 应对内存开销：多级页表</span><br><span class="line"></span><br><span class="line">![image-20221021152354583](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211523651.png)</span><br><span class="line"></span><br><span class="line">![image-20221021152404907](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211524984.png)</span><br><span class="line"></span><br><span class="line">像B+树一样</span><br><span class="line"></span><br><span class="line">##### 反向页表</span><br><span class="line"></span><br><span class="line">![image-20221021152622306](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211526374.png)</span><br><span class="line"></span><br><span class="line">反转：以物理页号查找逻辑页号</span><br><span class="line"></span><br><span class="line">![image-20221021152808496](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211528561.png)</span><br><span class="line"></span><br><span class="line">![image-20221021152930397](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211529460.png)</span><br><span class="line"></span><br><span class="line">![image-20221021153115447](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211531525.png)</span><br><span class="line"></span><br><span class="line">![image-20221021153208185](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210211532275.png)</span><br><span class="line"></span><br><span class="line">## 五、虚拟内存管理技术</span><br><span class="line"></span><br><span class="line">### 1、虚拟内存的起因</span><br><span class="line"></span><br><span class="line">程序规模的增长速度远大于存储器容量的增长速度。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">理想中的存储器：</span><br><span class="line"></span><br><span class="line">- 更大</span><br><span class="line">- 更快</span><br><span class="line">- 更便宜</span><br><span class="line">- 非异失性</span><br><span class="line">- &lt;img src=&quot;C:/Users/huangruidong/AppData/Roaming/Typora/typora-user-images/image-20221024183501918.png&quot; alt=&quot;image-20221024183501918&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">硬盘比内存容量大，但是速度慢。</span><br><span class="line"></span><br><span class="line">能不能让操作系统通过一种操作，达到理想中的存储器？</span><br><span class="line"></span><br><span class="line">**自动的虚拟存储技术**</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202210241839139.png&quot; alt=&quot;image-20221024183954026&quot; style=&quot;zoom: 67%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">但是目前还达不到掉电不丢失的情况。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">在计算机系统中，尤其是多道程序运行的环境下，可能会出现内存不够用的情况，怎么办？</span><br><span class="line"></span><br><span class="line">- 手动的覆盖技术(overlay)：程序太大，超过了内存限制，只把需要的指令和数据保存在内存当中。</span><br><span class="line">- 自动的交换技术(swapping)：程序太多，超过了内存的容量，把暂时不能执行的程序送到外存中。</span><br><span class="line">- 自动的虚拟存储技术：在有限容量的内存中，以更小的页粒度为单位装入更多更大的程序。</span><br><span class="line"></span><br><span class="line">### 2、覆盖技术</span><br><span class="line"></span><br><span class="line">![image-20221024185954398](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210241859499.png)</span><br><span class="line"></span><br><span class="line">​简单理解为：分时共享</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202210241903462.png&quot; alt=&quot;image-20221024190350386&quot; style=&quot;zoom:80%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">![image-20221024190904279](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210241909327.png)</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202210241910196.png&quot; alt=&quot;image-20221024191028116&quot; style=&quot;zoom:80%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 3、交换技术</span><br><span class="line"></span><br><span class="line">![image-20221024191237043](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210241912140.png)</span><br><span class="line"></span><br><span class="line">导入、导出的开销比较大。</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202210241915532.png&quot; alt=&quot;image-20221024191546453&quot; style=&quot;zoom: 80%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">![image-20221024191939005](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210241919082.png)</span><br><span class="line"></span><br><span class="line">![image-20221024192038504](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210241920570.png)</span><br><span class="line"></span><br><span class="line">&gt;覆盖发生在程序内部，需要成需要自己操作，可操作性强。</span><br><span class="line">&gt;</span><br><span class="line">&gt;交换是程序和程序之间的交换，对程序员是透明的，但是开销较大。</span><br><span class="line"></span><br><span class="line">### 4、虚存技术</span><br><span class="line"></span><br><span class="line">#### 目标</span><br><span class="line"></span><br><span class="line">![image-20221024200008723](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210242000811.png)</span><br><span class="line"></span><br><span class="line">解决方法：**虚存技术**</span><br><span class="line"></span><br><span class="line">![image-20221024200233396](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210242002491.png)</span><br><span class="line"></span><br><span class="line">#### 程序局部性原理</span><br><span class="line"></span><br><span class="line">![image-20221024200412708](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210242004817.png)</span><br><span class="line"></span><br><span class="line">![image-20221024200625532](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210242006623.png)</span><br><span class="line"></span><br><span class="line">![image-20221024201256673](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210242012746.png)</span><br><span class="line"></span><br><span class="line">#### 基本概念</span><br><span class="line"></span><br><span class="line">![image-20221024201349772](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210242013872.png)</span><br><span class="line"></span><br><span class="line">#### 基本特性</span><br><span class="line"></span><br><span class="line">![image-20221024202147848](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210242021943.png)</span><br><span class="line"></span><br><span class="line">#### 虚拟页氏内存管理</span><br><span class="line"></span><br><span class="line">![image-20221024202349935](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210242023031.png)</span><br><span class="line"></span><br><span class="line">![image-20221024203504348](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210242035433.png)</span><br><span class="line"></span><br><span class="line">![image-20221024203607559](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210242036655.png)</span><br><span class="line"></span><br><span class="line">![image-20221024203826351](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210242038440.png)</span><br><span class="line"></span><br><span class="line">![image-20221024204539674](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210242045765.png)</span><br><span class="line"></span><br><span class="line">![image-20221024204835527](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210242048614.png)</span><br><span class="line"></span><br><span class="line">1+q换入换出比例</span><br><span class="line"></span><br><span class="line">如果P足够小，EAT接近10ns。</span><br><span class="line"></span><br><span class="line">因为程序具有局部性的特点，所以可以保证接近10ns。</span><br><span class="line"></span><br><span class="line">## 六、页面置换算法</span><br><span class="line"></span><br><span class="line">### 1、功能设置</span><br><span class="line"></span><br><span class="line">![image-20221026185719787](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210261900658.png)</span><br><span class="line"></span><br><span class="line">### 2、局部页面置换算法</span><br><span class="line"></span><br><span class="line">#### 最优页面置换算法</span><br><span class="line"></span><br><span class="line">&gt; 思路：把将来最少用到的页面置换出去</span><br><span class="line"></span><br><span class="line">![image-20221026190240689](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210261902822.png)</span><br><span class="line"></span><br><span class="line">![image-20221026190611852](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210261906943.png)</span><br><span class="line"></span><br><span class="line">d在将来用的距离最短，先置换出去。</span><br><span class="line"></span><br><span class="line">#### 先进先出算法（FIFO）</span><br><span class="line"></span><br><span class="line">&gt; 思路：像队列一样，把先进入的先置换出去。</span><br><span class="line"></span><br><span class="line">![image-20221026190744628](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210261907776.png)</span><br><span class="line"></span><br><span class="line">![image-20221026191335866](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210261913970.png)</span><br><span class="line"></span><br><span class="line">#### 最近最久未使用算法（LRU）</span><br><span class="line"></span><br><span class="line">&gt; 思路：替换出最近一段时间没有使用的页面，通过过去推测置换页面，对最优置换算法的改写。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 利用了程序的时间局部性。</span><br><span class="line"></span><br><span class="line">&gt; 程序局部性：</span><br><span class="line">&gt;</span><br><span class="line">&gt; - 时间局部性：最近访问过的数据，之后还要访问。</span><br><span class="line">&gt; - 空间局部性：数据内聚在一起。</span><br><span class="line"></span><br><span class="line">![image-20221026191553571](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210261915707.png)</span><br><span class="line"></span><br><span class="line">![image-20221026192608208](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210261926322.png)</span><br><span class="line"></span><br><span class="line">![image-20221026192831635](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210261928790.png)</span><br><span class="line"></span><br><span class="line">![image-20221026193048348](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210261930470.png)</span><br><span class="line"></span><br><span class="line">#### 时钟页面置换算法（Clock）</span><br><span class="line"></span><br><span class="line">&gt; 思路</span><br><span class="line">&gt;</span><br><span class="line">&gt; 当访问一个页时，硬件会把该页的access bit置1，过一段时间，OS会把access bit置0。</span><br><span class="line">&gt;</span><br><span class="line">&gt; Clock算法就是对FIFO的改进，让他找一个相对比较“老”的数据置换出去。</span><br><span class="line"></span><br><span class="line">![image-20221026193337321](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210261933471.png)</span><br><span class="line"></span><br><span class="line">![image-20221026193846449](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210261938558.png)</span><br><span class="line"></span><br><span class="line">构建一个环形链表，遇到要置换的情况，从当前指针开始遍历链表。</span><br><span class="line"></span><br><span class="line">- 先看会不会发生缺页，缺页就是查询的过程，如果有的话，access byte 先置1，表示最近访问过。</span><br><span class="line">- 下来才会进行Clock算法。</span><br><span class="line"></span><br><span class="line">- 遇到access bit为1，置0，让他&quot;老&quot;一步，跳到下一个位置。</span><br><span class="line">- 遇到access bit为0，替换，指针指向下一个节点。</span><br><span class="line"></span><br><span class="line">#### 二次机会法</span><br><span class="line"></span><br><span class="line">如果是写操作，dirty bit会为1</span><br><span class="line"></span><br><span class="line">![image-20221026201351687](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262013789.png)</span><br><span class="line"></span><br><span class="line">![image-20221026202258814](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262022938.png)</span><br><span class="line"></span><br><span class="line">#### 最不常用算法（LFU）</span><br><span class="line"></span><br><span class="line">&gt; 思路：选择访问次数最少的页面</span><br><span class="line"></span><br><span class="line">![image-20221026202410800](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262024919.png)</span><br><span class="line"></span><br><span class="line">![image-20221026202548885](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262025948.png)</span><br><span class="line"></span><br><span class="line">#### Belady现象</span><br><span class="line"></span><br><span class="line">![image-20221026202918485](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262029595.png)</span><br><span class="line"></span><br><span class="line">![image-20221026203200127](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262032255.png)</span><br><span class="line"></span><br><span class="line">![image-20221026203310691](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262033818.png)</span><br><span class="line"></span><br><span class="line">![image-20221026203420381](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262034483.png)</span><br><span class="line"></span><br><span class="line">- LRU满足栈算法</span><br><span class="line">- FIFO不满足栈算法</span><br><span class="line"></span><br><span class="line">#### LRU、FIFO、Clock的比较</span><br><span class="line"></span><br><span class="line">![image-20221026203539653](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262035833.png)</span><br><span class="line"></span><br><span class="line">![image-20221026203815501](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262038624.png)</span><br><span class="line"></span><br><span class="line">Clock和LRU如果不具备局部性，会退化为FIFO</span><br><span class="line"></span><br><span class="line">### 3、全局页面置换算法</span><br><span class="line"></span><br><span class="line">#### 局部页替换算法的问题</span><br><span class="line"></span><br><span class="line">![image-20221026203937206](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262039313.png)</span><br><span class="line"></span><br><span class="line">- 固定分配的页帧大小没有考虑实际的动态变化，可能会发生较多缺失，能不能动态地分配页帧大小？</span><br><span class="line"></span><br><span class="line">#### 工作集模式</span><br><span class="line"></span><br><span class="line">![image-20221026204100955](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262041114.png)</span><br><span class="line"></span><br><span class="line">![image-20221026204303245](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262043366.png)</span><br><span class="line"></span><br><span class="line">![image-20221026204515932](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262045042.png)</span><br><span class="line"></span><br><span class="line">![image-20221026204614633](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262046727.png)</span><br><span class="line"></span><br><span class="line">![image-20221026204658421](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262046569.png)</span><br><span class="line"></span><br><span class="line">#### 工作集页置换算法</span><br><span class="line"></span><br><span class="line">![image-20221026205054584](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262050687.png)</span><br><span class="line"></span><br><span class="line">![image-20221026205539898](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262055025.png)</span><br><span class="line"></span><br><span class="line">如果数据的时间大于工作集大小，即使空间还有，也会换出。</span><br><span class="line"></span><br><span class="line">#### 缺页率置换算法</span><br><span class="line"></span><br><span class="line">![image-20221026205626748](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262056906.png)</span><br><span class="line"></span><br><span class="line">![image-20221026205706623](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262057721.png)</span><br><span class="line"></span><br><span class="line">![image-20221026205747759](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262057843.png)</span><br><span class="line"></span><br><span class="line">![image-20221026205843873](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262058975.png)</span><br><span class="line"></span><br><span class="line">![image-20221026210411888](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262104019.png)</span><br><span class="line"></span><br><span class="line">时刻4时，两次中断的时间大于预定时间T，认为跑的比较好，减少工作集，把1-4访问的页继续留在这，其他的页移除。</span><br><span class="line"></span><br><span class="line">#### 抖动问题</span><br><span class="line"></span><br><span class="line">![image-20221026210658924](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262106107.png)</span><br><span class="line"></span><br><span class="line">![image-20221026211027063](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210262110155.png)</span><br><span class="line"></span><br><span class="line">## 七、进程管理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 1、进程(process)描述</span><br><span class="line"></span><br><span class="line">#### 进程的定义</span><br><span class="line"></span><br><span class="line">**进程：**一个具有一定独立功能的程序在一个数据集合上的一次动态执行过程。</span><br><span class="line"></span><br><span class="line">![image-20221028191536744](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210281915900.png)</span><br><span class="line"></span><br><span class="line">#### 进程的组成</span><br><span class="line"></span><br><span class="line">![image-20221031163515491](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210311635633.png)</span><br><span class="line"></span><br><span class="line">![image-20221031163602283](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210311636358.png)</span><br><span class="line"></span><br><span class="line">进程不等于程序，进程是cpu的依次执行过程，程序只是静态的代码。</span><br><span class="line"></span><br><span class="line">![ ](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312249680.png)</span><br><span class="line"></span><br><span class="line">![image-20221031225136685](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312251791.png)</span><br><span class="line"></span><br><span class="line">#### 进程的特点</span><br><span class="line"></span><br><span class="line">&gt; 并发，一段时间内多个进程同时执行</span><br><span class="line">&gt;</span><br><span class="line">&gt; 并行，一个时刻多个进程同时执行</span><br><span class="line"></span><br><span class="line">![image-20221031225850239](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312258326.png)</span><br><span class="line"></span><br><span class="line">如何设计一个OS来保证以上特点？</span><br><span class="line"></span><br><span class="line">![image-20221031230021117](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312300208.png)</span><br><span class="line"></span><br><span class="line">通过进程控制块来保证进程的特点。</span><br><span class="line"></span><br><span class="line">#### 进程控制结构</span><br><span class="line"></span><br><span class="line">![image-20221031231749475](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312317566.png)</span><br><span class="line"></span><br><span class="line">![image-20221031231826227](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312318331.png)</span><br><span class="line"></span><br><span class="line">![image-20221031231912491](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312319603.png)</span><br><span class="line"></span><br><span class="line">![image-20221031232033815](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312320922.png)</span><br><span class="line"></span><br><span class="line">![image-20221031232310314](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312323409.png)</span><br><span class="line"></span><br><span class="line">### 2、进程状态(State)</span><br><span class="line"></span><br><span class="line">#### 进程的生命周期</span><br><span class="line"></span><br><span class="line">1. 进程创建</span><br><span class="line"></span><br><span class="line">   ![image-20221031232557255](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312325340.png)</span><br><span class="line"></span><br><span class="line">2. 进程运行</span><br><span class="line"></span><br><span class="line">   ![image-20221031232657201](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312326280.png)</span><br><span class="line"></span><br><span class="line">3. 进程等待</span><br><span class="line"></span><br><span class="line">   ![image-20221031232730351](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312327433.png)</span><br><span class="line"></span><br><span class="line">4. 进程唤醒</span><br><span class="line"></span><br><span class="line">   ![image-20221031232852501](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312328585.png)</span><br><span class="line"></span><br><span class="line">5. 进程结束</span><br><span class="line"></span><br><span class="line">   ![image-20221031232928822](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312329921.png)</span><br><span class="line"></span><br><span class="line">#### 进程的状态变化</span><br><span class="line"></span><br><span class="line">![image-20221031233057933](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312330026.png)</span><br><span class="line"></span><br><span class="line">![image-20221031233140734](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312331823.png)</span><br><span class="line"></span><br><span class="line">![image-20221031233207784](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312332877.png)</span><br><span class="line"></span><br><span class="line">![image-20221031233414083](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312334156.png)</span><br><span class="line"></span><br><span class="line">![image-20221031233525168](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312335248.png)</span><br><span class="line"></span><br><span class="line">![image-20221031233601720](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312336793.png)</span><br><span class="line"></span><br><span class="line">#### 进程挂起模型</span><br><span class="line"></span><br><span class="line">![image-20221031233731185](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312337280.png)</span><br><span class="line"></span><br><span class="line">![image-20221031234050492](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312340601.png)</span><br><span class="line"></span><br><span class="line">![image-20221031234142922](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312341015.png)</span><br><span class="line"></span><br><span class="line">&gt; OS如何管理PCD?</span><br><span class="line"></span><br><span class="line">![image-20221031234233017](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312342090.png)</span><br><span class="line"></span><br><span class="line">![image-20221031234319915](https://gitee.com/messi-study-java/pic_go/raw/master/img/202210312343000.png)</span><br><span class="line"></span><br><span class="line">### 3、线程(Thread)</span><br><span class="line"></span><br><span class="line">#### 线程的来源</span><br><span class="line"></span><br><span class="line">![image-20221104192636095](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211041927546.png)</span><br><span class="line"></span><br><span class="line">![image-20221104192758934](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211041928477.png)</span><br><span class="line"></span><br><span class="line">![image-20221104193022595](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211041930805.png)</span><br><span class="line"></span><br><span class="line">如何解决以上问题？</span><br><span class="line"></span><br><span class="line">需要一种新的实体（线程），满足以下特性：</span><br><span class="line"></span><br><span class="line">1. 实体之间可以并发的执行。</span><br><span class="line">2. 实体之间共享相同的地址空间。（进程是独立的地址空间）</span><br><span class="line"></span><br><span class="line">#### 什么是线程</span><br><span class="line"></span><br><span class="line">![image-20221104193428409](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211041934423.png)</span><br><span class="line"></span><br><span class="line">**线程成为进程的重要组成部分。**</span><br><span class="line"></span><br><span class="line">一个进程可以有多个线程，线程之间共享进程的资源，直接访问进程的代码、数据、空间、文件等。</span><br><span class="line"></span><br><span class="line">![image-20221104193820117](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211041938411.png)</span><br><span class="line"></span><br><span class="line">![image-20221104194344117](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211041943117.png)</span><br><span class="line"></span><br><span class="line">![image-20221104194448694](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211041944162.png)</span><br><span class="line"></span><br><span class="line">#### 线程与进程的比较</span><br><span class="line"></span><br><span class="line">- 进程是资源分配的单位，线程是CPU调度单位。</span><br><span class="line"></span><br><span class="line">  &gt; CPU是一种特殊的资源，会给线程分配所需要的寄存器和栈。</span><br><span class="line"></span><br><span class="line">- 进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈。</span><br><span class="line"></span><br><span class="line">- 线程同样具有就绪、阻塞和执行三种基本状态，同样具有状态之间的转换关系。</span><br><span class="line"></span><br><span class="line">- 线程能减少并发执行的时间和空间开销。</span><br><span class="line"></span><br><span class="line">  - 线程的创建时间比进程段；</span><br><span class="line">  - 线程的终止时间比进程短；</span><br><span class="line">  - 同一进程内的线程切换时间比进程短；</span><br><span class="line">  - 由于同一进程的各线程间共享内存和文件资源，可直接进行不通过内核的通信。</span><br><span class="line"></span><br><span class="line">#### 线程的实现</span><br><span class="line"></span><br><span class="line">主要的三种线程的实现方式：</span><br><span class="line"></span><br><span class="line">1. 用户线程：在用户空间实现`POSIX Pthreads`,`Mach C-threads`，`Solaris threads`</span><br><span class="line">2. 内核线程：在内核中实现`Windows`,`Solaris`,`Linux`</span><br><span class="line">3. 轻量级进程：在内核中实现，支持用户线程`Solaris`</span><br><span class="line"></span><br><span class="line">用户线程和内核线程的关系：</span><br><span class="line"></span><br><span class="line">- 多对一</span><br><span class="line">- 一对一</span><br><span class="line">- 多对多</span><br><span class="line"></span><br><span class="line">![image-20221104202842607](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211042028802.png)</span><br><span class="line"></span><br><span class="line">![image-20221104202904428](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211042029726.png)</span><br><span class="line"></span><br><span class="line">![image-20221104203207570](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211042032135.png)</span><br><span class="line"></span><br><span class="line">![image-20221104203244373](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211042032847.png)</span><br><span class="line"></span><br><span class="line">![image-20221104203541357](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211042035853.png)</span><br><span class="line"></span><br><span class="line">### 4、上下文切换</span><br><span class="line"></span><br><span class="line">![image-20221104203632771](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211042036676.png)</span><br><span class="line"></span><br><span class="line">![image-20221104203950516](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211042039221.png)</span><br><span class="line"></span><br><span class="line">![image-20221104204600381](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211042046492.png)</span><br><span class="line"></span><br><span class="line">### 5、进程控制</span><br><span class="line"></span><br><span class="line">#### 加载执行进程</span><br><span class="line"></span><br><span class="line">![image-20221104204728497](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211042047592.png)</span><br><span class="line"></span><br><span class="line">![image-20221104205018688](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211042050789.png)</span><br><span class="line"></span><br><span class="line">![image-20221104205229519](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211042052610.png)</span><br><span class="line"></span><br><span class="line">![image-20221104205306761](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211042053855.png)</span><br><span class="line"></span><br><span class="line">#### 等待和终止进程</span><br><span class="line"></span><br><span class="line">![image-20221104205727684](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211042057809.png)</span><br><span class="line"></span><br><span class="line">父进程要等待子进程的exit()，后来回收进程控制块PCB，这一块开销，子进程自己释放不掉。</span><br><span class="line"></span><br><span class="line">![image-20221104210247662](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211042102757.png)</span><br><span class="line"></span><br><span class="line">还有一种情况，子进程执行exit()后，父进程还没来得及释放子进程的PCB，这个时候子进程处于僵尸态。(zombie)</span><br><span class="line"></span><br><span class="line">如果父进程已经死了，子进程的PCB还没来得及释放，处于僵尸态。操作系统会扫描根进程来释放僵尸态的进程，清理空间。</span><br><span class="line"></span><br><span class="line">![image-20221104210710818](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211042107922.png)</span><br><span class="line"></span><br><span class="line">执行exec()系统可以处于不同状态。</span><br><span class="line"></span><br><span class="line">- 被调度</span><br><span class="line">- 被阻塞</span><br><span class="line"></span><br><span class="line">## 八、调度</span><br><span class="line"></span><br><span class="line">### 1、背景</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171317139.png&quot; alt=&quot;image-20221117131753050&quot; style=&quot;zoom:67%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">![image-20221117131903172](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171319253.png)</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171320607.png&quot; alt=&quot;image-20221117132008510&quot; style=&quot;zoom:80%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">**CPU调度方式**</span><br><span class="line"></span><br><span class="line">(1)不可抢占</span><br><span class="line"></span><br><span class="line">调度程序必须等待事件结束(效率低，不采用)；</span><br><span class="line"></span><br><span class="line">(2)可以抢占</span><br><span class="line"></span><br><span class="line">- 调度程序在中断被响应后执行；</span><br><span class="line">- 当前的进程从运行切换到就绪，或者一个进程从等待切换到就绪；</span><br><span class="line">- 当前运行的进程可以被换出。</span><br><span class="line"></span><br><span class="line">注意，以上一般指用户态；内核态也可能涉及到是否抢占。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">现在操作系统常用的就是抢占式的调度策略。</span><br><span class="line"></span><br><span class="line">### 2、调度原则</span><br><span class="line"></span><br><span class="line">![image-20221117161918259](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171619394.png)</span><br><span class="line"></span><br><span class="line">#### 评价指标</span><br><span class="line"></span><br><span class="line">![image-20221117161935593](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171619680.png)</span><br><span class="line"></span><br><span class="line">![image-20221117162309343](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171623440.png)</span><br><span class="line"></span><br><span class="line">#### 理想的调度原则</span><br><span class="line"></span><br><span class="line">![image-20221117162517231](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171625329.png)</span><br><span class="line"></span><br><span class="line">![image-20221117162602080](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171626155.png)</span><br><span class="line"></span><br><span class="line">#### 调度公平性</span><br><span class="line"></span><br><span class="line">![image-20221117162715043](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171627116.png)</span><br><span class="line"></span><br><span class="line">### 3、调度算法</span><br><span class="line"></span><br><span class="line">![image-20221117162827019](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171628102.png)</span><br><span class="line"></span><br><span class="line">#### 先来先服务</span><br><span class="line"></span><br><span class="line">![image-20221117162939645](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171629729.png)</span><br><span class="line"></span><br><span class="line">![image-20221117163158967](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171631052.png)</span><br><span class="line"></span><br><span class="line">![image-20221117163301181](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171633276.png)</span><br><span class="line"></span><br><span class="line">![image-20221117163433581](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171634675.png)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>相当于P4和P5各少等一个P3的执行时间，但是P3要多等一个P4+P5的执行时间，总的算下来还是亏了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">优点：平均等待时间最短</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line"></span><br><span class="line">![image-20221117163741644](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171637733.png)</span><br><span class="line"></span><br><span class="line">预估程序的执行时间（通过当前时间，预估未来的执行时间，类似TCP rtt）</span><br><span class="line"></span><br><span class="line">![image-20221117163951772](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171639859.png)</span><br><span class="line"></span><br><span class="line">#### 最高响应比优先</span><br><span class="line"></span><br><span class="line">![image-20221117164131232](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171641316.png)</span><br><span class="line"></span><br><span class="line">R越大，等待的占比越高，越需要优先相应。</span><br><span class="line"></span><br><span class="line">缺点：要不要考虑抢占问题</span><br><span class="line"></span><br><span class="line">优点：饥饿问题得到有效缓解。</span><br><span class="line"></span><br><span class="line">#### 轮询</span><br><span class="line"></span><br><span class="line">![image-20221117164737470](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171647555.png)</span><br><span class="line"></span><br><span class="line">![image-20221117164758981](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171647069.png)</span><br><span class="line"></span><br><span class="line">设定一个固定的时间片，达到时间片就把CPU让出来。</span><br><span class="line"></span><br><span class="line">每一个进程都有机会被执行。（公平）</span><br><span class="line"></span><br><span class="line">通过等待时间来衡量轮询调度算法效率。</span><br><span class="line"></span><br><span class="line">![image-20221117164956958](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171649040.png)</span><br><span class="line"></span><br><span class="line">时间片的选择尤为重要。</span><br><span class="line"></span><br><span class="line">![image-20221117165118170](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171651274.png)</span><br><span class="line"></span><br><span class="line">#### 多级反馈队列</span><br><span class="line"></span><br><span class="line">![image-20221117165308096](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171653183.png)</span><br><span class="line"></span><br><span class="line">![image-20221117165356096](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171653187.png)</span><br><span class="line"></span><br><span class="line">根据优先级来进行调度</span><br><span class="line"></span><br><span class="line">&gt; 更正：时间量子大小随优先级增加级别降低</span><br><span class="line"></span><br><span class="line">#### 公平共享</span><br><span class="line"></span><br><span class="line">![image-20221117165710833](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171657927.png)</span><br><span class="line"></span><br><span class="line">#### 如何评价</span><br><span class="line"></span><br><span class="line">![image-20221117165839658](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171658746.png)</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line"></span><br><span class="line">![image-20221117165936369](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171659439.png)</span><br><span class="line"></span><br><span class="line">### 4、实时调度</span><br><span class="line"></span><br><span class="line">#### 实时系统</span><br><span class="line"></span><br><span class="line">![image-20221117170145971](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171701049.png)</span><br><span class="line"></span><br><span class="line">#### 实时系统的分类</span><br><span class="line"></span><br><span class="line">![image-20221117170233321](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171702398.png)</span><br><span class="line"></span><br><span class="line">#### 实时调度的描述</span><br><span class="line"></span><br><span class="line">![image-20221117170332299](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171703382.png)</span><br><span class="line"></span><br><span class="line">![image-20221117170431859](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171704945.png)</span><br><span class="line"></span><br><span class="line">![image-20221117170510147](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171705236.png)</span><br><span class="line"></span><br><span class="line">![image-20221117170545971](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171705050.png)</span><br><span class="line"></span><br><span class="line">静态优先级调度：任务开始之前已经定义好了优先级。</span><br><span class="line"></span><br><span class="line">动态优先级调度：任务开始后，根据任务的运行情况，定义优先级。</span><br><span class="line"></span><br><span class="line">![image-20221117170652159](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171706243.png)</span><br><span class="line"></span><br><span class="line">### 5、多处理器调度</span><br><span class="line"></span><br><span class="line">![image-20221117170841772](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171708865.png)</span><br><span class="line"></span><br><span class="line">针对多处理器系统，能否达到负载均衡。</span><br><span class="line"></span><br><span class="line">### 6、优先级反转</span><br><span class="line"></span><br><span class="line">![image-20221117171118959](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171711099.png)</span><br><span class="line"></span><br><span class="line">![image-20221117171300574](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171713649.png)</span><br><span class="line"></span><br><span class="line">问题：优先级：T1&gt;T2&gt;T3；T1和T3共享某一块资源，而正被T3占用，T1等待，T2抢占T3，于是T3等待，进而导致T1等待，而T1优先级高于T3，产生矛盾，称为优先级反转。</span><br><span class="line"></span><br><span class="line">![image-20221117171508686](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171715763.png)</span><br><span class="line"></span><br><span class="line">解决方法：优先级继承</span><br><span class="line"></span><br><span class="line">当T3拿了T1的贡献资源时，让T3的优先级=T1优先级，先执行完T3，就可以接着执行T1了，而且不会被T2打断。</span><br><span class="line"></span><br><span class="line">![image-20221117171708021](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211171717098.png)</span><br><span class="line"></span><br><span class="line">## 九、同步</span><br><span class="line"></span><br><span class="line">### 1、背景</span><br><span class="line"></span><br><span class="line">![image-20221119201800034](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192018022.png)</span><br><span class="line"></span><br><span class="line">&gt; 独立的线程：</span><br><span class="line">&gt;</span><br><span class="line">&gt; - 不和其他线程共享资源或状态</span><br><span class="line">&gt; - 确定性：输入状态决定结果</span><br><span class="line">&gt; - 可重现：能够重现起始条件I/O</span><br><span class="line">&gt; - 调度顺序不重要</span><br><span class="line">&gt;</span><br><span class="line">&gt; 合作线程：</span><br><span class="line">&gt;</span><br><span class="line">&gt; - 在多个线程中共享状态</span><br><span class="line">&gt; - 不确定性</span><br><span class="line">&gt; - 不可重现</span><br><span class="line">&gt;</span><br><span class="line">&gt; 不确定性和不可重现意味着bug可能是间歇性发生的。</span><br><span class="line"></span><br><span class="line">合作的优点：</span><br><span class="line"></span><br><span class="line">1. 共享资源</span><br><span class="line">2. 加速</span><br><span class="line">3. 模块化</span><br><span class="line"></span><br><span class="line">![image-20221119202302449](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192023554.png)</span><br><span class="line"></span><br><span class="line">![image-20221119202433106](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192024235.png)</span><br><span class="line"></span><br><span class="line">next_pid系统当前最高的进程id号</span><br><span class="line"></span><br><span class="line">![image-20221119202811321](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192028424.png)</span><br><span class="line"></span><br><span class="line">&gt; 在切换到进程2时，会保存进程1的状态值，所以在切回来时，reg1 = 1</span><br><span class="line"></span><br><span class="line">![image-20221119203053757](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192030861.png)</span><br><span class="line"></span><br><span class="line">### 2、一些概念</span><br><span class="line"></span><br><span class="line">#### 竞态条件</span><br><span class="line"></span><br><span class="line">![image-20221119203254209](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192032302.png)</span><br><span class="line"></span><br><span class="line">#### 原子操作</span><br><span class="line"></span><br><span class="line">![image-20221119203325393](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192033523.png)</span><br><span class="line"></span><br><span class="line">![image-20221119203640782](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192036893.png) </span><br><span class="line"></span><br><span class="line">#### 一些概念</span><br><span class="line"></span><br><span class="line"> ![image-20221119204019305](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192040419.png)</span><br><span class="line"></span><br><span class="line">#### 举例</span><br><span class="line"></span><br><span class="line">![image-20221119204455657](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192044785.png)</span><br><span class="line"></span><br><span class="line">![image-20221119204637236](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192046358.png)</span><br><span class="line"></span><br><span class="line">![image-20221119204827809](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192048908.png)</span><br><span class="line"></span><br><span class="line">![image-20221119205101608](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192051717.png)</span><br><span class="line"></span><br><span class="line">![image-20221119205201899](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192052003.png)</span><br><span class="line"></span><br><span class="line">![image-20221119205327759](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192053889.png)</span><br><span class="line"></span><br><span class="line">![image-20221119205609145](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192056245.png)</span><br><span class="line"></span><br><span class="line">![image-20221119205656972](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192056089.png)</span><br><span class="line"></span><br><span class="line">可以解决购买面包的情况。</span><br><span class="line"></span><br><span class="line">![image-20221119205938148](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192059252.png)</span><br><span class="line"></span><br><span class="line">![image-20221119210332907](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192104204.png)</span><br><span class="line"></span><br><span class="line">### 3、临界区</span><br><span class="line"></span><br><span class="line">  ![](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192104103.png)</span><br><span class="line"></span><br><span class="line">### 方法一：禁用硬件中断</span><br><span class="line"></span><br><span class="line">![image-20221119210623922](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192106028.png)</span><br><span class="line"></span><br><span class="line">- 进入临界区：**屏蔽中断**</span><br><span class="line"></span><br><span class="line">- 出临界区：**开启中断**</span><br><span class="line"></span><br><span class="line">![image-20221119210747586](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192107696.png)</span><br><span class="line"></span><br><span class="line">多CPU屏蔽一个中断，无法解决互斥问题。而且屏蔽中断的话，有其他请求就要等待，影响速度。</span><br><span class="line"></span><br><span class="line">### 方法二：基于软件的解决方法</span><br><span class="line"></span><br><span class="line">![image-20221119211028598](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192110670.png)</span><br><span class="line"></span><br><span class="line">![image-20221119211126722](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192111800.png)</span><br><span class="line"></span><br><span class="line">![image-20221119211913913](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192119000.png)</span><br><span class="line"></span><br><span class="line">​                                                                        </span><br><span class="line"></span><br><span class="line">无法保证互斥，存在死锁。</span><br><span class="line"></span><br><span class="line">![image-20221119212056573](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192120672.png)</span><br><span class="line"></span><br><span class="line">![image-20221119212250411](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192122493.png)</span><br><span class="line"></span><br><span class="line">![image-20221119212907562](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192129641.png)</span><br><span class="line"></span><br><span class="line">针对N个进程实现互斥：</span><br><span class="line"></span><br><span class="line">![image-20221119212956649](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192129732.png)</span><br><span class="line"></span><br><span class="line">![image-20221119213030329](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192130418.png)</span><br><span class="line"></span><br><span class="line">![image-20221119213150737](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192131833.png)</span><br><span class="line"></span><br><span class="line">### 方法三：更高的抽象</span><br><span class="line"></span><br><span class="line">![image-20221119213254200](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192132295.png)</span><br><span class="line"></span><br><span class="line">![image-20221119213314802](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192133891.png)</span><br><span class="line"></span><br><span class="line">![image-20221119213354336](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192133611.png)</span><br><span class="line"></span><br><span class="line">![image-20221119213455651](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192134728.png)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">![image-20221119214007913](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192140003.png)</span><br><span class="line"></span><br><span class="line">如果锁被释放，返回值是0，设置target为1，跳出循环，进入等待区。</span><br><span class="line"></span><br><span class="line">如果锁没被释放，返回值是1，设置target为1，持续循环，忙等，等待释放锁。</span><br><span class="line"></span><br><span class="line">不管可以支持2线程，还可以支持n线程。</span><br><span class="line"></span><br><span class="line">![image-20221119214206586](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192142681.png)</span><br><span class="line"></span><br><span class="line">怎么样能不忙等？</span><br><span class="line"></span><br><span class="line">让他进行睡眠，释放资源。</span><br><span class="line"></span><br><span class="line">主要是看上下文切换的开销和忙等的开销。睡眠的话，唤醒时，会进行进程的上下文切换。</span><br><span class="line"></span><br><span class="line">![image-20221119214247477](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192142564.png)</span><br><span class="line"></span><br><span class="line">![image-20221119214441291](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192144370.png)</span><br><span class="line"></span><br><span class="line">如果锁被释放，lock是0，key为1，exchange, lock = 1，进入等待区。</span><br><span class="line"></span><br><span class="line">如果锁没被释放,lock是1，持续循环，忙等，等待释放锁lock = 0。</span><br><span class="line"></span><br><span class="line">![image-20221119214733923](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192147000.png)</span><br><span class="line"></span><br><span class="line">![image-20221119214749866](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211231916054.png)</span><br><span class="line"></span><br><span class="line">![image-20221119214851711](https://gitee.com/messi-study-java/pic_go/raw/master/img/202211192148796.png)</span><br><span class="line"></span><br><span class="line">**总结**：</span><br><span class="line"></span><br><span class="line">![image-20221209213233020](../images/操作系统/image-20221209213233020.png)</span><br><span class="line"></span><br><span class="line">![image-20221209213254629](../images/操作系统/image-20221209213254629.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 十、信号量和管程</span><br><span class="line"></span><br><span class="line">针对互斥的问题，采用更级的手段解决同步问题。</span><br><span class="line"></span><br><span class="line">### 1、信号量</span><br><span class="line"></span><br><span class="line">![image-20221209213853231](../images/操作系统/image-20221209213853231.png)</span><br><span class="line"></span><br><span class="line">![image-20221209213952479](../images/操作系统/image-20221209213952479.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 2、信号量使用</span><br><span class="line"></span><br><span class="line">可以把信号量看成是现在所拥有的资源数。当有程序访问时，就占到了这个资源，信号量--。</span><br><span class="line"></span><br><span class="line">p操作就相当于程序占有资源，如果信号量&gt;0,就--表示使用。如果信号量&lt;=0 --就表示预约。</span><br><span class="line"></span><br><span class="line">v操作就相当于一个程序执行完后，释放资源。释放的资源可以给其他程序分配使用。如果此时信号量&lt;=0，说明有程序在排队等待，因此唤醒一个程序，把资源给他，让他运行。</span><br><span class="line"></span><br><span class="line">![image-20221209214137005](../images/操作系统/image-20221209214137005.png)</span><br><span class="line"></span><br><span class="line">![image-20221209215032607](../images/操作系统/image-20221209215032607.png)</span><br><span class="line"></span><br><span class="line">&gt; 二进制的信号量可以模拟 **锁机制** 的功能</span><br><span class="line"></span><br><span class="line">使用案例：</span><br><span class="line"></span><br><span class="line">二进制信号量的使用：</span><br><span class="line"></span><br><span class="line">![image-20221209215212293](../images/操作系统/image-20221209215212293.png)</span><br><span class="line"></span><br><span class="line">![image-20221209215252781](../images/操作系统/image-20221209215252781.png)</span><br><span class="line"></span><br><span class="line">a程序调用p操作，阻塞。等待b完成操作调用v，这个时候a才可以进行后半段的程序。</span><br><span class="line"></span><br><span class="line">二进制信号量解决一些简单的问题，遇到复杂的问题，需要用到计数信号量。</span><br><span class="line"></span><br><span class="line">![image-20221209215607297](../images/操作系统/image-20221209215607297.png)</span><br><span class="line"></span><br><span class="line">![image-20221209215824532](../images/操作系统/image-20221209215824532.png)</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line">Class BoundedBuffer &#123;</span><br><span class="line">    mutex = new Semaphore(1); // 互斥锁</span><br><span class="line">    fullBuffers = new Semaphore(0); // 缓冲区buffer是，生产者生产，消费者消费，初始值0，表示没有消息</span><br><span class="line">    emptyBuffers = new Semaphore(n); // 生产者，初始化有n个生产者</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BoundedBuffer::Deposit(c)&#123; // 生产者的生产过程</span><br><span class="line">    emptyBuffers-&gt;P(); // 从生产者中拿到资源，也就是看生产的数量是不是已经够了</span><br><span class="line">    mutex-&gt;P(); // 拿互斥锁，同一时间，只能读 or 写</span><br><span class="line">    Add c to the buffer; // 写数据到 buffer</span><br><span class="line">    mutex-&gt;V(); // 释放锁</span><br><span class="line">    fullBuffers-&gt;V(); // 写完之后，也就是生产者生产完之后，消费者可以消费</span><br><span class="line">&#125;</span><br><span class="line">BoundedBuffer::Remove(c)&#123; // 消费者消费过程</span><br><span class="line">    fullBuffers-&gt;P(); // 先拿缓冲区数据，看是不是可以拿到消息</span><br><span class="line">mutex-&gt;P(); // 拿互斥锁</span><br><span class="line">    Remove c from buffer; // 读数据</span><br><span class="line">    mutex-&gt;V(); // 释放锁</span><br><span class="line">    emptyBuffers-&gt;V(); // 读完之后，也就是消费者消费完消息之后，生产者可以继续消费</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>P、V操作的顺序有影响吗 ?</p><p>具体问题具体分析，可能会产生影响。如在生产者的生产过程中，如果是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mutex-&gt;<span class="built_in">P</span>(); <span class="comment">// 拿互斥锁，同一时间，只能读 or 写</span></span><br><span class="line">emptyBuffers-&gt;<span class="built_in">P</span>(); <span class="comment">// 从生产者中拿到资源，也就是看生产的数量是不是已经够了</span></span><br></pre></td></tr></table></figure><p>先拿互斥锁，如果此时生产者的数量已经是n个了，emptyBuffers 的信号量为0，生产者的p操作会阻塞主。</p><p>此时消费者再拿互斥锁的时候，拿不到，形成 <strong>死锁</strong>。</p><h3 id="3、信号量实现"><a href="#3、信号量实现" class="headerlink" title="3、信号量实现"></a>3、信号量实现</h3><p>信号量的实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classSemaphore&#123;</span><br><span class="line"><span class="type">int</span> sem; <span class="comment">// 信号量</span></span><br><span class="line">    WaitQueue q; <span class="comment">// 等待队列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Semaphore::<span class="built_in">P</span>()&#123;</span><br><span class="line">    sem--; <span class="comment">// 信号量-- 拿资源</span></span><br><span class="line">    <span class="keyword">if</span> (sem &lt; <span class="number">0</span>) &#123; <span class="comment">// 资源被拿完了 排队等待（阻塞）</span></span><br><span class="line">        Add <span class="keyword">this</span> thread t to q;<span class="built_in">block</span>(p); <span class="comment">// 排队</span></span><br><span class="line">        <span class="built_in">block</span>(p); <span class="comment">// 阻塞</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Semaphore::<span class="built_in">V</span>() &#123;</span><br><span class="line">    sem++; <span class="comment">// 信号量++ 释放资源</span></span><br><span class="line">    <span class="keyword">if</span> (sem&lt;=<span class="number">0</span>) &#123; <span class="comment">// 有程序等待（处于阻塞状态）</span></span><br><span class="line">        Remove a thread t from q; <span class="comment">// 出队</span></span><br><span class="line">        <span class="built_in">wakeup</span>(t); <span class="comment">// 唤醒</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>信号量的双用途<ul><li>互斥和条件同步</li><li>但等待条件是独立的互斥</li></ul></li><li>读&#x2F;开发代码比较困难<ul><li>程序员必须非常精通信号量</li></ul></li><li>容易出错<ul><li>使用的信号量已经被另一个线程占用</li><li>忘记释放信号量</li></ul></li><li>不能够处理死锁问题</li></ol><h3 id="4、管程"><a href="#4、管程" class="headerlink" title="4、管程"></a>4、管程</h3><p>最早是针对语言的并发问题来设计的。</p><p><strong>目的</strong>: 分离互斥和条件同步的关注</p><p><strong>什么是管程</strong>？</p><ul><li>一个锁: 指定临界区</li><li>0或者多个条件变量:等待&#x2F;通知信号量用于管理并发访问共享数据</li></ul><p><strong>一般方法</strong></p><ul><li>收集在对象&#x2F;模块中的相关共享数据</li><li>定义方法来访问共享数据</li></ul><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221212142342550.png" alt="image-20221212142342550"></p><ul><li>Lock锁机制<ol><li>Lock::Acquire ()等待直到锁可用，然后抢占锁 </li><li>Lock::Release ()释放锁，唤醒等待者如果有</li></ol></li><li>Condition Variable条件变量<ul><li>允许等待状态进入临界区<ol><li>允许处于等待 (睡眠) 的线程进入临界区</li><li>某个时刻原子释放锁进入睡眠</li></ol></li><li>Wait () operation<ul><li>释放锁，睡眠，重新获得锁返回后</li></ul></li><li>Signal() operation (or broadcast() operation)<ul><li>唤醒等待者 (或者所有等待者)，如果有</li></ul></li></ul></li></ul><p><strong>实现</strong></p><ul><li>需要维持每个条件队列</li><li>线程等待的条件等待signal ()</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Class Condition &#123; <span class="comment">// 条件变量</span></span><br><span class="line">    <span class="type">int</span> numWaiting = <span class="number">0</span>; <span class="comment">// 等待的个数</span></span><br><span class="line">    WaitQueue q; <span class="comment">// 等待队列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Condition::<span class="built_in">Wait</span>(lock) &#123; <span class="comment">// 等待操作</span></span><br><span class="line">    numWaiting++; <span class="comment">// 等待的个数++</span></span><br><span class="line">    Add <span class="keyword">this</span> thread t to q; <span class="comment">// 加入等待数组</span></span><br><span class="line"><span class="built_in">release</span>(lock); <span class="comment">// 释放锁，释放锁是因为一开始就会获取锁，因为运行资源不够，需要做等待操作，所以先释放资源，让其他线程正常运行</span></span><br><span class="line"><span class="built_in">schedule</span>(); <span class="comment">//need mutex</span></span><br><span class="line"><span class="built_in">require</span>(lock); <span class="comment">// 获取锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Condition::<span class="built_in">Signal</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (numWaiting &gt; <span class="number">0</span>) &#123; <span class="comment">// 有等待的情况</span></span><br><span class="line">        !Remove a thread t from q;</span><br><span class="line">        <span class="built_in">wakeup</span>(t); <span class="comment">//need mutex 唤醒</span></span><br><span class="line">        numWaiting-;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者、消费者模型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**管程的定义</span></span><br><span class="line"><span class="comment">* 一个锁：表示只有一个线程</span></span><br><span class="line"><span class="comment">* 若干个条件变量：表示情况</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">classBoundedBuffer &#123;</span><br><span class="line">    Lock lock:</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>:</span><br><span class="line">Condition notFull, notEmpty:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BoundedBuffer::<span class="built_in">Deposit</span>(c) &#123; <span class="comment">// 生产者生产</span></span><br><span class="line">    lock-&gt;<span class="built_in">Acquire</span>(); <span class="comment">// 获取锁 </span></span><br><span class="line"><span class="keyword">while</span> (count == n) &#123; <span class="comment">// 生产者的个数过多</span></span><br><span class="line">        notFull.<span class="built_in">Wait</span>(&amp;lock); <span class="comment">// 等待</span></span><br><span class="line">        Add c to the buffer;</span><br><span class="line">        count++;</span><br><span class="line">        notEmpty.<span class="built_in">Signal</span>(); <span class="comment">// 消费者开始消费</span></span><br><span class="line">        lock-&gt;<span class="built_in">Release</span>(): <span class="comment">// 释放锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BoundedBuffer::<span class="built_in">Remove</span>(c) &#123; <span class="comment">// 消费者消费</span></span><br><span class="line">    lock-&gt;Acquire0);</span><br><span class="line">    <span class="keyword">while</span> (count == <span class="number">0</span>)  <span class="comment">// 没有东西可以消费</span></span><br><span class="line">        notEmpty.<span class="built_in">Wait</span>(&amp;lock); <span class="comment">// 等待</span></span><br><span class="line">    Remove c from buffer;</span><br><span class="line">    count--;</span><br><span class="line">    notFull.<span class="built_in">Signal</span>(); <span class="comment">// 生产者生产</span></span><br><span class="line">    lock-&gt;<span class="built_in">Release</span>(); <span class="comment">// 释放锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>唤醒后该不该继续执行该线程？</p><p>两种方法：</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221212151358276.png" alt="image-20221212151358276"></p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221212151336604.png" alt="image-20221212151336604"></p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221212144539037.png" alt="image-20221212144539037"></p><ul><li>开发&#x2F;调试并行程序很难<ul><li>非确定性的交叉指令</li></ul></li><li>同步结构<ul><li>锁: 互斥</li><li>条件变量: 有条件的同步</li><li>其他原语: 信号量</li><li>怎样有效的使用这些结构?<ul><li>制定并遵循严格的程序设计风格&#x2F;策略</li></ul></li></ul></li></ul><h3 id="5、经典同步问题"><a href="#5、经典同步问题" class="headerlink" title="5、经典同步问题"></a>5、经典同步问题</h3><h4 id="读写者问题"><a href="#读写者问题" class="headerlink" title="读写者问题"></a>读写者问题</h4><p><strong>动机</strong>：共享数据的访问</p><p>两种类型使用者：</p><ul><li>读者:不需要修改数据</li><li>写者: 读取和修改数据</li></ul><p>问题的约束：</p><ul><li>允许同一时间有多个读者，但在任何时候只有一个写者</li><li>当没有写者是读者才能访问数据</li><li>当没有读者和写者时写者才能访问数据</li><li>在任何时候只能有一个线程可以操作共享变量</li></ul><p>多个并发进程的数据集共享</p><ul><li>读者 - 只读数据集;他们不执行任何更新</li><li>写者 - 可以读取和写入</li></ul><p><strong>共享数据</strong></p><ul><li>数据集</li><li>信号量CountMutex初始化为1，对Rcount的互斥</li><li>信号量WriteMutex初始化为1，对写者的互斥</li><li>整数 Rcount 初始化为0，表示读者</li></ul><p><code>信号量</code>实现</p><p>读者优先</p><p>写者</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">sem <span class="title">wait</span><span class="params">( WriteMutex)</span>: // p()操作，获取锁</span></span><br><span class="line"><span class="function">write // 写</span></span><br><span class="line"><span class="function">sem post( WriteMutex): // v()操作，释放锁</span></span><br></pre></td></tr></table></figure><p>读者</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">sem <span class="title">wait</span><span class="params">(CountMutex)</span></span>; <span class="comment">// 防止同时多个读者进入， p() 获取锁</span></span><br><span class="line"><span class="keyword">if</span>(Rcount == <span class="number">0</span>) <span class="comment">// 没有读者</span></span><br><span class="line"><span class="function">sem <span class="title">wait</span> <span class="params">(WriteMutex)</span></span>; <span class="comment">// 获取锁，可能存在写者</span></span><br><span class="line">++Rcount; <span class="comment">// 读者++</span></span><br><span class="line"><span class="function">sem <span class="title">post</span><span class="params">(CountMutex)</span>: // v() 对rcount操作完成，释放锁，让其他读者进入</span></span><br><span class="line"><span class="function">read;</span></span><br><span class="line"><span class="comment">// 读完了</span></span><br><span class="line"><span class="function">sem <span class="title">wait</span><span class="params">(CountMutex)</span>:</span></span><br><span class="line"><span class="function">--Rcount;</span></span><br><span class="line"><span class="keyword">if</span>(Rcount == <span class="number">0</span>) <span class="comment">// 没有读者了</span></span><br><span class="line"><span class="function">sem <span class="title">post</span> <span class="params">(WriteMutex)</span></span>; <span class="comment">// 释放写锁，让可能有的写者能进行写操作</span></span><br><span class="line"><span class="function">sem <span class="title">post</span><span class="params">(CountMutex)</span></span>; <span class="comment">// 释放rcount的锁</span></span><br></pre></td></tr></table></figure><p>基于读者优先策略的方法，只要有一个读者处于活动状态，后来的读者都会被接纳。如果读者源源不断地出现的话，那么写者就始终处于阻塞状态</p><p>基于写者优先策略的方法: 一旦写者就绪，那么写者会尽可能快地执行写操作。如果写者源源不断地出现的话，那么读者就始终处于阻塞状态。(如何实现 ? )</p><p><code>管程</code>实现</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221212160707590.png" alt="image-20221212160707590"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 管程的定义</span></span><br><span class="line">AR = <span class="number">0</span>; <span class="comment">// # of active writers 正在读的读者</span></span><br><span class="line">AW = <span class="number">0</span>; <span class="comment">// # of waiting readers 正在写的写者</span></span><br><span class="line">WR = <span class="number">0</span>; <span class="comment">// # of waiting readers 等待的读者</span></span><br><span class="line">WW = <span class="number">0</span>: <span class="comment">// # of waiting writers 等待的写者</span></span><br><span class="line"></span><br><span class="line">Condition okToRead;Condition okToWrite; <span class="comment">// 两个情况</span></span><br><span class="line">Lock lock; <span class="comment">// 一个锁</span></span><br></pre></td></tr></table></figure><p>读者</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Public <span class="title">Database::Read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Wait until no writers;</span></span><br><span class="line">    <span class="built_in">StartRead</span>();</span><br><span class="line">    read database;</span><br><span class="line">    <span class="comment">//check out - wake upwaiting writers;</span></span><br><span class="line">    <span class="built_in">DoneRead</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Private <span class="title">Database::StartRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.<span class="built_in">Acquire</span>(); <span class="comment">// 获取锁，一个管程只能有一个线程</span></span><br><span class="line"><span class="keyword">while</span> ((AW+WW)&gt; <span class="number">0</span>) &#123; <span class="comment">// 有写者</span></span><br><span class="line">        WR++; <span class="comment">// 等待</span></span><br><span class="line">        okToRead.<span class="built_in">wait</span>(&amp;lock); </span><br><span class="line">WR--;</span><br><span class="line">    &#125;</span><br><span class="line">    AR++; <span class="comment">// 正在读的读者++</span></span><br><span class="line">    lock. <span class="built_in">Release</span>(); <span class="comment">// 释放管程的锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Private <span class="title">Database::DoneRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.<span class="built_in">Acquire</span>();</span><br><span class="line">AR-; <span class="comment">// 正在读的读者--</span></span><br><span class="line">    <span class="keyword">if</span>(AR==<span class="number">0</span> &amp;&amp; WW&gt;<span class="number">0</span>) <span class="comment">// 已经没有读者，并且有等待的写者，唤醒</span></span><br><span class="line">        okToWrite.<span class="built_in">signal</span>();</span><br><span class="line">lock. <span class="built_in">Release</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写者</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Public <span class="title">Database::Write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Wait until no readers/writers;</span></span><br><span class="line">    <span class="function">Start <span class="title">Write</span><span class="params">()</span></span>;</span><br><span class="line">    write database;</span><br><span class="line"><span class="comment">//check out - wake up waitingreaders/writers;</span></span><br><span class="line">    <span class="built_in">DoneWrite</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Private <span class="title">Database::StartWrite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.<span class="built_in">Acquire</span>();</span><br><span class="line">    <span class="keyword">while</span> ((AW+AR)&gt; <span class="number">0</span>) &#123; <span class="comment">// 有正在运行的读者 or 写者</span></span><br><span class="line">        WW++; <span class="comment">// 等待</span></span><br><span class="line">        okToWrite.<span class="built_in">wait</span>(&amp;lock);</span><br><span class="line">        WW-；</span><br><span class="line">    &#125;</span><br><span class="line">    AW++;</span><br><span class="line">    lock.<span class="built_in">Release</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Private <span class="title">Database::DoneWrite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.<span class="built_in">Acquire</span>();</span><br><span class="line">    AW--;</span><br><span class="line"><span class="keyword">if</span>(ww&gt; <span class="number">0</span>) <span class="comment">// 有等待的写者</span></span><br><span class="line">        fokToWrite.<span class="built_in">signal</span>(); <span class="comment">// 唤醒等待的写者</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(WR &gt; <span class="number">0</span>) <span class="comment">// 有等待的读者</span></span><br><span class="line">        okToRead.<span class="built_in">broadcast</span>(); <span class="comment">// 唤醒等待的读者</span></span><br><span class="line">lock.<span class="built_in">Release</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="哲学家就餐问题"><a href="#哲学家就餐问题" class="headerlink" title="哲学家就餐问题"></a>哲学家就餐问题</h4><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221212163821225.png" alt="image-20221212163821225"></p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221212164149047.png" alt="image-20221212164149047"></p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221212164355712.png" alt="image-20221212164355712"></p><p>等待时间确定的话，就存在问题，可能会同时拿上，同时放下。</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221212164631289.png" alt="image-20221212164631289"></p><p>可行，不够完美。不能应对饥饿问题。</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221212164814199.png" alt="image-20221212164814199"></p><p>信号量，同步互斥。</p><p>方案4的缺点：</p><p>它把就餐 (而不是又子) 看成是必须互斥访问的临界资源，因此会造成(又子) 资源的浪费。</p><p>从理论上说，如果有五把叉子，应允许两个不相邻的哲学家同时进餐。</p><p>思路(1)哲学家自己怎么来解决这个问题 ?<br>指导原则: 要么不拿，要么就拿两把叉子。<br>S1 思考中…<br>S2 进入饥饿状态<br>S3 如果左邻居或右邻居正在进餐，等待: 否则转S4<br>S4 拿起两把叉子<br>S5 吃面条…<br>S6 放下左边的叉子:<br>S7 放下右边的叉子:<br>S8 新的循环又开始了，转S1</p><p>思路(2) 计算机程序怎么来解决这个问题 ?<br>指导原则: 不能浪费CPU时间;进程间相互通信<br>S1 思考中…<br>S2 进入饥饿状态<br>S3 如果左邻居或右邻居正在进餐，进程进入阻塞态,否则转S4<br>S4 拿起两把叉子;S4<br>S5 吃面条<br>S6 放下左边的叉子，看看左邻居现在能否进餐(饥饿状态、两把叉子都在)，若能则唤醒<br>S7 放下右边的又子，看看右邻居现在能否进餐(饥饿状态、两把叉子都在)，若能则唤醒<br>S8 新的一天又开始了，转S1</p><p>思路(3) 怎么样来编写程序 ?<br>1.必须有数据结构，来描述每个哲学家的当前状态<br>2.该状态是一个临界资源，各个哲学家对它的访问应该互斥地进行一进程互斥<br>3.一个哲学家吃饱后，可能要唤醒它的左邻右舍，两者之间存在着同步关系一一进程同步:</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221212165715752.png" alt="image-20221212165715752"></p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221212171659903.png" alt="image-20221212171659903"></p><p>eat不用，think需要。think p v 保护一下就行。</p><p>函数take forks的定义</p><p><strong>功能</strong>: 要么拿到两把又子，要么被阻塞起来</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">voidtake <span class="title">forks</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123; <span class="comment">// i的取值: 0到N - 1</span></span><br><span class="line">    <span class="built_in">P</span>(mutex) ; <span class="comment">// 进入临界区</span></span><br><span class="line">    state[i] = HUNGRY; <span class="comment">// 我饿了!</span></span><br><span class="line">    <span class="function">test_take_left right <span class="title">forks</span><span class="params">(i)</span> </span>; <span class="comment">// 试图拿两把叉子</span></span><br><span class="line">    <span class="built_in">V</span>(mutex) ; <span class="comment">// 退出临界区</span></span><br><span class="line">    <span class="built_in">P</span>(s[i]); <span class="comment">// 没有又子便阻塞</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数test_take_left_right forks的定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> test take left right <span class="title">forks</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123; <span class="comment">//i: 0到N-1</span></span><br><span class="line">    <span class="keyword">if</span>(state[i] == HUNGRY &amp;&amp;<span class="comment">// i: 我自己，or 其他人</span></span><br><span class="line">    state[LEFT]!= EATING &amp;&amp;</span><br><span class="line">    state[RIGHT] != EATING) &#123;</span><br><span class="line">        state[i] = EATING; <span class="comment">// 两把叉子到手</span></span><br><span class="line">    <span class="built_in">V</span>(s[i]); <span class="comment">// 通知第i人可以吃饭了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数put_forks的定义</p><p>功能: 把两把又子放回原处，并在需要的时候，去唤醒左邻右舍。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">voidput <span class="title">forks</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123; <span class="comment">// i的取值: 0到N-1</span></span><br><span class="line">    <span class="built_in">P</span>(mutex) ; <span class="comment">// 进入临界区</span></span><br><span class="line">state[i] = THINKING; <span class="comment">// 交出两把叉子</span></span><br><span class="line"><span class="function">test_take_left right <span class="title">forks</span> <span class="params">(LEFT)</span> </span>;<span class="comment">// 看左邻居能否进餐</span></span><br><span class="line">    <span class="function">test_take left right <span class="title">forks</span> <span class="params">(RIGHT)</span> </span>;<span class="comment">// 看右邻居能否进餐</span></span><br><span class="line">    <span class="built_in">V</span>(mutex) ; <span class="comment">// 退出临界区</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十一、死锁"><a href="#十一、死锁" class="headerlink" title="十一、死锁"></a>十一、死锁</h2><h3 id="1、死锁问题"><a href="#1、死锁问题" class="headerlink" title="1、死锁问题"></a>1、死锁问题</h3><p><strong>死锁的概念</strong>：一组阻塞的进程持有一种资源等待获取另一个进程所占有的一个资源。</p><p>例子：</p><ul><li>系统有2个磁带驱动器</li><li>P1 和 P2 各有一个，都需要另外一个</li></ul><p>为什么会出现死锁？</p><p>死锁是因为在多线程的并发执行下，线程抢占资源导致的情况。单一线程不会产生死锁。</p><h3 id="2、系统模型"><a href="#2、系统模型" class="headerlink" title="2、系统模型"></a>2、系统模型</h3><p>资源类型R1，R2，…Rm</p><ul><li>CPU cycles</li><li>memory space</li><li>I&#x2F;0 devices</li></ul><p>每个资源类型 Ri 有 Wi 实例。</p><p>每个进程使用资源如下:</p><ul><li>request&#x2F;get&lt;– free resource</li><li>use&#x2F;hold &lt;– requested&#x2F;used resource</li><li>release &lt;–free resource</li></ul><h4 id="可重复使用的资源"><a href="#可重复使用的资源" class="headerlink" title="可重复使用的资源"></a>可重复使用的资源</h4><ul><li>在一个时间只能一个进程使用且不能被删除</li><li>进程获得资源，后来释放由其他进程重用</li><li>资源的分类：处理器，I &#x2F; 0通道，主和副存储器，设备和数据结构，如文件，数据库和信号量</li><li>如果每个进程拥有一个资源并请求其它资源，死锁可能发生</li></ul><h4 id="使用资源"><a href="#使用资源" class="headerlink" title="使用资源"></a>使用资源</h4><ul><li>创建和销毁</li><li>在I &#x2F; 0缓冲区的中断，信号，消息，信息</li><li>如果接收消息阻塞可能会发生死锁</li><li>可能少见的组合事件会引起死锁</li></ul><h4 id="资源分配图"><a href="#资源分配图" class="headerlink" title="资源分配图"></a>资源分配图</h4><p>一组顶点 V 和边 E 的集合</p><p>V有两种类型：</p><ul><li>P &#x3D; {P1,P2,…,Pn} 集合包括系统中的所有进程。</li><li>R &#x3D; {R1,R2,…,Rn} 集合包括系统中的所有资源类型。</li></ul><p>E的两种类型：</p><ul><li>requesting&#x2F;claiming edge - directed edge Pi –&gt; Rj 进程请求资源</li><li>assignment&#x2F;holding edge - directed edge Ri –&gt; Pj 资源分配给进程</li></ul><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221213175354705.png" alt="image-20221213175354705"></p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221213175402863.png" alt="image-20221213175402863"></p><p>无死锁情况</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221213175420526.png" alt="image-20221213175420526"></p><p>有死锁，形成了一个环。</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221213175447638.png" alt="image-20221213175447638"></p><p>无死锁，形成了一个环。</p><p><strong>总结</strong>：</p><ul><li>如果图中不包含循环&#x3D;&#x3D;&gt;没有死锁。</li><li>如果图中包括循环&#x3D;&#x3D;&gt;<ul><li>如果每个资源类只有一个实例，那么死锁。</li><li>如果每个资源类有几个实例，可能死锁。</li></ul></li></ul><h3 id="3、死锁特征"><a href="#3、死锁特征" class="headerlink" title="3、死锁特征"></a>3、死锁特征</h3><p>死锁可能出现如果四个条件同时成立</p><p>死锁的四个特征，有死锁则一定有以下条件。有以下条件，不一定有死锁。</p><ul><li><strong>互斥</strong>:在一个时间只能有一个进程使用资源</li><li><strong>持有并等待</strong>:进程保持至少一个资源正在等待获取其他进程持有的额外资源</li><li><strong>无抢占</strong>:一个资源只能被进程自愿释放，进程已经完成了它的任务之后。</li><li><strong>循环等待</strong>:存在等待进程集合{PO，P1，…，PN)，PO正在等待P1所占用的资源,P1正在等待P2占用的资源，…,PN-1在等待PN所占用资源。PN正在等待PO所占用的资源。</li></ul><h3 id="4、死锁处理方法"><a href="#4、死锁处理方法" class="headerlink" title="4、死锁处理方法"></a>4、死锁处理方法</h3><ul><li>确保系统永远不会进入死锁状态。</li><li>运行系统进入死锁状态，然后恢复。</li><li>忽略这个问题，假装系统中从来没有发生死锁;用于大多数操作系统包括UNIX。</li></ul><h4 id="4-1、Deadlock-Prevention-死锁预防"><a href="#4-1、Deadlock-Prevention-死锁预防" class="headerlink" title="4.1、Deadlock Prevention 死锁预防"></a>4.1、Deadlock Prevention 死锁预防</h4><p>让死锁不会出现，打破他的四个必要条件。</p><p>限制申请方式</p><ul><li>互斥 - 共享资源不是必须的，必须占用非共享资源。</li><li>占用并等待 - 必须保证当一个进程请求的资源，它不持有任何其他资源。<ul><li>需要进程请求并分配其所有资源，它开始执行之前或允许进程请求资源仅当进程没有资源。</li><li>资源利用率低;可能发生饥饿</li></ul></li><li>无抢占 - <ul><li>如果进程占有某些资源，并请求其它不能被立即分配的资源，则释放当前正占有的资源</li><li>被抢占资源添加到资源列表中</li><li>只有当它能够获得旧的资源以及它请求新的资源，进程可以得到执行</li></ul></li><li>循环等待 - 对所有资源类型进行排序，并要求每个进程按照资源的顺序进行申请。</li></ul><h4 id="4-2、Deadlock-Avoidance-死锁避免"><a href="#4-2、Deadlock-Avoidance-死锁避免" class="headerlink" title="4.2、Deadlock Avoidance 死锁避免"></a>4.2、Deadlock Avoidance 死锁避免</h4><p><strong>需要系统具有一些额外的先验信息提供</strong></p><ul><li>最简单和最有效的模式是要求每个进程声明它可能需要的每个类型资源的<code>最大数目</code></li><li>资源的分配状态是通过限定提供与分配的资源数量，和进程的最大需求。</li><li>死锁避免算法动态检查的资源分配状态，以确保永远不会有一个环形等待状态。</li><li>当一个进程请求可用资源，系统必须判断立即分配是否能使系统处于安全状态。</li><li>系统处于安全状态指: 针对所有进程，存在安全序列。</li><li>序列&lt;P1,P2,…,PN&gt;是<code>安全的</code>: 针对每个Pi，Pi要求的资源能够由当前可用的资源+所有的Pj持有的资源来满足，其中 j &lt; i。<ul><li>如果Pi资源的需求不是立即可用，那么Pi可以等到所有Pj完成。</li><li>当Pi完成后，Pi+1可以得到所需要的资源，执行，返回所分配的资源，并终止。</li><li>用同样的方法， Pi+2, Pi+3 和Pn能获得其所需的资源。</li></ul></li></ul><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221213200256194.png" alt="image-20221213200256194"></p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221213195531208.png" alt="image-20221213195531208"></p><h5 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h5><p>通用的死锁避免算法：<strong>银行家算法</strong></p><p>银行家算法 (Banker’s Algorithm)是一个死锁避免的著名算法，是由艾兹格·迪杰斯特拉在1965年为T.H.E系统设计的一种避免死锁产生的算法。它以银行借贷系统的分配策略为基础，判断并保证系统的安全运行。</p><p>背景<br>在银行系统中，客户完成项目需要申请贷款的数量是有限的，每个客户在第一次申请贷款时要声明完成该项目所需的最大资金量，在满足所有贷款要求并完成项目时，客户应及时归还。银行家在客户申请的贷款数量不超过自己拥有的最大值时，都应尽量满足客户的需要。在这样的描述中，银行家就好比操作系统，资金就是资源，客户就相当于要请资源的进程。</p><p>Banker’s Algorithm 前提条件：</p><ul><li>多个实例。</li><li>每个进程都必须能最大限度地利用资源。</li><li>当一个进程请求一个资源，就不得不等待。</li><li>当一个进程获得所有的资源就必须在一段有限的时间释放它们。</li></ul><p>基于上述前提条件，银行家算法通过尝试寻找允许每个进程获得的最大资源并结束 (把资源返还给系统)的进程请求的一个理想执行时序，来决定一个状态是否是安全的。不存在这满足要求的执行时序的状态都是不安全的。</p><p><strong>银行家算法数据结构</strong><br>n &#x3D; 进程数量，m &#x3D; 资源类型数量</p><ul><li>Max(总需求量): n * m 矩阵.。如果 Max [i,j] &#x3D; k，表示进程Pi最多请求资源类型Rj的k个实例。</li><li>Available (剩余空闲量) :长度为 m 的向量。如果Available [j]&#x3D; k.有 k 个类型 Rj 的资源实例可用。</li><li>Allocation (已分配量) : n * m矩阵。如果Allocation[i，j] &#x3D; k，则Pi当前分配了k个Rj的实例。</li><li>Need (未来需要量) : n * m矩阵。如果 Need[i，j] &#x3D; k，则Pi可能需少k个Rj实例完成任务。<br>          <code>Need [i,j] = Max[i,j] - Allocation [i,j]</code></li></ul><ol><li><p>Work 和 Finish 分别是长度为m和n的向量。<br>初始化:<br>Work &#x3D; Available &#x2F;&#x2F;当前资源剩余空闲量<br>Finish [i] &#x3D; false for i - 1,2,…, n.  &#x2F;&#x2F;线程i没结束</p></li><li><p>找这样的i: &#x2F;&#x2F;接下来找出Need比Work小的进程i<br>(a) Finish [i] &#x3D; false<br>(b) Needi &lt;&#x3D; Work</p></li></ol><p>没有找到这样的i，转4。</p><ol start="3"><li>Work &#x3D; Work + Allocation; &#x2F;&#x2F;进程i的资源需求量小于当前剩余空闲资源量</li></ol><p>  Finish[i] &#x3D; true            所以配置给它再回收<br>  转2.</p><ol start="4"><li>If Finish [i] &#x3D;&#x3D; true for all i, &#x2F;&#x2F;所有进程的Finish为True</li></ol><p>  then the system is in a safe state. 表明系统处于安全状态</p><p>Banker’s Algorithm</p><p>initial: Request &#x3D; request vector for process Pi. if Requesti[j]&#x3D; k then process Pi wants k instances of resource type Rj.</p><p>While:</p><ol><li><p>如果 Requesti &lt;&#x3D; Needi，转到步骤 2。  否则，提出错误条件，因为进程已经超过了其最大要求。</p></li><li><p>如果 Requesti &lt;&#x3D; Available，转到步骤3 否则 pi 必须等待，因为资源不可用。</p></li><li><p>假装给Pi分配它需要的资源: &#x2F;&#x2F;生成一个需要判断状态是否安全的资源分配环境<br>Available &#x3D; Available - Requesti</p><p>Allocationi &#x3D; Allocationi + Requesti</p><p>Needi &#x3D; Needi - Requesti</p></li></ol><p>CALL Safety State Estimating Algorithm</p><ul><li>如果返回safe，将资源分配给Pi。</li><li>如果返回unsafe,Pi必须等待,旧的资源分配状态被恢复</li></ul><h4 id="4-3、Deadlock-Detection-死锁检测"><a href="#4-3、Deadlock-Detection-死锁检测" class="headerlink" title="4.3、Deadlock Detection 死锁检测"></a>4.3、Deadlock Detection 死锁检测</h4><ul><li>允许系统进入死锁状态</li><li>死锁检测算法</li><li>恢复机制</li></ul><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221213210924539.png" alt="image-20221213210924539"></p><p>资源类型的几个实例</p><p>数据结构<br>Available:长度为M的向量表示每种类型可用资源的数量<br>Allocation:一个n<em>m阵定义了当前分配给各个进程每种类型资源的数量。如果 Allocation[i ，j] &#x3D; k，进程Pi 拥有 资源Ri的k个实例。<br>Request:一个n</em>m矩阵表示各进程的当前请求.。 如果Request [i ，j] &#x3D; k,表示进程Pi 请求k 个资源Rj的实例。</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221213211327578.png" alt="image-20221213211327578"></p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221213211625435.png" alt="image-20221213211625435"></p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221213211716498.png" alt="image-20221213211716498"></p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221213211816748.png" alt="image-20221213211816748"></p><p>检测算法使用<br>何时、使用什么样的频率来检测依赖于</p><ul><li>死锁多久可能会发生?</li><li>多少进程需要被回滚?</li></ul><p>one for each disjoint cycle<br>如果检测算法多次被调用，有可能是资源图有多个循环，所以我们无法分辨出多个可能死锁进程中的哪些“造成”死锁。</p><h4 id="4-4、Recovery-from-Deadlock-死锁恢复"><a href="#4-4、Recovery-from-Deadlock-死锁恢复" class="headerlink" title="4.4、Recovery from Deadlock 死锁恢复"></a>4.4、Recovery from Deadlock 死锁恢复</h4><ul><li>终止所有的死锁进程</li><li>在一个时间内终止一个进程直到死锁消除</li><li>终止进程的顺序应该是<ul><li>进程的优先级</li><li>进程运行了多久以及需要多少时间才能完成</li><li>进程占用的资源</li><li>进程完成需要的资源</li><li>多少进程需要被终止</li><li>进程是交互还是批处理</li></ul></li></ul><p>特点：</p><ul><li>选择一个受害者 - 最小的成本</li><li>回滚- 返回到一些安全状态，重启进程到安全状态</li><li>饥饿 -同一进程可能一直被选作受害者，包括回滚的数量。</li></ul><h2 id="十二、进程间通信"><a href="#十二、进程间通信" class="headerlink" title="十二、进程间通信"></a>十二、进程间通信</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><h4 id="通信模型"><a href="#通信模型" class="headerlink" title="通信模型"></a>通信模型</h4><p>IPC ：进程间通信（<strong>确保进程间能够进行数据传输</strong>）</p><ul><li>进程通信的机制及同步</li><li>不使用共享变量的进程通信</li><li>IPC facility 提供2个操作<ul><li>send(message) -消息大小固定或者可变</li><li>receive(message)</li></ul></li><li>如果P 和  Q 想通信，需要<ul><li>在它们之间建立通信链路</li><li>通过 send&#x2F;receive交换消息</li></ul></li><li>通信链路的实现<ul><li>物理《例如，共享内存，硬件总线)</li><li>逻辑(例如，逻辑属性)</li></ul></li></ul><h4 id="直接及间接通信"><a href="#直接及间接通信" class="headerlink" title="直接及间接通信"></a>直接及间接通信</h4><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221213212812177.png" alt="image-20221213212812177"></p><p>A 间接通信，通过操作系统内核</p><p>B 直接通信</p><p><strong>直接通信</strong></p><p>进程必须正确的命名对方</p><ul><li>send (P发送信息到进程Pmessage)</li><li>receive(Q message)- 从进程 Q接受消息</li></ul><p>通信链路的属性：</p><ul><li>自动建立链路</li><li>一条链路恰好对应一对通信进程</li><li>每对进程之间只有一个链接存在</li><li>链接可以是单向的，但通常为双向的</li></ul><p><strong>间接通信</strong></p><p>定向从消息队列接收消息</p><ul><li>每个消息队列都有一个唯一的ID</li><li>只有它们共享了一个消息队列，进程才能够通信</li></ul><p>通信链路的属性：</p><ul><li>只有进程共享一个共同的消息队列，才建立链路</li><li>链接可以与许多进程相关联</li><li>每对进程可以共享多个通信链路</li><li>连接可以是单向或双向</li></ul><p>操作：</p><ul><li>创建一个新的消息队列</li><li>通过消息队列发送和接收消息</li><li>销毁消息队列</li></ul><p>原语的定义如下</p><ul><li>send(A,message)发送消息到队列A</li><li>receive(A,message)从队列 A接受消息</li></ul><h4 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h4><p>另一种分类：阻塞非阻塞</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221213213606346.png" alt="image-20221213213606346"></p><h4 id="通信链路缓冲"><a href="#通信链路缓冲" class="headerlink" title="通信链路缓冲"></a>通信链路缓冲</h4><p>队列的消息被附加到链路，可以是以下3种方式之一:参考buffer</p><ol><li><p>0 容量 - 0 messages<br>发送方必须等待接收方(rendezvous)</p></li><li><p>有限容量 -n messages的有限长度</p><p>发送方必须等待，如果队列满</p></li><li><p>无限容量 - 无限长度<br>发送方不需要等待</p></li></ol><h3 id="2、信号"><a href="#2、信号" class="headerlink" title="2、信号"></a>2、信号</h3><p>Signal (信号)</p><ul><li>软件中断通知事件处理</li><li>Examples: SIGFPE， SIGKILL，SIGUSR1， SIGSTOP， SIGCONT</li></ul><p>接收到信号时会发生什么？</p><ul><li>Catch:指定信号处理函数被调用</li><li>Ignore:依靠操作系统的默认操作<ul><li>Example: Abort, memory dump, suspend or resume process</li></ul></li><li>Mask:闭塞信号因此不会传送<ul><li>可能是暂时的(当处理同样类型的信号)</li></ul></li><li>不足<br>不能传输要交换的任何数据，因为信号只有1 byte 的大小，一般就用来发送通知。</li></ul><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221213214733119.png" alt="image-20221213214733119"></p><p>针对每一个信号都有自己的处理器handler，处理器就是信号函数。当收到信号时，系统调用先把当前运行的堆栈段移至信号函数，即让信号函数开始执行，执行之后再返回原有的操作执行。（相当于中断）</p><h3 id="3、管道"><a href="#3、管道" class="headerlink" title="3、管道"></a>3、管道</h3><p>子进程从父进程继承文件描述符(<code>父进程建立管道，来让子进程之间进行通信</code>)</p><ul><li>file descriptor 0 stdin, 1 stdout, 2 stderr</li></ul><p>进程不知道 (或不关心!) 从键盘，文件，程序读取或写入到终端，文件，程序。<br>% ls l more<img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221213215610324.png" alt="image-20221213215610324"></p><p>|就是管道 两个线程ls more 共享管道中的数据 ,ls 输出到管道 buffer 上， more 从管道输入。</p><p>shell:</p><ul><li>创建管道</li><li>为 ls 创建一个进程 ，设置 stdout为 管道写端</li><li>为 more 创建一个进程，设置 stdin 为管道读端</li></ul><h3 id="4、消息队列"><a href="#4、消息队列" class="headerlink" title="4、消息队列"></a>4、消息队列</h3><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221213220033690.png" alt="image-20221213220033690"></p><h3 id="5、共享内存"><a href="#5、共享内存" class="headerlink" title="5、共享内存"></a>5、共享内存</h3><p>前边的管道、消息队列都是一种间接通信的方式，共享内存是一种直接通信的方式。</p><p>共享内存，一个写了之后，一个可以直接看到。</p><p>进程</p><ul><li>每个进程都有私有地址空间</li><li>在每个地址空间内，明确地设置了共享内存段</li></ul><p>优点</p><ul><li>快速、方便地共享数据</li></ul><p>不足</p><ul><li>必须同步数据访问，存在同步互斥的问题。</li></ul><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221213220407035.png" alt="image-20221213220407035"></p><ul><li>最快的方法</li><li>一个进程写另外一个进程立即可见没有系统调用干预</li><li>没有数据复制</li><li>不提供同步<ul><li>由程序员提供同步</li></ul></li></ul><p>如何实现两个进程共享一块内存？</p><p>把同一块物理内存，映射到不同的进程相同或者不同的地址空间。通过虚地址访问内存，其实就访问的是同一块物理内存。</p><h2 id="十三、文件"><a href="#十三、文件" class="headerlink" title="十三、文件"></a>十三、文件</h2><h3 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h3><h4 id="1-1、文件系统和文件"><a href="#1-1、文件系统和文件" class="headerlink" title="1.1、文件系统和文件"></a>1.1、文件系统和文件</h4><p><strong>文件系统</strong>: 一种用于持久性存储的系统抽象</p><ul><li>在存储器上: 组织、控制、导航、访问和检索数据</li><li>大多数计算机系统包含文件系统</li><li>个人电脑、服务器、笔记本电脑</li><li>iPod、Tivo &#x2F;机顶盒、</li><li>手机&#x2F;掌上电脑 </li><li>Google 可能是由一个文件系统构成的</li></ul><p><strong>文件</strong>: 文件系统中一个单元的相关数据在操作系统中的抽象</p><p><strong>文件系统的功能</strong>：</p><ul><li>分配文件磁盘空间<ul><li>管理文件块 (哪一块属于哪一个文件)</li><li>管理空闲空间(哪一块是空闲的)</li><li>分配算法 (策略)</li></ul></li><li>管理文件集合<ul><li>定位文件及其内容</li><li>命名: 通过名字找到文件的接口</li><li>最常见:分层文件系统</li><li>文件系统类型(组织文件的不同方式)</li></ul></li><li>提供的便利及特征<ul><li>保护: 分层来保护数据安全</li><li>可靠性&#x2F;持久性: 保持文件的持久即使发生崩溃、媒体错误、攻击等</li></ul></li></ul><p>文件属性：</p><p>名称、类型、位置、大小、保护、创建者、创建时间、最近修改时间、</p><p>文件头：</p><ul><li>在存储元数据中保存了每个文件的信息</li><li>保存文件的属性</li><li>跟踪哪一块存储块属于逻辑上文件结构的哪个偏移</li></ul><h4 id="1-2、文件描述符"><a href="#1-2、文件描述符" class="headerlink" title="1.2、文件描述符"></a>1.2、文件描述符</h4><p>需要元数据数据来管理打开文件：</p><ul><li>文件指针:指向最近的一次读写位置，每个打开了这个文件的进程都这个指针</li><li>文件打开计数: 记录文件打开的次数 - 当最后一个进程关闭了文件时，允许将其从打开文件表中移除</li><li>文件磁盘位置: 缓存数据访问信息</li><li>访问权限: 每个程序访问模式信息</li></ul><p>用户视图</p><ul><li>持久的数据结构</li></ul><p>系统访问接口</p><ul><li>字节的集合(UNIX)</li><li>系统不会关心你想存储在磁盘上的任何的数据结构!</li></ul><p>操作系统内部视角</p><ul><li>块的集合(块是逻辑转换单元，而扇区是物理转换单元)</li><li>块大小&lt;&gt; 扇区大小;在UNIX中，块的大小是 4 KB</li></ul><p>当用户说: 给我2-12字节空间时会发生什么?</p><ul><li>获取字节所在的块</li><li>返回块内对应部分</li></ul><p>如果说要写2-12字节呢?</p><ul><li>获取块</li><li>修改块内对应部分</li><li>写回块</li></ul><p>在文件系统中的所有操作都是在整个块空间上进行的</p><ul><li>举个例子，getc()，putc() : 即使每次只访问1字节的数据，也会缓存目标数据4096字节</li></ul><p>用户怎么访问文件</p><ul><li><p>在系统层面需要知道用户的访问模式</p></li><li><p>顺序访问: 按字节依次读取</p><ul><li>几乎所有的访问都是这种方式</li></ul></li><li><p>随机访问: 从中间读写</p><ul><li><p>不常用，但是仍然重要.例如，虚拟内存支持文件: 内存页存储在文件中</p></li><li><p>更加快速 - 不希望获取文件中间的内容的时候也必须先获取块内所有字节</p></li></ul></li><li><p>基于内容访问: 通过特征</p><ul><li>许多系统不提供此种访问方式，相反，数据库是建立在索引内容的磁盘访问上(需要高效的随机访问)</li></ul></li></ul><p>类似于数据库的访问模式<img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214163740751.png" alt="image-20221214163740751"></p><p>文件内部结构</p><ul><li>无结构<ul><li>单词、比特的队列</li></ul></li><li>简单记录结构<ul><li>列</li><li>固定长度</li><li>可变长度</li></ul></li><li>复杂结构<ul><li>格式化的文档(如，MS Word，PDF)</li><li>可执行文件</li></ul></li></ul><p>多用户系统中的文件共享是很必要的</p><p>访问控制</p><ul><li>谁能够获得哪些文件的哪些访问权限</li><li>访问模式: 读、写、执行、删除、列举等</li></ul><p>文件访问控制列表(ACL)</p><ul><li>&lt;文件实体，权限&gt;</li></ul><p>Unix 模式</p><ul><li>&lt;用户|组|所有人，读|写|可执行&gt;</li><li>用户ID识别用户，表明每个用户所允许的权限及保护模式组ID</li><li>允许用户组成组，并指定了组访问权限</li></ul><p>指定多用户&#x2F;客户如何同时访问共享文件</p><ul><li>和过程同步算法相似</li><li>因磁盘I&#x2F;0和网络延迟而设计简单</li></ul><p>Unix 文件系统(UFS) 语义</p><ul><li>对打开文件的写入内容立即对其他打开同一文件的其他用户可见</li><li>共享文件指针允许多用户同时读取和写入文件</li></ul><p>会话语义</p><ul><li>写入内容只有当文件关闭时可见</li></ul><p>锁</p><ul><li>一些操作系统和文件系统提供该功能</li></ul><h4 id="1-3、目录"><a href="#1-3、目录" class="headerlink" title="1.3、目录"></a>1.3、目录</h4><p>文件以目录的方式组织起来</p><p>目录是一类特殊的文件</p><ul><li>每个目录都包含了一张表&lt;name， pointer to file header&gt;</li></ul><p>目录和文件的树型结构</p><ul><li>早期的文件系统是扁平的 (只有一层目录)</li><li>层次名称空间 树状</li></ul><p>目录的典型操作：</p><ul><li>搜索文件</li><li>创建文件</li><li>删除文件</li><li>枚举目录</li><li>重命名文件</li><li>在文件系统中遍历一个路径</li></ul><p>操作系统应该只允许内核模式修改目录</p><ul><li>确保映射的完整性</li><li>应用程序能够读目录 (如 ls)</li></ul><p>目录如何存储完成：</p><ul><li><p>文件名的线性列表，包涵了指向数据块的指针（数组、链表）</p><ul><li><p>编程简单</p></li><li><p>执行耗时</p></li></ul></li><li><p>Hash表- hash数据结构的线性表</p><ul><li>减少目录搜索时间</li><li>碰撞两个文件名的hash值相同I</li><li>固定大小</li></ul></li></ul><p>路径的遍历：（比较耗费时间）</p><ul><li><p>名字解析: 逻辑名字转换成物理资源 (如文件)的过程</p><ul><li><p>在文件系统中: 到实际文件的文件名 (路径)</p></li><li><p>遍历文件目录直到找到目标文件</p></li></ul></li><li><p>举例:解析“&#x2F;bin&#x2F;ls”</p><ul><li>读取root的文件头 (在磁盘固定位置)读取root的数据块; 搜索“bin”项</li><li>读取bin的文件头</li><li>读取bin的数据块: 搜索“ls”项</li><li>读取ls的文件头</li></ul></li><li><p>当前工作目录</p><ul><li>每个进程都会指向一个文件目录用于解析文件名</li><li>允许用户指定相对路径来代替绝对路径</li></ul></li></ul><p><strong>挂载</strong> 把一个文件系统挂载到一个目录上去</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214165525795.png" alt="image-20221214165525795"></p><p>挂载点是特殊的文件，一般是根</p><h4 id="1-4、文件别名"><a href="#1-4、文件别名" class="headerlink" title="1.4、文件别名"></a>1.4、文件别名</h4><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214165608627.png" alt="image-20221214165608627"></p><p>如果删除一个有别名的文件会如何呢 ?</p><ul><li>软链接的话会形成悬空指针</li><li>硬链接的话会让引用值–</li></ul><p>Backpointers 方案</p><ul><li>每个文件有一个包含多个 backpointers 的列表，所以删除所有的 backpointers</li><li>Backpointers使用菊花链管理</li></ul><p>添加一个间接层: 目录项数据结构链接 </p><ul><li>已存在文件的另外一个名字 (指针)链接处理 </li><li>跟随指针来定位文件</li></ul><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214170047129.png" alt="image-20221214170047129"></p><h4 id="1-5、文件系统种类"><a href="#1-5、文件系统种类" class="headerlink" title="1.5、文件系统种类"></a>1.5、文件系统种类</h4><p>磁盘文件系统</p><ul><li>文件存储在数据存储设备上，如磁盘</li><li>例如: FAT，NTFS，ext2&#x2F;3，IS09660，等</li></ul><p>数据库文件系统</p><ul><li>文件根据其特征是可被寻址 (辨识)的</li><li>例如: WinFS</li></ul><p>日志文件系统</p><ul><li>记录文件系统的修改&#x2F;事件</li><li>例如: journaling file system</li></ul><p>网络&#x2F;分布式文件系统</p><ul><li>例如: NFS，SMB，AFS， GFS</li></ul><p>特殊&#x2F;虚拟文件系统</p><p>关于分布式文件系统的补充：</p><ul><li>文件可以通过网络被共享<ul><li>文件位于远程服务器</li><li>客户端远程挂载服务器文件系统</li><li>标准系统文件访问被转换成远程访问</li><li>标准文件共享协议: NFS for Unix，CIFS for Windows</li></ul></li><li>分布式文件系统的问题<ul><li>客户端和客户端上的用户辨别起来很复杂</li><li>例如，NFS是不安全的</li><li>一致性问题</li><li>错误处理模式</li></ul></li></ul><h3 id="2、虚拟文件系统"><a href="#2、虚拟文件系统" class="headerlink" title="2、虚拟文件系统"></a>2、虚拟文件系统</h3><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214173543640.png" alt="image-20221214173543640"></p><p><strong>目的</strong> ：对所有不同文件系统的抽象<br><strong>功能</strong> ：</p><ul><li>提供相同的文件和文件系统接口</li><li>管理所有文件和文件系统关联的数据结构</li><li>高效查询例程，遍历文件系统</li><li>与特定文件系统模块的交互</li></ul><p>文件系统数据结构</p><ul><li>卷控制块 (每个文件系统一个)</li><li>文件控制块 (每个文件一个)</li><li>目录节点(每个目录项一个)</li></ul><p>持续存储在二级存储中</p><ul><li>在分配在存储设备中的数据块中</li></ul><p>当需要时加载进内存</p><ul><li>卷控制模块 : 当文件系统挂载时进入内存</li><li>文件控制块: 当文件被访问时进入每次</li><li>目录节点: 在遍历一个文件路径时进入内存</li></ul><p>卷控制块 (Unix: “superblock”)</p><ul><li>每个文件系统一个</li><li>文件系统详细信息</li><li>块、块大小、空余块、计数&#x2F;指针等</li></ul><p>文件控制块(Unix:“vnode”or “inode”)</p><ul><li>每个文件一个</li><li>文件详细信息</li><li>许可、拥有者、大小、数据库位置等</li></ul><p>目录节点(Linux:“dentry”)</p><ul><li>每个目录项一个(目录和文件)</li><li>将目录项数据结构及树型布局编码成树型数据结构</li><li>指向文件控制块、父节点、项目列表等</li></ul><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214174157737.png" alt="image-20221214174157737"></p><p>暗黄色 vol: 卷控制信息</p><p>蓝色 dir : 目录节点信息</p><p>黄色 file : 文件节点信息</p><h3 id="3、数据块缓存"><a href="#3、数据块缓存" class="headerlink" title="3、数据块缓存"></a>3、数据块缓存</h3><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214202237289.png" alt="image-20221214202237289"></p><p>数据块按需读入内存</p><ul><li>提供read() 操作</li><li>预读: 预选读取后面的数据块</li></ul><p>数据块使用后被缓存</p><ul><li>假设数据将会再次被使用</li><li>写操作可能被缓存和延迟写入</li></ul><p>两种数据块缓存方式</p><ul><li>普通缓冲区缓存</li><li>页缓存: 统一缓存数据块和内存页</li></ul><p>分页要求：当需要一个页时才将其载入内存<br>支持存储：一个页 (在虚拟地址空间中) 可以被映射到一个本地文件中 (在二级存储中)</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214202326356.png" alt="image-20221214202326356"></p><p>文件数据块的页缓存</p><ul><li>在虚拟内存中文件数据块被映射成页</li><li>文件的读&#x2F;写操作被转换成对内存的访问</li><li>可能导致缺页和&#x2F;或设置为脏页</li><li>问题:页置换- 从进程或文件页缓存中?</li></ul><h3 id="4、打开文件的数据结构"><a href="#4、打开文件的数据结构" class="headerlink" title="4、打开文件的数据结构"></a>4、打开文件的数据结构</h3><p>打开文件描述</p><ul><li>每个被打开的文件一个</li><li>文件状态信息</li><li>目录项、当前文件指针、文件操作设置等</li></ul><p>打开文件表</p><ul><li>一个进程一个</li><li>一个系统级的</li><li>每个卷控制块也会保存一个列表</li><li>所以如果有文件被打开将不能被卸载</li></ul><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214202716488.png" alt="image-20221214202716488"></p><p>一些操作系统和文件系统提供该</p><p>功能调节对文件的访问</p><p>强制和劝告</p><ul><li>强制 - 根据锁保持情况和需求拒绝访问</li><li>劝告- 进程可以查找锁的状态来决定怎么做</li></ul><h3 id="5、文件分配"><a href="#5、文件分配" class="headerlink" title="5、文件分配"></a>5、文件分配</h3><p>大多数文件都很小</p><ul><li>需要对小文件提供强力的支持</li><li>块空间不能太大</li></ul><p>一些文件非常大</p><ul><li>必须支持大文件 (64-bit 文件偏移)</li><li>大文件访问需要相当高效</li></ul><p>如何为一个文件分配数据块</p><p>分配方式</p><ul><li>连续分配</li><li>链式分配</li><li>索引分配</li></ul><p>指标</p><ul><li>高效: 如存储利用(外部碎片)</li><li>表现: 如访问速度</li></ul><h4 id="文件分配方式"><a href="#文件分配方式" class="headerlink" title="文件分配方式"></a>文件分配方式</h4><p>连续分配：</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214203817759.png" alt="image-20221214203817759"></p><p>链式存储：</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214204637617.png" alt="image-20221214204637617"></p><p>索引存储：</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214204842162.png" alt="image-20221214204842162"></p><p>应对大文件，一个索引不够的情况下：</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214205116917.png" alt="image-20221214205116917"></p><p>多级索引</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214205416391.png" alt="image-20221214205416391"></p><p>文件头包含13个指针</p><ul><li>10 个指针指向数据块</li><li>第11个指针指向间接数据块</li><li>第12个指针指向二重间接数据块</li><li>第13个指针指向三重间接数据块</li></ul><p>影响</p><ul><li>提高了文件大小限制阀值</li><li>动态分配数据块，文件扩展很容易</li><li>小文件开销小</li><li>只为大文件分配间接数据块，大文件在访问间接数据块是需要大量的查询</li></ul><h3 id="6、空闲空间列表"><a href="#6、空闲空间列表" class="headerlink" title="6、空闲空间列表"></a>6、空闲空间列表</h3><p>跟踪在存储中的所有未分配的数据块</p><p>空闲空间列表存储在哪里?</p><p>空闲空间列表的最佳数据结构是什么样的 ?</p><hr><p>用位图代表空闲数据块列表</p><ul><li>10101011101111..</li><li>如果i &#x3D; 0 表明数据块(扇区)i是空闲，反之则已分配</li></ul><p>使用简单但是可能会是一个big vector:</p><ul><li>160 GB disk -&gt; 40 M blocks -&gt; 5 MB worth of bits</li><li>然而，如果空闲空间在磁盘中均匀分布，那么在找到“0”之前需要扫描n&#x2F;r<ul><li>n &#x3D; 磁盘上数据块的总数</li><li>r &#x3D; 空闲块的数目</li></ul></li></ul><p>需要保护</p><ul><li>指向空闲列表的指针</li><li>位图<ul><li>必须保存在磁盘上</li><li>在内存和磁盘拷贝可能有所不同</li><li>不允许block[i]在内存中的状态为bit[i] &#x3D; 1而在磁盘中bit[i] &#x3D; 0</li></ul></li><li>解决:<ul><li>在磁盘上设置bit[i] &#x3D; 1</li><li>分配block[i]</li><li>在内存中设置bit[i] &#x3D; 1</li></ul></li></ul><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214210259270.png" alt="image-20221214210259270"></p><h3 id="7、多磁盘管理-RAID"><a href="#7、多磁盘管理-RAID" class="headerlink" title="7、多磁盘管理 - RAID"></a>7、多磁盘管理 - RAID</h3><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214210919500.png" alt="image-20221214210919500"></p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214211018943.png" alt="image-20221214211018943"></p><p>使用多个并行磁盘来增加</p><ul><li>吞吐量(通过并行)</li><li>可靠性和可用性 (通过几余)</li></ul><p>RAID - 元余磁盘阵列</p><ul><li>各种磁盘管理技术</li><li>RAID levels: 不同RAID 分类(如，RAID-0，RAID-1，RAID-5)</li></ul><p>实现</p><ul><li>在操作系统内核: 存储&#x2F;卷管理</li><li>RAID硬件控制器(I&#x2F;0)</li></ul><p>RAID 0:文件储存在多个盘上，可以并发请求，提高效率。</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214211310336.png" alt="image-20221214211310336"></p><p>RAID 1：相同的数据写在多个盘上，加强可靠性。一个盘坏了，另一个接着用。</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214211456896.png" alt="image-20221214211456896"></p><p>RAID 4：结合RAID 0 和 RAID 1 的优点，实现分盘存储和可靠存储，加一个校验盘。通过校验盘来推出坏了的盘的数据，其他的盘正常的分盘存储。</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214211618510.png" alt="image-20221214211618510"></p><p>RAID 5：在RAID 4 的基础上，把奇偶校验做一个修改，让奇偶校验均匀的分配在其他的盘上。</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214211727662.png" alt="image-20221214211727662"></p><h3 id="8、磁盘调度"><a href="#8、磁盘调度" class="headerlink" title="8、磁盘调度"></a>8、磁盘调度</h3><p>磁盘结构</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214212534375.png" alt="image-20221214212534375"></p><p>读取或写入时，磁头必须被定位在期望的磁道，并从所期望的扇区的开始</p><p>寻道时间：定位到期望的磁道所花费的时间</p><p>旋转延迟：从扇区的开始处到到达目的处花费的时间</p><p>平均旋转延迟时间 &#x3D; 磁盘旋转一周时间的一半</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214212952591.png" alt="image-20221214212952591"></p><ul><li><p>寻道时间是性能上区别的原因</p></li><li><p>对单个磁盘，会有一个I&#x2F;0请求数目</p></li><li><p>如果请求是随机的，那么会表现很差</p></li></ul><p>寻道时间是比较长的，开销过大。</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214214015096.png" alt="image-20221214214015096"></p><p>FIFO</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214214126578.png" alt="image-20221214214126578"></p><p>存在的问题：一前一后，开销过大</p><p>最短服务优先 SSTF</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214214212603.png" alt="image-20221214214212603"></p><p>存在的问题：可能只负责最近的，导致饥饿现象</p><p>SCAN</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214214441631.png" alt="image-20221214214441631"></p><p>C-SCAN 单方向</p><p><img src="/../images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221214214543986.png" alt="image-20221214214543986"></p><p>在SSTF、SCAN及CSCAN几种调度算法中，都可能出现磁臂停留在某处不动的情况，例如进程反复请求对某一磁道的I&#x2F;0操作。 我们把这一现象称为“磁臂粘着”(arm stickiness)。</p><p>N-Step-SCAN算法是将磁盘请求队列分成若干个长度为N的子队列，磁盘调度将按FCFS算法依次处理这些子队列。 而每处理一个队列时又是按SCAN算法，对一个队列处理完后，再处理其他队列。</p><p>当正在处理某子队列时，如果又出现新的磁盘I&#x2F;0请求，便将新请求进程放入其他队列，这样就可避免出现粘着现象。</p><p>FSCAN算法实质上是N步SCAN算法的简化，即FSCAN只将磁盘请求队列分成两个子队列。</p><p>一个是由当前所有请求磁盘I&#x2F;0的进程形成的队列，由磁盘调度按SCAN算法进行处理。在处理某队列期间，将新出现的所有请求磁盘I&#x2F;0的进程放入另一个等待处理的请求队列。这样，所有的新请求都将被推迟到下一次扫描时处理。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2022/11/20/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/"/>
      <url>/2022/11/20/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/</url>
      
        <content type="html"><![CDATA[<h1 id="计网简要"><a href="#计网简要" class="headerlink" title="计网简要"></a>计网简要</h1><blockquote><p>重点：</p><ul><li>数据链路层</li><li>网络层</li><li>运输层</li></ul><p>次重点：</p><ul><li>物理层</li><li>应用层</li></ul><p>了解：</p><ul><li>概论</li><li>网络安全</li></ul></blockquote><h2 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h2><h3 id="1、因特网概述"><a href="#1、因特网概述" class="headerlink" title="1、因特网概述"></a>1、因特网概述</h3><h4 id="网络的网络"><a href="#网络的网络" class="headerlink" title="网络的网络"></a>网络的网络</h4><p>网络：网络（Network）由若干<strong>结点（Node）</strong>和连接这些结点的<strong>链路（Link）</strong>组成。<img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221127212053444.png" alt="image-20221127212053444"></p><p>互连网（互联网）：多个网络通过路由器互连起来，这样就构成了一个覆盖范围更大的网络，即互连网（互联网）。因此，互联网又称为“网络的网络（Network of Networks）”。<img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221127212107995.png" alt="image-20221127212107995"></p><p>因特网：因特网（Internet）是世界上最大的互连网络（用户数以亿计，互连的网络数以百万计）。<img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221127212123545.png" alt="image-20221127212123545"></p><p><strong>internet与Internet的区别</strong></p><ul><li><p><strong>internet(互联网或互连网)<strong>是一个通用名词，它泛指</strong>多个计算机网络互连而成的网络</strong>。在这些网络之间的通信协议可以是任意的。</p></li><li><p><strong>Internet（因特网）则是一个专用名词</strong>，它指<strong>当前全球最大的、开放的、由众多网络互连而成的特定计算机网络</strong>，它采用TCP&#x2F;IP协议族作为通信的规则，其前身是美国的ARPANET。</p></li></ul><h4 id="因特网的三个发展阶段"><a href="#因特网的三个发展阶段" class="headerlink" title="因特网的三个发展阶段"></a>因特网的三个发展阶段</h4><ol><li>从单个网络ARPANET向互联网发展。</li><li>逐步建成了三级结构的因特网。</li><li>逐渐形成了多层次的ISP结构的因特网。</li></ol><h3 id="2、因特网的组成"><a href="#2、因特网的组成" class="headerlink" title="2、因特网的组成"></a>2、因特网的组成</h3><ol><li>边缘部分</li></ol><p>由所有连接在因特网上的<strong>主机</strong>组成（台式电脑，大型服务器，笔记本电脑，平板，智能手机等）。这部分是<strong>用户直接使用</strong>的，用来进行<strong>通信</strong>（传送数据、音频或视频）和<strong>资源共享</strong>。</p><ol start="2"><li>核心部分</li></ol><p>由<strong>大量网络</strong>和连接这些网络的<strong>路由器</strong>组成。这部分是<strong>为边缘部分提供服务</strong>的（提供连通性和交换）。<img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221127212642808.png" alt="image-20221127212642808"></p><h4 id="因特网的边缘部分"><a href="#因特网的边缘部分" class="headerlink" title="因特网的边缘部分"></a>因特网的边缘部分</h4><p>端系统 (end system)：</p><p>处在互联网边缘的部分就是连接在互联网上的所有的主机。</p><h5 id="端系统之间通信的含义："><a href="#端系统之间通信的含义：" class="headerlink" title="端系统之间通信的含义："></a><strong>端系统之间通信的含义：</strong></h5><p>“主机 A 和主机 B 进行通信”实际上是指：“运行在主机 A 上的某个程序和运行在主机 B 上的另一个程序进行通信”。<strong>即“主机</strong>  <strong>A</strong>  <strong>的某个进程和主机</strong>  <strong>B</strong>  <strong>上的另一个进程进行通信”。简称为“计算机之间通信”。</strong></p><blockquote><p>计算机之间的通信，其实是两个计算机中进程之间的通信。</p></blockquote><p>端系统之间的通信方式通常可划分为两大类：</p><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221127212906206.png" alt="image-20221127212906206"></p><p><strong>客户-服务器方式：</strong></p><ul><li>客户 (client) 和服务器 (server) 都是指通信中所涉及的两个应用进程。</li><li>客户 - 服务器方式所描述的是进程之间服务和被服务的关系。</li><li>客户是服务的请求方，服务器是服务的提供方。</li></ul><blockquote><p><strong>服务请求方和服务提供方都要使用网络核心部分所提供的服务。</strong></p></blockquote><p><strong>对等连接方式：</strong></p><ul><li><strong>对等连接</strong> (peer-to-peer，简写为 <strong>P2P</strong> ) 是指两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。</li><li>只要两个主机都运行了对等连接软件 ( P2P 软件) ，它们就可以进行<strong>平等的、对等连接通信</strong>。</li><li>双方都可以下载对方已经存储在硬盘中的共享文档。</li></ul><h4 id="因特网的核心部分"><a href="#因特网的核心部分" class="headerlink" title="因特网的核心部分"></a>因特网的核心部分</h4><p>网络核心最重要的部分：</p><p><strong>路由器</strong>是一种专用计算机，但我们不称它为主机，路由器是实现<strong>分组交换</strong>的关键构建，其任务是<strong>转发收到的分组</strong>。</p><h5 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h5><ul><li><p>电话交换机接通电话线的方式称为电路交换；</p></li><li><p>从通信资源的分配角度来看，交换（Switching）就是按照某种方式动态地分配传输线路的资源；</p></li><li><p>电路交换的三个步骤：</p><p>1、建立连接（分配通信资源）</p><p>2、通话（一直占用通信资源）</p><p>3、释放连接（归还通信资源）</p></li></ul><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221127213416607.png" alt="image-20221127213416607"></p><h5 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h5><blockquote><p>通常我们把表示<strong>该消息的整块数据</strong>成为一个<strong>报文</strong>。</p><p>在发送报文之前，先把较长的报文划分成一个个更小的<strong>等长数据段</strong>，在每一个数据段前面。加上一些由必<strong>要的控制信息组成的首部</strong>后，就构成一个分组，也可简称为“包”，相应地，首部也可称为“包头”。</p><p>首部包含了<strong>分组的目的地址</strong></p><p>分组从源主机到目的主机，可走不同的路径。</p></blockquote><p>发送方</p><ul><li>构造分组</li><li>发送分组</li></ul><p>路由器</p><ul><li>缓存分组</li><li>转发分组</li><li>简称为“分组转发”</li></ul><p>接收方</p><ul><li>接收分组</li><li>还原报文</li></ul><blockquote><p>在路由器中的输入和输出端口之间没有直接连线。</p><p>路由器处理分组的过程是：</p><ol><li>把收到的分组先<strong>放入缓存（暂时存储）；</strong></li><li><strong>查找转发表</strong>，找出到某个目的地址应从哪个端口转发；</li><li>把分组送到适当的端口<strong>转发</strong>出去。</li></ol></blockquote><p>优点：</p><ol><li>高效</li><li>灵活</li><li>迅速</li><li>可靠</li></ol><h5 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h5><p>报文交换中的交换结点也采用存储转发方式，但报文交换对报文的大小没有限制，这就<strong>要求交换结点需要较大的缓存空间</strong>。报文交换主要用于早期的电报通信网，现在较少使用，<strong>通常被较先进的分组交换方式所取代</strong>。</p><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221127213636184.png" alt="image-20221127213636184"></p><h3 id="3、计算机网络的定义和分类"><a href="#3、计算机网络的定义和分类" class="headerlink" title="3、计算机网络的定义和分类"></a>3、计算机网络的定义和分类</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>计算机网络的最简单的定义是：一些<strong>互</strong>相<strong>连</strong>接的、<strong>自治</strong>的计算机的<strong>集合</strong>。</p><ul><li>互连：是指计算机之间可以通过有线或无线的方式进行数据通信；</li><li>自治：是指独立的计算机，他有自己的硬件和软件，可以单独运行使用；</li><li>集合：是指至少需要两台计算机；</li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><h5 id="从网络的作用范围进行分类"><a href="#从网络的作用范围进行分类" class="headerlink" title="从网络的作用范围进行分类"></a>从网络的作用范围进行分类</h5><ul><li><p>广域网WAN（Wide Area Network）</p></li><li><p>城域网MAN</p></li><li><p>局域网LAN</p></li><li><p>个域网PAN</p></li></ul><h5 id="从网络的使用者来分"><a href="#从网络的使用者来分" class="headerlink" title="从网络的使用者来分"></a>从网络的使用者来分</h5><ul><li>共用网</li><li>专用网</li></ul><h3 id="4、计算机网络的主要性能指标"><a href="#4、计算机网络的主要性能指标" class="headerlink" title="4、计算机网络的主要性能指标"></a>4、计算机网络的主要性能指标</h3><h4 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h4><p>数据传送速率，也称比特率。</p><h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><p>表示网络的通信线路所能传送数据的能力，网络带宽表示在单位时间从网络中的某一点到另一点所能通过的最高速率。</p><h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p>表示单位时间内通过某个网络的数据量。</p><h4 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h4><p>直属局从网络的一段传送到另一端所需要的时间。</p><ul><li><p><strong>发送时延</strong>：主机或者路由器将分组发送到通信线路上需要的时间。</p></li><li><p><strong>传播时延</strong>：电磁波在通信中需要传播一定距离而花费的时间。</p></li><li><p>处理时延：主机或路由器在收到分组时要花费一定时间进行处理</p></li><li><p>排队时延:分组在进过网络传输时，要经过许多路由器。但分组在进入路由器后要先在输入队列中排队等待处理。</p></li></ul><h4 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h4><ul><li>信道利用率：信道中有百分之几的时间是被利用的。</li><li>网络利用率：全网络的信道利用率的加权平均值。</li></ul><p><strong>信道或网络利用率过高会产生非常大的时延。</strong></p><h3 id="5、计算机网络体系结构"><a href="#5、计算机网络体系结构" class="headerlink" title="5、计算机网络体系结构"></a>5、计算机网络体系结构</h3><h4 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h4><p>协议：控制两个对等实体进行逻辑通信的规则的集合</p><p>协议三要素：</p><ul><li><p>语法：定义所交换信息的格式</p></li><li><p>语义：定义收发双方所要完成的操作</p></li><li><p>同步：定义收发双发的时序关系</p></li></ul><h4 id="层次模型与计算机网络体系结构"><a href="#层次模型与计算机网络体系结构" class="headerlink" title="层次模型与计算机网络体系结构"></a>层次模型与计算机网络体系结构</h4><p>体系结构：计算机网络及其部件所完成的功能的精确定义。</p><p>层次结构的优点：</p><ol><li>各层之间是独立的</li><li>灵活性好</li><li>结构上可分割开</li><li>易于实现和维护</li><li>有利于功能复用</li><li>能促进标准化工作</li></ol><h4 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h4><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221127215406718.png" alt="image-20221127215406718"></p><p>我们采用5曾体系结构</p><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221127215429050.png" alt="image-20221127215429050"></p><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221127215502013.png" alt="image-20221127215502013"></p><h4 id="实体、服务"><a href="#实体、服务" class="headerlink" title="实体、服务"></a>实体、服务</h4><p><strong>实体</strong>entity</p><blockquote><p>表示任何发送或接受信息的硬件或软件进程</p></blockquote><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221127215547963.png" alt="image-20221127215547963"></p><p>服务</p><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221127215602335.png" alt="image-20221127215602335"></p><blockquote><p>透明：实际上存在，但看起来不存在。(透明玻璃门)</p></blockquote><p>协议的下层向上层提供服务。</p><h3 id="6、两个重要的新型网络技术"><a href="#6、两个重要的新型网络技术" class="headerlink" title="6、两个重要的新型网络技术"></a>6、两个重要的新型网络技术</h3><h4 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h4><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221127215755500.png" alt="image-20221127215755500"></p><h4 id="物联网"><a href="#物联网" class="headerlink" title="物联网"></a>物联网</h4><p>把任何物体和网络相连接。</p><h2 id="二、物理层"><a href="#二、物理层" class="headerlink" title="二、物理层"></a>二、物理层</h2><h3 id="1、物理层的基本概念"><a href="#1、物理层的基本概念" class="headerlink" title="1、物理层的基本概念"></a>1、物理层的基本概念</h3><blockquote><p>物理层协议主要任务就是确定与传输媒体的接口有关的一些特性。</p></blockquote><ol><li>机械特性：尺寸大小，引脚数目，排列顺序</li><li>电气特性：电压的范围</li><li>功能特性：某一线路的某一电压电平的表示</li><li>过程特性：不同功能可能事件出现的顺序</li></ol><p>数据在通信线路上的传输方式一般是串行传输</p><h3 id="2、数据通信的基础知识"><a href="#2、数据通信的基础知识" class="headerlink" title="2、数据通信的基础知识"></a>2、数据通信的基础知识</h3><h4 id="数据通信系统的模型"><a href="#数据通信系统的模型" class="headerlink" title="数据通信系统的模型"></a>数据通信系统的模型</h4><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221128213132624.png" alt="image-20221128213132624"></p><p>一个数据系统可划分为三大部分：</p><ol><li>源系统（或发送方、发送端）</li><li>传输系统（或传输网络）</li><li>目的系统（或接收端、接收方）</li></ol><p>源系统包括：</p><ol><li>源点</li><li>发送器</li></ol><p>目的系统包括：</p><ol><li>接收器</li><li>终点</li></ol><p>一些术语：</p><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221128213539834.png" alt="image-20221128213539834"></p><p>模拟信号（连续信号）：消息的参数取值是连续的。</p><p>数字信号（离散信号）：消息的参数取值是离散的。</p><p>信道：表示向某一方向传输信息的媒体。</p><h4 id="编码和调制"><a href="#编码和调制" class="headerlink" title="编码和调制"></a>编码和调制</h4><h5 id="常见的编码方式"><a href="#常见的编码方式" class="headerlink" title="常见的编码方式"></a>常见的编码方式</h5><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221128213839947.png" alt="image-20221128213839947"></p><ul><li><p>数字数据转换成数字信号称为<code>编码</code></p></li><li><p>数字数据转化为模拟信号称为<code>调制</code></p></li></ul><h5 id="基本的调制方法"><a href="#基本的调制方法" class="headerlink" title="基本的调制方法"></a>基本的调制方法</h5><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221128213935896.png" alt="image-20221128213935896"></p><h4 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h4><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221128214111108.png" alt="image-20221128214111108"></p><h5 id="奈氏准则"><a href="#奈氏准则" class="headerlink" title="奈氏准则"></a>奈氏准则</h5><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221128214232222.png" alt="image-20221128214232222"></p><h5 id="香农公式"><a href="#香农公式" class="headerlink" title="香农公式"></a>香农公式</h5><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221128214319210.png" alt="image-20221128214319210"></p><p>信道的带宽或通信中的信噪比越大，信息的极限传输速率就会变高。</p><h4 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h4><h5 id="串行传输、并行传输"><a href="#串行传输、并行传输" class="headerlink" title="串行传输、并行传输"></a>串行传输、并行传输</h5><p><strong>串行传输</strong>：</p><ul><li>数据是<code>一个比特一个比特依次发送</code>的，因此在发送端与接收端之间，只需要一条数据传输线路即可</li></ul><p><strong>并行传输</strong>：</p><ul><li><p><code>一次发送n个比特</code>，因此，在发送端和接收端之间需要有n条传输线路</p></li><li><p>并行传输的优点是比串行传输的速度n倍，但成本高</p></li></ul><p>数据在传输线路上的传输采用是<strong>串行传输</strong>，计算机内部的数据传输常用<strong>并行传输</strong></p><h5 id="同步传输、异步传输"><a href="#同步传输、异步传输" class="headerlink" title="同步传输、异步传输"></a>同步传输、异步传输</h5><p>同步传输：收发双方在时间基准上保持一致的过程。</p><p><strong>异步传输</strong>：</p><ul><li><p>以字节为独立的传输单位，字节之间的时间间隔不是固定</p></li><li><p>接收端仅在每个字节的起始处对字节内的比特实现同步</p></li><li><p>通常在每个字节前后分别加上起始位和结束位</p></li></ul><h5 id="单工、半双工、全双工"><a href="#单工、半双工、全双工" class="headerlink" title="单工、半双工、全双工"></a>单工、半双工、全双工</h5><p>单工又称为<strong>单工通信</strong>，即只能有一个方向的通信而没有反方向的交互。</p><p>半双工又称为<strong>半双工通信</strong>，即通信的双方可以发送信息，但不能双方同时发送（当然也就不能同时接收）。</p><p>双工又称为<strong>全双工通信</strong>，即通信的双发可以同时发送和接收信息。</p><h3 id="3、物理层下面的传输媒体"><a href="#3、物理层下面的传输媒体" class="headerlink" title="3、物理层下面的传输媒体"></a>3、物理层下面的传输媒体</h3><h4 id="导引型传输媒体"><a href="#导引型传输媒体" class="headerlink" title="导引型传输媒体"></a>导引型传输媒体</h4><ol><li>双绞线</li><li>同轴电缆</li><li>光纤</li></ol><h4 id="非导引型传输媒体"><a href="#非导引型传输媒体" class="headerlink" title="非导引型传输媒体"></a>非导引型传输媒体</h4><ol><li>无线电波</li><li>微波</li><li>红外线</li><li>可见光</li></ol><h3 id="4、信道复用技术"><a href="#4、信道复用技术" class="headerlink" title="4、信道复用技术"></a>4、信道复用技术</h3><p><code>复用</code> (multiplexing) 是通信技术中的基本概念。</p><p>服用就是通过一条物理线路同时传输多路用户信号。当网络中传输媒体的传输容量大于多条单一信道容量时，可利用复用技术在一条物理线路上建立多条通信信道来充分利用传输媒体的带宽。</p><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221128215651724.png" alt="image-20221128215651724"></p><h4 id="频分复用、时分复用和统计时分复用"><a href="#频分复用、时分复用和统计时分复用" class="headerlink" title="频分复用、时分复用和统计时分复用"></a>频分复用、时分复用和统计时分复用</h4><p><strong>频分复用 FDM (Frequency Division Multiplexing)</strong></p><ul><li><p>将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</p></li><li><p><strong>频分复用</strong>: 所有用户在同样的时间<strong>占用不同的带宽资源</strong>。</p></li></ul><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221128215749548.png" alt="image-20221128215749548"></p><p><strong>时分复用TDM (Time Division Multiplexing)</strong></p><ul><li><strong>时分复用</strong>则是将时间划分为一段段等长的<strong>时分复用帧（TDM帧）</strong>。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</li><li>每一个用户所占用的时隙是<strong>周期性地出现</strong>（其周期就是TDM帧的长度）的。</li><li>TDM 信号也称为<strong>等时</strong> (isochronous) 信号。</li><li><strong>时分复用的所有用户在不同的时间占用同样的频带宽度。</strong></li><li><strong>时分复用可能会造成线路资源的浪费</strong></li></ul><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221128215815561.png" alt="image-20221128215815561"></p><p>统计时分复用</p><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221128215908275.png" alt="image-20221128215908275"></p><h4 id="波分复用"><a href="#波分复用" class="headerlink" title="波分复用"></a>波分复用</h4><p>波分复用就是光的频分复用。</p><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221128215949913.png" alt="image-20221128215949913"></p><h4 id="码分复用"><a href="#码分复用" class="headerlink" title="码分复用"></a>码分复用</h4><p>码分复用 CDM (Code Division Multiplexing)</p><ul><li>常用的名词是<strong>码分多址</strong> CDMA (Code Division Multiple Access)。</li><li>各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。</li></ul><p>码分复用的计算：<strong>（标准化内积）</strong></p><p><img src="/../images/%E8%AE%A1%E7%BD%91%E7%AE%80%E8%A6%81/image-20221128220100423.png" alt="image-20221128220100423"></p><p>内积为1 发送数据1</p><p>内积为-1 发送数据0</p><p>内积为0 不发送数据</p><h3 id="5、数字传输系统"><a href="#5、数字传输系统" class="headerlink" title="5、数字传输系统"></a>5、数字传输系统</h3><p>最初在数字传输系统中使用的传输标准是PCM服用速率体制。现在高速的数字传输系统使用同步光纤网(SONET)或同步数字系列（SDH）</p><h3 id="6、互联网接入技术"><a href="#6、互联网接入技术" class="headerlink" title="6、互联网接入技术"></a>6、互联网接入技术</h3><h4 id="电话网拨号接入"><a href="#电话网拨号接入" class="headerlink" title="电话网拨号接入"></a>电话网拨号接入</h4><p>通过拨号调制解调器建立一条语音通道。</p><h4 id="数字用户接入"><a href="#数字用户接入" class="headerlink" title="数字用户接入"></a>数字用户接入</h4><p>数字用户线就是宽带接入业务。</p><h4 id="光纤同轴混合接入HFC"><a href="#光纤同轴混合接入HFC" class="headerlink" title="光纤同轴混合接入HFC"></a>光纤同轴混合接入HFC</h4><h4 id="光纤接入FTTX"><a href="#光纤接入FTTX" class="headerlink" title="光纤接入FTTX"></a>光纤接入FTTX</h4><h4 id="以太网接入"><a href="#以太网接入" class="headerlink" title="以太网接入"></a>以太网接入</h4><h4 id="无线接入"><a href="#无线接入" class="headerlink" title="无线接入"></a>无线接入</h4><p>用户到因特网的宽带接入方法主要有：</p><ul><li>非对称数字用户线ADSL</li><li>光纤同轴混合接入HFC</li><li>FTTX光前接入</li><li>无线接入</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2022/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2022/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h2><h3 id="1-1、因特网的概述"><a href="#1-1、因特网的概述" class="headerlink" title="1.1、因特网的概述"></a>1.1、因特网的概述</h3><blockquote><p>1、4理解</p><p>2、3了解</p></blockquote><h4 id="1、网络、互联网（互连网）和因特网"><a href="#1、网络、互联网（互连网）和因特网" class="headerlink" title="1、网络、互联网（互连网）和因特网"></a>1、网络、互联网（互连网）和因特网</h4><p>网络：网络（Network）由若干<strong>结点（Node）</strong>和连接这些结点的<strong>链路（Link）</strong>组成。</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-4fcd41d225b201be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/505/format/webp" alt="img"></p><p>互连网（互联网）：多个网络通过路由器互连起来，这样就构成了一个覆盖范围更大的网络，即互连网（互联网）。因此，互联网又称为“网络的网络（Network of Networks）”。</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ff49fa2ef0245745.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/899/format/webp" alt="img"></p><p>因特网：因特网（Internet）是世界上最大的互连网络（用户数以亿计，互连的网络数以百万计）。</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ee181b01ca4c6f8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/922/format/webp" alt="img"></p><blockquote><p><strong>internet与Internet的区别</strong></p><ul><li><p><strong>internet(互联网或互连网)<strong>是一个通用名词，它泛指</strong>多个计算机网络互连而成的网络</strong>。在这些网络之间的通信协议可以是任意的。</p></li><li><p><strong>Internet（因特网）则是一个专用名词</strong>，它指<strong>当前全球最大的、开放的、由众多网络互连而成的特定计算机网络</strong>，它采用TCP&#x2F;IP协议族作为通信的规则，其前身是美国的ARPANET。</p></li></ul><p>任意把几个计算机网络互连起来（不管采用什么协议），并能够相互通信，这样构成的是一个互连网(internet) ，而不是互联网(Internet)。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-cb6c0dd7a1f70e3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="2、因特网发展的三个阶段"><a href="#2、因特网发展的三个阶段" class="headerlink" title="2、因特网发展的三个阶段"></a>2、因特网发展的三个阶段</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0ee6522bfae940b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>因特网服务提供者<code>ISP</code>(<code>I</code>nternet <code>S</code>ervice <code>P</code>rovider)</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-332e68bc46bc59ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>普通用户是如何接入到因特网的呢？</p><p>答：<strong>通过ISP接入因特网</strong></p><p>ISP可以从因特网管理机构申请到成块的IP地址，同时拥有通信线路以及路由器等联网设备。任何机构和个人只需缴纳费用，就可从<strong>ISP的得到所需要的IP地址</strong>。</p><p><strong>因为因特网上的主机都必须有IP地址才能进行通信，这样就可以通过该ISP接入到因特网</strong></p></blockquote><p>中国的三大<code>ISP</code>：中国电信，中国联通和中国移动</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ce38a42cfcab9872.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/965/format/webp" alt="img"></p><p><strong>基于ISP的三层结构的因特网</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-1ccdf3defcff4ef1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>一旦某个用户能够接入到因特网，那么他也可以成为一个ISP，所需要做的就是购买一些如调制解调器或路由器这样的设备，让其他用户可以和他相连。</p></blockquote><h4 id="3、因特网的标准化工作"><a href="#3、因特网的标准化工作" class="headerlink" title="3、因特网的标准化工作"></a>3、因特网的标准化工作</h4><ol><li><p>因特网的标准化工作对因特网的发展起到了非常重要的作用。</p></li><li><p>因特网在指定其标准上的一个很大的特点是<strong>面向公众。</strong></p><ul><li><p>因特网所有的<strong>RFC</strong>(Request For Comments)技术文档都可从因特网上免费下载；</p></li><li><p>任何人都可以随时用电子邮件发表对某个文档的意见或建议。</p></li></ul></li><li><p><strong>因特网协会ISOC</strong>是一个国际性组织，它负责对因特网进行全面管理，以及在世界范围内促进其发展和使用。</p><ul><li><p>因特网体系结构委员会IAB，负责管理因特网有关协议的开发；</p></li><li><p>因特网工程部IETF，负责研究中短期工程问题，主要针对协议的开发和标准化；</p></li><li><p>因特网研究部IRTF，从事理论方面的研究和开发一些需要长期考虑的问题。</p></li></ul></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/24878825-92960e033eb18c8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/546/format/webp" alt="img"></p><ul><li><p>制订因特网的正式标准要经过一下<strong>4个阶段</strong>：</p><p>1、因特网草案（在这个阶段还不是RFC文档）</p><p>2、建议标准（从这个阶段开始就成为RFC文档）</p><p>3、草案标准</p><p>4、因特网标准</p></li></ul><h4 id="4、因特网的组成"><a href="#4、因特网的组成" class="headerlink" title="4、因特网的组成"></a>4、因特网的组成</h4><ol><li>边缘部分</li></ol><p>由所有连接在因特网上的<strong>主机</strong>组成（台式电脑，大型服务器，笔记本电脑，平板，智能手机等）。这部分是<strong>用户直接使用</strong>的，用来进行<strong>通信</strong>（传送数据、音频或视频）和<strong>资源共享</strong>。</p><ol start="2"><li>核心部分</li></ol><p>由<strong>大量网络</strong>和连接这些网络的<strong>路由器</strong>组成。这部分是<strong>为边缘部分提供服务</strong>的（提供连通性和交换）。</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-3065474a4377aff0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>路由器是一种专用计算机，但我们不称它为主机，路由器是实现<strong>分组交换</strong>的关键构建，其任务是转发收到的分组，这是网络核心最重要的部分。</p><p>处在互联网边缘的部分就是连接在互联网上的所有的主机。这些主机又称为**端系统 (end system)**。</p><p><strong>端系统在功能上可能有很大的差别：</strong></p><ol><li><p>小的端系统可以是一台普通个人电脑，具有上网功能的智能手机，甚至是一个很小的网络摄像头。</p></li><li><p>大的端系统则可以是一台非常昂贵的大型计算机。</p></li><li><p>端系统的拥有者可以是个人，也可以是单位（如学校、企业、政府机关等），当然也可以是某个ISP。</p></li></ol></blockquote><h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><h5 id="端系统之间通信的含义"><a href="#端系统之间通信的含义" class="headerlink" title="端系统之间通信的含义"></a><strong>端系统之间通信的含义</strong></h5><p>“主机 A 和主机 B 进行通信”实际上是指：“运行在主机 A 上的某个程序和运行在主机 B 上的另一个程序进行通信”。<strong>即“主机</strong>  <strong>A</strong>  <strong>的某个进程和主机</strong>  <strong>B</strong>  <strong>上的另一个进程进行通信”。简称为“计算机之间通信”。</strong></p><blockquote><p>计算机之间的通信，其实是两个计算机中进程之间的通信。</p></blockquote><p>端系统之间的通信方式通常可划分为两大类：</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-4ee005d739f54581.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>客户-服务器方式：</strong></p><ul><li>客户 (client) 和服务器 (server) 都是指通信中所涉及的两个应用进程。</li><li>客户 - 服务器方式所描述的是进程之间服务和被服务的关系。</li><li>客户是服务的请求方，服务器是服务的提供方。</li></ul><blockquote><p><strong>服务请求方和服务提供方都要使用网络核心部分所提供的服务。</strong></p></blockquote><p><strong>对等连接方式：</strong></p><ul><li><strong>对等连接</strong> (peer-to-peer，简写为 <strong>P2P</strong> ) 是指两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。</li><li>只要两个主机都运行了对等连接软件 ( P2P 软件) ，它们就可以进行<strong>平等的、对等连接通信</strong>。</li><li>双方都可以下载对方已经存储在硬盘中的共享文档。</li></ul><h3 id="1-2、三种交换方式"><a href="#1-2、三种交换方式" class="headerlink" title="1.2、三种交换方式"></a>1.2、三种交换方式</h3><blockquote><p>重点：分组交换</p></blockquote><p>网络核心部分是互联网中最复杂的部分。</p><p>网络中的核心部分要向网络边缘中的大量主机提供连通性，使边缘部分中的任何一个主机都能够向其他主机通信（即传送或接收各种形式的数据）。</p><p>在网络核心部分起特殊作用的是<strong>路由器</strong>(router)。</p><p><strong>路由器</strong>是实现<strong>分组交换</strong> (packet switching) 的关键构件，其任务是<strong>转发</strong>收到的分组，这是网络核心部分最重要的功能。</p><h4 id="1、电路交换（Circuit-Switching）"><a href="#1、电路交换（Circuit-Switching）" class="headerlink" title="1、电路交换（Circuit Switching）"></a>1、电路交换（Circuit Switching）</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-cbb94cf7d6bc6f8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>传统两两相连的方式，当电话数量很多时，电话线也很多，就很不方便</p><p>所以要使得每一部电话能够很方便地和另一部电话进行通信，就应该使用一个<strong>中间设备</strong>将这些电话连接起来，这个中间设备就是<strong>电话交换机</strong></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-7ad293b2ca19158b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/672/format/webp" alt="img"></p><ul><li><p>电话交换机接通电话线的方式称为电路交换；</p></li><li><p>从通信资源的分配角度来看，交换（Switching）就是按照某种方式动态地分配传输线路的资源；</p></li><li><p>电路交换的三个步骤：</p><p>1、建立连接（分配通信资源）</p><p>2、通话（一直占用通信资源）</p><p>3、释放连接（归还通信资源）</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-acb87df045723236.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>当使用电路交换来传送计算机数据时，其线路的传输效率往往很低。</p><p>这是因为计算机数据是突发式地出现在传输线路上的。</p><p>所以计算机通常采用的是<strong>分组交换</strong>，而不是线路交换</p></blockquote><h4 id="2、分组交换（Packet-Switching）"><a href="#2、分组交换（Packet-Switching）" class="headerlink" title="2、分组交换（Packet Switching）"></a>2、<strong>分组交换（Packet Switching）</strong></h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c57bf61052cb33f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>通常我们把表示<strong>该消息的整块数据</strong>成为一个<strong>报文</strong>。</p><p>在发送报文之前，先把较长的报文划分成一个个更小的<strong>等长数据段</strong>，在每一个数据段前面。加上一些由必<strong>要的控制信息组成的首部</strong>后，就构成一个分组，也可简称为“包”，相应地，首部也可称为“包头”。</p><p>首部包含了<strong>分组的目的地址</strong></p><p>分组从源主机到目的主机，可走不同的路径。</p></blockquote><p>发送方</p><ul><li>构造分组</li><li>发送分组</li></ul><p>路由器</p><ul><li>缓存分组</li><li>转发分组</li><li>简称为“分组转发”</li></ul><blockquote><p>在路由器中的输入和输出端口之间没有直接连线。</p><p>路由器处理分组的过程是：</p><ol><li><p>把收到的分组先<strong>放入缓存（暂时存储）；</strong></p></li><li><p><strong>查找转发表</strong>，找出到某个目的地址应从哪个端口转发；</p></li><li><p>把分组送到适当的端口<strong>转发</strong>出去。</p></li></ol></blockquote><p>接收方</p><ul><li>接收分组</li><li>还原报文</li></ul><h4 id="3、报文交换（Message-Switching）"><a href="#3、报文交换（Message-Switching）" class="headerlink" title="3、报文交换（Message Switching）"></a>3、报文交换（Message Switching）</h4><p>报文交换中的交换结点也采用存储转发方式，但报文交换对报文的大小没有限制，这就<strong>要求交换结点需要较大的缓存空间</strong>。报文交换主要用于早期的电报通信网，现在较少使用，<strong>通常被较先进的分组交换方式所取代</strong>。</p><h4 id="三种交换方式的对比"><a href="#三种交换方式的对比" class="headerlink" title="三种交换方式的对比"></a>三种交换方式的对比</h4><blockquote><p>假设A，B，C，D是分组传输路径所要经过的4个结点交换机，纵坐标为时间</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-e655a213714d1871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>分析：</p><p>电路交换：</p><ul><li>通信之前首先要建立连接；连接建立好之后，就可以使用已建立好的连接进行数据传送；数据传送后，需释放连接，以归还之前建立连接所占用的通信线路资源。</li><li>一旦建立连接，中间的各结点交换机就是直通形式的，比特流可以直达终点；</li></ul><p>报文交换：</p><ul><li>可以随时发送报文，而不需要事先建立连接；整个报文先传送到相邻结点交换机，全部存储下来后进行查表转发，转发到下一个结点交换机。</li><li>整个报文需要在各结点交换机上进行存储转发，由于不限制报文大小，因此需要各结点交换机都具有较大的缓存空间。</li></ul><p>分组交换：</p><ul><li>可以随时发送分组，而不需要事先建立连接。构成原始报文的一个个分组，依次在各结点交换机上存储转发。各结点交换机在发送分组的同时，还缓存接收到的分组。</li><li>构成原始报文的一个个分组，在各结点交换机上进行存储转发，相比报文交换，减少了转发时延，还可以避免过长的报文长时间占用链路，同时也有利于进行差错控制。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c56f91f290cbc92b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h3 id="1-3、计算机网络的定义和分类"><a href="#1-3、计算机网络的定义和分类" class="headerlink" title="1.3、计算机网络的定义和分类"></a>1.3、计算机网络的定义和分类</h3><h4 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h4><ul><li>计算机网络的精确定义并未统一</li><li>计算机网络的最简单的定义是：一些<strong>互</strong>相<strong>连</strong>接的、<strong>自治</strong>的计算机的<strong>集合</strong>。<ul><li>互连：是指计算机之间可以通过有线或无线的方式进行数据通信；</li><li>自治：是指独立的计算机，他有自己的硬件和软件，可以单独运行使用；</li><li>集合：是指至少需要两台计算机；</li></ul></li><li>计算机网络的较好的定义是：计算机网络主要是由一些<strong>通用的，可编程的硬件（一定包含有中央处理机CPU）互连</strong>而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。这些可编程的硬件能够用来<strong>传送多种不同类型的数据</strong>，并能<strong>支持广泛的和日益增长的应用</strong>。<ul><li>计算机网络所连接的硬件，并不限于一般的计算机，而是包括了智能手机等智能硬件。</li><li>计算机网络并非专门用来传送数据，而是能够支持很多种的应用（包括今后可能出现的各种应用）。</li></ul></li></ul><h4 id="2、分类"><a href="#2、分类" class="headerlink" title="2、分类"></a>2、分类</h4><p><strong>按交换技术分类：</strong></p><ul><li>电路交换网络</li><li>报文交换网络</li><li>分组交换网络</li></ul><p><strong>按使用者分类：</strong></p><ul><li>公用网</li><li>专用网</li></ul><p><strong>按传输介质分类：</strong></p><ul><li>有线网络</li><li>无线网络</li></ul><p><strong>按覆盖范围分类：</strong></p><ul><li>广域网WAN（Wide Area Network）</li></ul><p>作用范围通常为几十到几千公里，因而有时也称为远程网（long haul network）。广域网是互联网的核心部分，其任务是通过长距离（例如，跨越不同的国家）运送主机所发送的数据。</p><ul><li>城域网MAN</li></ul><p>作用范围一般是一个城市，可跨越几个街区甚至整个城市</p><ul><li>局域网LAN</li></ul><p>一般用微型计算机或工作站通过高速通信线路相连（速率通常在 10 Mbit&#x2F;s 以上），但地理上范围较小（1 km 左右）</p><ul><li>个域网PAN</li></ul><p>就是在个人工作的地方把个人使用的电子设备用无线技术连接起来的网络。</p><p><strong>按拓扑结构分类：</strong></p><ul><li>总线型网络</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-4ed63e74d9ced719.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/384/format/webp" alt="img"></p><ul><li>星型网络</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f6a1849bcc443935.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/260/format/webp" alt="img"></p><ul><li>环形网络</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ca133aaaf8fe8659.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/308/format/webp" alt="img"></p><ul><li>网状型网络</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d0d30cddc7356396.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/557/format/webp" alt="img"></p><hr><h3 id="1-4、计算机网络的性能指标"><a href="#1-4、计算机网络的性能指标" class="headerlink" title="1.4、计算机网络的性能指标"></a>1.4、计算机网络的性能指标</h3><h4 id="1、速率"><a href="#1、速率" class="headerlink" title="1、速率"></a>1、速率</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ba6c4e627a62c05e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0c0d70a808407ca2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="2、带宽"><a href="#2、带宽" class="headerlink" title="2、带宽"></a>2、带宽</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f4b18e0039f4a6c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="3、吞吐量"><a href="#3、吞吐量" class="headerlink" title="3、吞吐量"></a>3、吞吐量</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0910421c209252b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>带宽1 Gb&#x2F;s的以太网，代表其额定速率是1 Gb&#x2F;s，这个数值也是该以太网的<strong>吞吐量的绝对上限值</strong>。因此，对于带宽1 Gb&#x2F;s的以太网，可能实际吞吐量只有 700 Mb&#x2F;s，甚至更低。</p><p>注意：吞吐量还可以用每秒传送的字节数或帧数表示</p></blockquote><h4 id="4、时延"><a href="#4、时延" class="headerlink" title="4、时延"></a>4、时延</h4><p>时延时指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。</p><p>网络时延由几部分组成：</p><ul><li>发送时延</li></ul><p><strong>主机或路由器发送数据帧所需要的时间</strong>，也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。</p><ul><li>传播时延</li></ul><p>电磁波在信道中传播一定的距离需要花费的时间。</p><ul><li>处理时延</li></ul><p>主机或路由器在收到分组时要花费一定时间进行处理</p><ul><li>排队时延</li></ul><p>分组在进过网络传输时，要经过许多路由器。但分组在进入路由器后要先在输入队列中排队等待处理。</p><blockquote><p>有时会把排队时延看成<strong>处理时延 一部分</strong></p><p>总时延 &#x3D; 发送时延 + 传播时延 + 处理时延 （处理时延 + 排队时延）</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5f9bf4982c20ad4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-dd48cf5be5b2a7f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>当处理时延忽略不计时，发送时延 和 传播时延谁占主导，要具体情况具体分析</p></blockquote><h4 id="5、时延带宽积"><a href="#5、时延带宽积" class="headerlink" title="5、时延带宽积"></a>5、时延带宽积</h4><p>时延带宽积 &#x3D; 传播时延 * 带宽</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-bdca296e77c59e48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="6、往返时间"><a href="#6、往返时间" class="headerlink" title="6、往返时间"></a>6、往返时间</h4><p>互联网上的信息不仅仅单方向传输而是双向交互的。因此，我们有时很需要知道<strong>双向交互一次所需的时间</strong>。</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-73f29eb38db9983c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="7、利用率"><a href="#7、利用率" class="headerlink" title="7、利用率"></a>7、利用率</h4><p>利用率有<strong>信道利用率</strong>和<strong>网络利用率</strong>两种。</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-62d6da59682ef67f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="8、丢包率"><a href="#8、丢包率" class="headerlink" title="8、丢包率"></a>8、丢包率</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f8fc02096f0952b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h3 id="1-5、计算机网络体系结构"><a href="#1-5、计算机网络体系结构" class="headerlink" title="1.5、计算机网络体系结构"></a>1.5、<strong>计算机网络体系结构</strong></h3><h4 id="1、常见的计算机网络体系结构"><a href="#1、常见的计算机网络体系结构" class="headerlink" title="1、常见的计算机网络体系结构"></a>1、常见的计算机网络体系结构</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-b5174af1551d6cee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>如今用的最多的是TCP&#x2F;IP体系结构，现今规模最大的、覆盖全球的、基于TCP&#x2F;IP的互联网并未使用OSI标准。</p><p>TCP&#x2F;IP体系结构相当于将OSI体系结构的<strong>物理层</strong>和<strong>数据链路层</strong>合并为了<strong>网络接口层</strong>，并去掉了<strong>会话层</strong>和<strong>表示层</strong>。</p><p>TCP&#x2F;IP在网络层使用的协议是IP协议，IP协议的意思是网际协议，因此<strong>TCP&#x2F;IP体系结构的网络层称为网际层</strong></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f647ab572971d89a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1126/format/webp" alt="img"></p><blockquote><p>在用户主机的操作系统中，通常都带有符合TCP&#x2F;IP体系结构标准的TCP&#x2F;IP协议族。</p><p>而用于网络互连的路由器中，也带有符合TCP&#x2F;IP体系结构标准的TCP&#x2F;IP协议族。</p><p>只不过路由器一般只包含网络接口层和网际层。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6800e214b18c47c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/931/format/webp" alt="img"></p><blockquote><p><strong>网络接口层</strong>：并没有规定具体内容，这样做的目的是可以互连全世界各种不同的网络接口，例如：有线的以太网接口，无线局域网的WIFI接口等。</p><p><strong>网际层</strong>：它的核心协议是IP协议。</p><p><strong>运输层</strong>：TCP和UDP是这层的两个重要协议。</p><p><strong>应用层</strong>：这层包含了大量的应用层协议，如 HTTP , DNS 等。</p></blockquote><blockquote><p><strong>IP协议（网际层）</strong>可以将不同的<strong>网络接口（网络接口层）</strong>进行互连，并向其上的<strong>TCP协议和UDP协议（运输层）</strong>提供网络互连服务</p><p>而<strong>TCP协议</strong>在享受IP协议提供的网络互连服务的基础上，可向<strong>应用层的相应协议</strong>提供<strong>可靠</strong>的传输服务。</p><p><strong>UDP协议</strong>在享受IP协议提供的网络互连服务的基础上，可向<strong>应用层的相应协议</strong>提供<strong>不可靠</strong>的传输服务。</p></blockquote><blockquote><p>TCP&#x2F;IP体系结构中最重要的是<strong>IP协议</strong>和<strong>TCP协议</strong>，因此用TCP和IP来表示整个协议大家族。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-82255e6c6d5f29bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>教学时把TCP&#x2F;IP体系结构的<strong>网络接口层</strong>分成了<strong>物理层</strong>和<strong>数据链路层</strong></p></blockquote><h4 id="2、计算机网络体系结构分层的必要性"><a href="#2、计算机网络体系结构分层的必要性" class="headerlink" title="2、计算机网络体系结构分层的必要性"></a>2、计算机网络体系结构分层的必要性</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-466a303e1e5cc42a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>物理层问题</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0274083e0bf0da85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>这图说明</p><ul><li><p>第一，严格来说，传输媒体并不属于物理层</p></li><li><p>计算机传输的信号，并不是图示的方波信号</p></li></ul><p>这样举例只是让初学者容易理解</p></blockquote><p><strong>数据链路层问题</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f0d9f2816d7bab9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>网络层问题</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f55f86e0a78ffe23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>运输层问题</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-20174ff3821a739b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>如何标识与网络通信相关的应用进程：一个分组到来，我们应该交给哪个进程处理呢？浏览器进程还是QQ进程</p></blockquote><p><strong>应用层问题</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-edab6d1f00b0ab15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>应用层该用什么方法（应用层协议）去解析数据</p></blockquote><p><strong>总结</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-96bdae8525215011.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d29fee34f68a16b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-1cf0ec9780d80019.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="3、计算机网络体系结构分层思想举例"><a href="#3、计算机网络体系结构分层思想举例" class="headerlink" title="3、计算机网络体系结构分层思想举例"></a>3、计算机网络体系结构分层思想举例</h4><p>例子：主机的浏览器如何与Web服务器进行通信</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-33e3c614a6ac37d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>解析：</strong></p><p>主机和Web服务器之间基于网络的通信，实际上是主机中的<strong>浏览器应用进程</strong>与Web服务器中的<strong>Web服务器应用进程</strong>之间基于<strong>网络的通信</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-8c5d1b3fdc1b7111.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>体系结构的各层在整个过程中起到怎样的作用？</strong></p><p><strong>1、发送方发送</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ac36f7a9544dde9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>第一步：</p><ul><li><p><strong>应用层</strong>按照HTTP协议的规定构建一个<strong>HTTP请求报文</strong></p></li><li><p>应用层将<strong>HTTP请求报文</strong>交付给<strong>运输层</strong>处理</p></li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-cc2b73b1736d5809.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>第二步：</p><ul><li><p><strong>运输层</strong>给<strong>HTTP请求报文</strong>添加一个<strong>TCP首部</strong>，使之成为<strong>TCP报文段</strong></p></li><li><p><strong>TCP报文段的首部格式</strong>作用是区分应用进程（含有端口信息）以及实现可靠传输</p></li><li><p><strong>运输层</strong>将<strong>TCP报文段</strong>交付给<strong>网络层</strong>处理</p></li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-dc02183dcf759d9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>第三步：</p><ul><li><p><strong>网络层</strong>给<strong>TCP报文段</strong>添加一个<strong>IP首部</strong>，使之成为<strong>IP数据报</strong></p></li><li><p><strong>IP数据报的首部格式</strong>作用是使<strong>IP数据报</strong>可以在互联网传输，也就是被路由器转发</p></li><li><p><strong>网络层</strong>将<strong>IP数据报</strong>交付给<strong>数据链路层</strong>处理</p></li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f8cf8ce4a6bfdb54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>第四步：</p><ul><li><p><strong>数据链路层</strong>给<strong>IP数据报</strong>添加一个<strong>首部</strong>和一个<strong>尾部</strong>，使之成为<strong>帧</strong> （图示右边为首部，左边为尾部）</p></li><li><p>该<strong>首部</strong>的作用主要是为了让<strong>帧</strong>能够在一段链路上或一个网络上传输，能够被相应的目的主机接收</p></li><li><p>该<strong>尾部</strong>的作用是让目的主机检查所接收到的<strong>帧</strong>是否有误码</p></li><li><p><strong>数据链路层</strong>将<strong>帧</strong>交付给<strong>物理层</strong></p></li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-e7285afa504bce0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>第五步：</p><ul><li><p><strong>物理层</strong>先将<strong>帧</strong>看做是<strong>比特流</strong>，这里的网络N1假设是以太网，所以<strong>物理层</strong>还会给该<strong>比特流</strong>前面添加<strong>前导码</strong></p></li><li><p><strong>前导码</strong>的作用是为了让目的主机做好接收帧的准备</p></li><li><p><strong>物理层</strong>将装有<strong>前导码</strong>的<strong>比特流</strong>变换成相应的<strong>信号</strong>发送给传输媒体</p></li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-8ffee68ffe58b8a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>第六步：</p><ul><li><strong>信号</strong>通过<strong>传输媒体</strong>到达<strong>路由器</strong></li></ul></blockquote><p><strong>2、路由器转发</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-b9824f4625354b9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/945/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-09a0b27933c9895e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/832/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6eace5a882cca26d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/697/format/webp" alt="img"></p><blockquote><p>在路由器中</p><ul><li><p><strong>物理层</strong>将<strong>信号</strong>变为<strong>比特流</strong>，然后去掉<strong>前导码</strong>后，将其交付给<strong>数据链路层</strong></p></li><li><p><strong>数据链路层</strong>将<strong>帧</strong>的<strong>首部</strong>和<strong>尾部</strong>去掉后，将其交付给<strong>网络层</strong>，这实际交付的是<strong>IP数据报</strong></p></li><li><p><strong>网络层</strong>解析<strong>IP数据报</strong>的<strong>首部</strong>，从中提取<strong>目的网络地址</strong>，<strong>查找</strong>自身的<strong>路由表</strong>，<strong>确定转发端口</strong>，以便进行转发。</p></li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-bc79de20a0c4b57c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/638/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-33d09406bfc433e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/674/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-28228b60dd019bb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp" alt="img"></p><blockquote><p>在路由器中</p><ul><li>提取<strong>目的网络地址</strong>后查找<strong>自身路由表</strong>。确定<strong>转发端口</strong>， 以便进行转发</li></ul><p><strong>网络层</strong>将<strong>IP数据报</strong>交付给<strong>数据链路层</strong></p><ul><li><strong>数据链路层</strong>给<strong>IP数据报</strong>添加一个<strong>首部</strong>和一个<strong>尾部</strong>，使之成为<strong>帧</strong></li></ul><p><strong>数据链路层</strong>将帧交付给<strong>物理层</strong></p><ul><li><strong>物理层</strong>先将<strong>帧</strong>看成<strong>比特流</strong>，这里的网络N2假设是以太网，所以<strong>物理层</strong>还会给该<strong>比特流</strong>前面添加<strong>前导码</strong></li></ul><p>物理层将装有<strong>前导码</strong>的<strong>比特流</strong>变换成相应的<strong>信号</strong>发送给传输媒体，信号通过传输媒体到达<strong>Web服务器</strong></p></blockquote><p><strong>3、接收方接收</strong></p><blockquote><p>和发送方（主机）发送过程的封装正好是反着来</p><p>在Web 服务器上</p><ul><li><p><strong>物理层</strong>将<strong>信号</strong>变换为<strong>比特流</strong>，然后去掉<strong>前导码</strong>后成为<strong>帧</strong>，交付给<strong>数据链路层</strong></p></li><li><p><strong>数据链路层</strong>将<strong>帧</strong>的<strong>首部</strong>和<strong>尾部</strong>去掉后成为<strong>IP数据报</strong>，将其交付给<strong>网络层</strong></p></li><li><p><strong>网络层</strong>将<strong>IP数据报</strong>的<strong>首部</strong>去掉后成为<strong>TCP报文段</strong>，将其交付给<strong>运输层</strong></p></li><li><p><strong>运输层</strong>将<strong>TCP报文段</strong>的<strong>首部</strong>去掉后成为<strong>HTTP请求报文</strong>，将其交付给<strong>应用层</strong></p></li><li><p><strong>应用层</strong>对<strong>HTTP请求报文</strong>进行<strong>解析</strong>，然后给主机发回<strong>响应报文</strong></p></li></ul><p><strong>发回响应报文的步骤和之前过程类似</strong></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d9f5b6ce408c252b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="4、计算机网络体系结构中的专用术语"><a href="#4、计算机网络体系结构中的专用术语" class="headerlink" title="4、计算机网络体系结构中的专用术语"></a>4、计算机网络体系结构中的专用术语</h4><p>以下介绍的专用术语来源于OSI的七层协议体系结构，但也适用于TCP&#x2F;IP的四层体系结构和五层协议体系结构</p><p><strong>实体</strong>entity</p><blockquote><p>表示任何发送或接受信息的硬件或软件进程</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-b4c748c8f731e416.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>协议</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-01d621fd0afde0a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>协议：控制两个对等实体进行逻辑通信的规则的集合</p><p>协议三要素：</p><ul><li><p>语法：定义所交换信息的格式</p></li><li><p>语义：定义收发双方所要完成的操作</p></li><li><p>同步：定义收发双发的时序关系</p></li></ul></blockquote><p><strong>服务</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-b3d7eb63257d9914.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>透明：实际上存在，但看起来不存在。(透明玻璃门)</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f24a75796ed2c7f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f9bd7898a7f2dadd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h3 id="1-6、新兴技术"><a href="#1-6、新兴技术" class="headerlink" title="1.6、新兴技术"></a>1.6、新兴技术</h3><h4 id="1、云计算"><a href="#1、云计算" class="headerlink" title="1、云计算"></a>1、云计算</h4><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209050856805.png" alt="image-20220905085606669"></p><p>云计算服务类型：</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209050858193.png" alt="image-20220905085800118"></p><blockquote><p>PaaS在Iaas上开发，给用户提供应用程序的开发环境。</p><p>SaaS将某些特定的软件功能封装成服务，给用户租赁使用。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190904220012497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N4dTEyMzMyMQ==,size_16,color_FFFFFF,t_70" alt="img"></p><p>IaaS：Infrastructure-as-a-Service(基础设施即服务)<br><strong>第一层叫做IaaS</strong><br>举例：几年前如果你想在办公室或者公司的网站上运行一些企业应用，你需要去买服务器，或者别的高昂的硬件来控制本地应用，才能让你的业务正常运行。<br>但现在可以租用IaaS公司提供的场外服务器，存储和网络硬件。这样一来，便大大的节省了维护成本和办公场地。<br>PaaS：Platform-as-a-Service(平台即服务)<br><strong>第二层就是所谓的PaaS</strong><br>举例： PaaS公司在网上提供各种开发和分发应用的解决方案，比如虚拟服务器和操作系统。这节省了你在硬件上的费用，也让分散的工作室之间的合作变得更加容易。网页应用管理，应用设计，应用虚拟主机，存储，安全以及应用开发协作工具等。<br>SaaS：Software-as-a-Service(软件即服务)<br><strong>第三层也就是所谓SaaS</strong><br>举例：生活中，几乎我们每一天都在接触SaaS云服务，比如：我们平时使用的苹果手机云服务，网页中的一些云服务等。</p><h4 id="2、物联网"><a href="#2、物联网" class="headerlink" title="2、物联网"></a>2、物联网</h4><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209050905576.png" alt="image-20220905090555499"></p><p>物联网三种基本的应用模式</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209050911211.png" alt="image-20220905091139119"></p><h2 id="二、物理层"><a href="#二、物理层" class="headerlink" title="二、物理层"></a>二、物理层</h2><h3 id="2-1、物理层的基本概念"><a href="#2-1、物理层的基本概念" class="headerlink" title="2.1、物理层的基本概念"></a>2.1、物理层的基本概念</h3><p><img src="https://upload-images.jianshu.io/upload_images/24878825-9b987d868b26c714.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="2-2、物理层下面的传输媒体"><a href="#2-2、物理层下面的传输媒体" class="headerlink" title="2.2、物理层下面的传输媒体"></a>2.2、物理层下面的传输媒体</h3><p><strong>传输媒体</strong>也称为传输介质或传输媒介，他就是数据传输系统中在发送器和接收器之间的物理通路。<strong>传输媒体</strong>课分为两大类，即<strong>导引型传输媒体</strong>和<strong>非导引型传输媒体</strong></p><p>传输媒体不属于计算机网络体系结构的任何一层。如果非要将它添加到体系结构中，那只能将其放置到物理层之下。</p><h4 id="1、导引型传输媒体"><a href="#1、导引型传输媒体" class="headerlink" title="1、导引型传输媒体"></a>1、导引型传输媒体</h4><p>在导引型传输媒体中，电磁波被导引沿着固体媒体传播。</p><p><strong>同轴电缆</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-50d3acc8eff03935.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>双绞线</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-692dde0bbbc49a1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>线的顺序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">568B 白橙 橙 白绿 蓝 白蓝 绿 白棕 棕</span><br><span class="line">568A 13换 26换</span><br></pre></td></tr></table></figure><p><strong>光纤</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-fc85597b91c2cd7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-060d940d8451692e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p><strong>多模光纤</strong></p><ul><li>可以存在多条不同角度入射的光线在一条光纤中传输。这种光纤就称为<strong>多模光纤</strong>。</li><li>直径50-60微米</li><li>头发丝60-90微米</li></ul><p><strong>单模光纤</strong></p><ul><li>若光纤的直径减小到只有一个光的波长，则光纤就像一根波导那样，它可使光线一直向前传播，而不会产生多次反射。这样的光纤称为<strong>单模光纤</strong>。</li><li>直径8-10微米</li></ul></blockquote><p><strong>电力线</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-2c23cb1d18aa345c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1175/format/webp" alt="img"></p><h4 id="2、非导引型传输媒体"><a href="#2、非导引型传输媒体" class="headerlink" title="2、非导引型传输媒体"></a>2、非导引型传输媒体</h4><p>优点：</p><ul><li>使用频段广。</li><li>使用方便。</li></ul><p>缺点：</p><ul><li>保密性不好。</li><li>易受外界干扰。</li></ul><p>非导引型传输媒体是指自由空间。</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-8432039f51003722.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d2a8692970355b05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>无线电波</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-357bc29ed7591006.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>微波</strong></p><p>微波主要是直线传播</p><p>增大传播距离的话：</p><ul><li>地面微波接力通信</li><li>卫星通信(较大的传播时延)</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f042b478ef808a1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>红外线</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-95eac658ca822ab2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>可见光</strong></p><p><a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/%E5%8F%AF%E8%A7%81%E5%85%89%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1/16268518?fromtitle=LiFi&fromid=5675729&fr=aladdin">LIFI</a></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-e1bc3e93ff50114b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="2-3、传输方式"><a href="#2-3、传输方式" class="headerlink" title="2.3、传输方式"></a>2.3、传输方式</h3><h4 id="1、串行传输和并行传输"><a href="#1、串行传输和并行传输" class="headerlink" title="1、串行传输和并行传输"></a>1、串行传输和并行传输</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-54b03a1b4fd3cdd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/787/format/webp" alt="img"></p><blockquote><p><strong>串行传输</strong>：</p><ul><li>数据是<code>一个比特一个比特依次发送</code>的，因此在发送端与接收端之间，只需要一条数据传输线路即可</li></ul><p><strong>并行传输</strong>：</p><ul><li><p><code>一次发送n个比特</code>，因此，在发送端和接收端之间需要有n条传输线路</p></li><li><p>并行传输的优点是比串行传输的速度n倍，但成本高</p></li></ul><p>数据在传输线路上的传输采用是<strong>串行传输</strong>，计算机内部的数据传输常用<strong>并行传输</strong></p></blockquote><h4 id="2、同步传输和异步传输"><a href="#2、同步传输和异步传输" class="headerlink" title="2、同步传输和异步传输"></a>2、同步传输和异步传输</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-15060e3d8de110ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p><strong>同步传输</strong>：</p><ul><li><p>数据块以稳定的比特流的形式传输。字节之间没有间隔</p></li><li><p>接收端在每个比特信号的中间时刻进行检测，以判别接收到的是比特0还是比特1</p></li><li><p>由于不同设备的时钟频率存在一定差异，不可能做到完全相同，在传输大量数据的过程中，所产生的判别时刻的累计误差，会导致接收端对比特信号的判别错位</p></li></ul><p>所以要使收发双发时钟保持同步</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-19cfd094ecef0538.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p><strong>异步传输</strong>：</p><ul><li><p>以字节为独立的传输单位，字节之间的时间间隔不是固定</p></li><li><p>接收端仅在每个字节的起始处对字节内的比特实现同步</p></li><li><p>通常在每个字节前后分别加上起始位和结束位</p></li></ul></blockquote><h4 id="3、单向通信（单工）、双向交替通信（半双工）和双向同时通信（全双工）"><a href="#3、单向通信（单工）、双向交替通信（半双工）和双向同时通信（全双工）" class="headerlink" title="3、单向通信（单工）、双向交替通信（半双工）和双向同时通信（全双工）"></a>3、单向通信（单工）、双向交替通信（半双工）和双向同时通信（全双工）</h4><p>在许多情况下，我们要使用“<strong>信道（channel）</strong>”这一名词。信道和电路并不等同。信道一般都是用来表示向某一个方向传送信息的媒体。因此，一条通信电路往往包含一条发送信道和一条接收信道。</p><p>从通信的双方信息交互的方式来看，可以有以下三种基本方式：</p><p><strong>单向通信</strong>：</p><p>又称为<strong>单工通信</strong>，即只能有一个方向的通信而没有反方向的交互。无线电广播或有线电以及电视广播就属于这种类型</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5b07729ff4cd3411.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>双向交替通信</strong>：</p><p>又称为<strong>半双工通信</strong>，即通信的双方可以发送信息，但不能双方同时发送（当然也就不能同时接收）。这种通信方式使一方发送另一方接收，过一段时间后可以再反过来</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-e0f90a502a95d1b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>双向同时通信</strong>：</p><p>又称为<strong>全双工通信</strong>，即通信的双发可以同时发送和接收信息。</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-68977b7eeac3b7f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p><strong>单向通信</strong>只需要一条信道，而<strong>双向交替通信</strong>或<strong>双向同时通信</strong>则需要两条信道（每个方向各一条）</p><p><strong>双向同时通信</strong>的传输效率最高</p></blockquote><h3 id="2-4、编码与调制"><a href="#2-4、编码与调制" class="headerlink" title="2.4、编码与调制"></a>2.4、编码与调制</h3><p><img src="https://upload-images.jianshu.io/upload_images/24878825-acc59055804f0890.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p><strong>常用术语</strong></p><ul><li><p>消息(message)—-文字，图片，音频，视频</p></li><li><p><strong>数据 (data)</strong> —— 运送消息的实体。</p></li><li><p><strong>信号 (signal)</strong> —— 数据的电气的或电磁的表现。</p></li><li><p><strong>模拟信号 (analogous signal)</strong> —— 代表消息的参数的取值是连续的。</p></li><li><p><strong>数字信号 (digital signal)</strong> —— 代表消息的参数的取值是离散的。</p></li><li><p><strong>码元 (code)</strong> —— 在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形。</p></li><li><p><strong>基带信号</strong>（即基本频带信号）—— 来自信源的信号。像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。</p></li><li><p>基带信号往往包含有较多的低频成分，甚至有直流成分，而许多信道并不能传输这种低频分量或直流分量。因此必须对基带信号进行<strong>调制</strong> (modulation)。</p></li></ul></blockquote><p>在计算机网络中，常见的是将数字基带信号通过编码或调制的方法在相应信道进行传输</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ded8a3e566f7687b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/715/format/webp" alt="img"></p><h4 id="1、传输媒体与信道的关系"><a href="#1、传输媒体与信道的关系" class="headerlink" title="1、传输媒体与信道的关系"></a>1、<strong>传输媒体与信道的关系</strong></h4><blockquote><p><strong>信道的几个基本概念</strong></p><ul><li><p><strong>信道</strong> —— 一般用来表示向某一个方向传送信息的媒体。</p></li><li><p><strong>单向通信（单工通信）</strong>——只能有一个方向的通信而没有反方向的交互。</p></li><li><p><strong>双向交替通信（半双工通信）</strong>——通信的双方都可以发送信息，但不能双方同时发送(当然也就不能同时接收)。</p></li><li><p><strong>双向同时通信（全双工通信）</strong>——通信的双方可以同时发送和接收信息。</p></li></ul></blockquote><p>严格来说，传输媒体不能和信道划等号</p><p>对于单工传输，传输媒体只包含一个信道，要么是发送信道，要么是接收信道</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-414f829a7df390e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/893/format/webp" alt="img"></p><p>对于半双工和全双工，传输媒体中要包含两个信道，一个发送信道，另一个是接收信道</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d3b3583526407c45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/827/format/webp" alt="img"></p><blockquote><p>如果使用信道复用技术，一条传输媒体还可以包含多个信道</p></blockquote><h4 id="2、常用编码"><a href="#2、常用编码" class="headerlink" title="2、常用编码"></a>2、常用编码</h4><p><strong>不归零编码</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-2f6b70fef84339ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><ul><li><p>正电平表示比特1&#x2F;0</p></li><li><p>负电平表示比特0&#x2F;1</p></li></ul><p>中间的虚线是零电平，所谓不归零编码，就是指在整个码元时间内，电平不会出现零电平</p><p><strong>实际比特1和比特0的表示要看现实怎么规定</strong></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0732d0edc74846b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>这需要发送方的发送与接收方的接收做到严格的同步</p><ul><li><p>需要<strong>额外一根传输线来传输时钟信号</strong>，使发送方和接收方同步，接收方按时钟信号的节拍来逐个接收码元</p></li><li><p><strong>但是</strong>对于计算机网络，<strong>宁愿利用这根传输线传输数据信号</strong>，而不是传输时钟信号</p></li></ul><p>由于<strong>不归零编码</strong>存在<strong>同步问题</strong>，因此计算机网络中的数据传输不采用这类编码！</p></blockquote><p><strong>归零编码</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-8aa838a116fdafb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-2fa351ff35477f1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/723/format/webp" alt="img"></p><blockquote><p><strong>归零编码</strong>虽然<strong>自同步</strong>，但<strong>编码效率低</strong></p></blockquote><p><strong>曼彻斯特编码</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a34a686a9d052e9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>在每个码元时间的中间时刻，信号都会发生跳变</p><ul><li><p>负跳变表示比特1&#x2F;0</p></li><li><p>正跳变表示比特0&#x2F;1</p></li><li><p>码元中间时刻的跳变即表示时钟，又表示数据</p></li></ul><p><strong>实际比特1和比特0的表示要看现实怎么规定</strong></p><p>传统以太网使用的就是曼切斯特编码</p></blockquote><p><strong>差分曼彻斯特编码</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-9a758474e374329a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>在每个码元时间的中间时刻，信号都会发送跳变，但与<strong>曼彻斯特不同</strong></p><ul><li><p><strong>跳变仅表示时钟</strong></p></li><li><p><strong>码元开始处电平是否变换表示数据</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*   变化表示比特1/0</span><br><span class="line">*   不变化表示比特0/1</span><br></pre></td></tr></table></figure><p><strong>实际比特1和比特0的表示要看现实怎么规定</strong></p><p>比曼彻斯特编码变化少，更适合较高的传输速率</p></blockquote><p><strong>总结</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-de92dd43d328b4f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="3、调制"><a href="#3、调制" class="headerlink" title="3、调制"></a>3、调制</h4><p>数字信号转换为模拟信号，在模拟信道中传输，例如WiFi，采用补码键控CCK&#x2F;直接序列扩频DSSS&#x2F;正交频分复用OFDM等<strong>调制</strong>方式。</p><p>模拟信号转换为另一种模拟信号，在模拟信道中传输，例如，语音数据加载到模拟的载波信号中传输。频分复用FDM技术，充分利用带宽资源。</p><p><strong>基本调制方法</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-7ce461637de91b6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><ul><li><p><strong>调幅AM</strong>：所调制的信号由两种不同振幅的基本波形构成。每个基本波形只能表示1比特信息量。</p></li><li><p><strong>调频FM</strong>：所调制的信号由两种不同频率的基本波形构成。每个基本波形只能表示1比特信息量。</p></li><li><p><strong>调相PM</strong>：所调制的信号由两种不同初相位的基本波形构成。每个基本波形只能表示1比特信息量。</p></li></ul><p>但是使用基本调制方法，1个码元只能包含1个比特信息</p></blockquote><p><strong>混合调制</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-8fec8ccb7ff3ea77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/680/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-30e70220d4127135.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-1cb6de826ba63b70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-600f7802e1eaa18a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>上图码元所对应的4个比特是错误的，码元不能随便对应4个比特</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-1e2617434d904ce4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="4、码元"><a href="#4、码元" class="headerlink" title="4、码元"></a>4、码元</h4><p>在使用时间域的波形表示数字信号时，代表不同离散数值的基本波形。</p><h3 id="2-5、信道的极限容量"><a href="#2-5、信道的极限容量" class="headerlink" title="2.5、信道的极限容量"></a>2.5、信道的极限容量</h3><ul><li>任何实际的信道都不是理想的，在传输信号时会产生各种失真以及带来多种干扰。</li><li>码元传输的速率越高，或信号传输的距离越远，或传输媒体质量越差，在信道的输出端的波形的失真就越严重。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0a9bbf5bcd5e8226.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>失真的原因：</p><ul><li>码元传输的速率越高</li><li>信号传输的距离越远</li><li>噪声干扰越大</li><li>传输媒体质量越差</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-b90918937a54faa6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-57e105e5df793b93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>奈氏准则和香农公式对比：</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5ce50e745950c8eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=lamda/f</span><br><span class="line">f大 lamda(波长)小  折光率小  传输速率高</span><br></pre></td></tr></table></figure><h3 id="2-6、补充：信道复用技术"><a href="#2-6、补充：信道复用技术" class="headerlink" title="2.6、补充：信道复用技术"></a>2.6、补充：信道复用技术</h3><p>本节内容视频未讲到，是《计算机网络（第7版）谢希仁》物理层的内容</p><h4 id="1、频分复用、时分复用和统计时分复用"><a href="#1、频分复用、时分复用和统计时分复用" class="headerlink" title="1、频分复用、时分复用和统计时分复用"></a>1、频分复用、时分复用和统计时分复用</h4><p><code>复用</code> (multiplexing) 是通信技术中的基本概念。</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209070948991.png" alt="image-20220907094842852"></p><p>它允许用户使用一个共享信道进行通信，降低成本，提高利用率。</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-8503f147c44d220f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>频分复用 FDM (Frequency Division Multiplexing)</strong></p><ul><li><p>将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</p></li><li><p><strong>频分复用</strong>: 所有用户在同样的时间<strong>占用不同的带宽资源</strong>。</p><p>（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）。</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-bcb9321a6a8a3d7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/425/format/webp" alt="img"></p><p><strong>时分复用TDM (Time Division Multiplexing)</strong></p><ul><li><strong>时分复用</strong>则是将时间划分为一段段等长的<strong>时分复用帧（TDM帧）</strong>。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</li><li>每一个用户所占用的时隙是<strong>周期性地出现</strong>（其周期就是TDM帧的长度）的。</li><li>TDM 信号也称为<strong>等时</strong> (isochronous) 信号。</li><li><strong>时分复用的所有用户在不同的时间占用同样的频带宽度。</strong></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-cb9a20b7ce00d497.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><ul><li><strong>时分复用可能会造成线路资源的浪费</strong><ul><li>使用时分复用系统传送计算机数据时，由于计算机数据的突发性质，用户对分配到的子信道的利用率一般是不高的。</li></ul></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c1ef02caf1f2cfda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>统计时分复用 STDM (Statistic TDM)</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-7f0b54d1c14702ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="2、波分复用"><a href="#2、波分复用" class="headerlink" title="2、波分复用"></a>2、波分复用</h4><p>波分复用 WDM(Wavelength Division Multiplexing)</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-039cdf67599ebe3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="3、码分复用"><a href="#3、码分复用" class="headerlink" title="3、码分复用"></a>3、码分复用</h4><p>码分复用 CDM (Code Division Multiplexing)</p><ul><li><p>常用的名词是<strong>码分多址</strong> CDMA (Code Division Multiple Access)。</p></li><li><p>各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。</p></li><li><p>这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现</p></li><li><p>每个站被指派一个唯一的m bit码片序列。<img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209070959799.png" alt="image-20220907095947736"><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209071000511.png" alt="image-20220907100030447"></p></li><li><p>每个站分配的码片序列不仅必须各不相同，并且还必须互相正交</p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209071001180.png" alt="image-20220907100157104"></p></li></ul><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209071003875.png" alt="image-20220907100341773"></p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209071004544.png" alt="image-20220907100459454"></p><h3 id="2-7、数据通信基础知识"><a href="#2-7、数据通信基础知识" class="headerlink" title="2.7、数据通信基础知识"></a>2.7、数据通信基础知识</h3><h4 id="1、数据通信系统的模型"><a href="#1、数据通信系统的模型" class="headerlink" title="1、数据通信系统的模型"></a>1、数据通信系统的模型</h4><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209050939203.png" alt="image-20220905093934114"></p><h4 id="2、几个术语"><a href="#2、几个术语" class="headerlink" title="2、几个术语"></a>2、几个术语</h4><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209050941323.png" alt="image-20220905094143239"></p><h4 id="3、编码与调制"><a href="#3、编码与调制" class="headerlink" title="3、编码与调制"></a>3、编码与调制</h4><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209050945884.png" alt="image-20220905094514786"></p><ul><li><p>数字数据转换成数字信号称为<code>编码</code></p></li><li><p>数字数据转化为模拟信号称为<code>调制</code></p></li></ul><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209050956678.png" alt="image-20220905095624573"></p><h3 id="2-8、最后一公里"><a href="#2-8、最后一公里" class="headerlink" title="2.8、最后一公里"></a>2.8、最后一公里</h3><blockquote><ol><li>电话网接入</li><li>ADSL接入</li><li>光纤同轴混合网HFC</li><li>用户机顶盒</li><li>无线接入</li></ol></blockquote><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209140858701.png" alt="image-20220914085850551"></p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209140900494.png" alt="image-20220914090004395"></p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209140906825.png" alt="image-20220914090615720"></p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209140909715.png" alt="image-20220914090924625"></p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209140911514.png" alt="image-20220914091156413"></p><p><img src="C:/Users/huangruidong/AppData/Roaming/Typora/typora-user-images/image-20220914093143805.png" alt="image-20220914093143805"></p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209140938392.png" alt="image-20220914093809273"></p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209140949987.png" alt="image-20220914094946888"></p><h2 id="三、数据链路层"><a href="#三、数据链路层" class="headerlink" title="三、数据链路层"></a>三、数据链路层</h2><h3 id="3-1、数据链路层概述"><a href="#3-1、数据链路层概述" class="headerlink" title="3.1、数据链路层概述"></a>3.1、数据链路层概述</h3><h4 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h4><p><strong>链路</strong>是从一个结点到相邻结点的一段物理线路，<strong>数据链路</strong>则是在链路的基础上增加了一些必要的硬件（如网络适配器）和软件（如协议的实现）</p><p><strong>网络中的主机、路由器等都必须实现数据链路层</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-72eec9c2f5da1885.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>局域网中的主机、交换机等都必须实现数据链路层</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-4f088da1859e7e90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/785/format/webp" alt="img"></p><p><strong>从层次上来看数据的流动</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-11c77ea98c206763.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>仅从数据链路层观察帧的流动</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6a1acd1ad2a6c1eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-1dacf9fe20464222.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209190841810.png" alt="image-20220919084056636"></p><blockquote><p>主机H1 到主机H2 所经过的网络可以是多种不同类型的</p><p><strong>注意：不同的链路层可能采用不同的数据链路层协议</strong></p><p>一条链路只是一条通路的一个组成部分。</p></blockquote><p><strong>数据链路层使用的信道</strong></p><p>数据链路层属于计算机网路的低层。<strong>数据链路层使用的信道主要有以下两种类型：</strong></p><ul><li>点对点信道</li><li>广播信道</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0f0962eb5fccf66f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/923/format/webp" alt="img"></p><blockquote><p><strong>局域网属于数据链路层</strong></p><p>局域网虽然是个网络。但我们并不把局域网放在网络层中讨论。这是因为在网络层要讨论的是多个网络互连的问题，是讨论分组怎么从一个网络，通过路由器，转发到另一个网络。</p><p>而在同一个局域网中，分组怎么从一台主机传送到另一台主机，但并不经过路由器转发。从整个互联网来看，<strong>局域网仍属于数据链路层</strong>的范围</p></blockquote><h4 id="2、三个重要问题"><a href="#2、三个重要问题" class="headerlink" title="2、三个重要问题"></a>2、三个重要问题</h4><p>数据链路层传送的协议数据单元是<strong>帧</strong></p><p><strong>封装成帧</strong></p><ul><li><strong>封装成帧</strong> (framing) 就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。</li><li>首部和尾部的一个重要作用就是进行<strong>帧定界</strong>。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-1ad51faea9b7b205.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>差错检测</strong></p><p>在传输过程中可能会产生<strong>比特差错</strong>：1 可能会变成 0， 而 0 也可能变成 1。</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-82811736b014aa98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>可靠传输</strong></p><p>接收方主机收到有误码的帧后，是不会接受该帧的，会将它丢弃</p><p>如果数据链路层向其上层提供的是不可靠服务，那么丢弃就丢弃了，不会再有更多措施</p><p><strong>如果数据链路层向其上层提供的是可靠服务，那就还需要其他措施，来确保接收方主机还可以重新收到被丢弃的这个帧的正确副本</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0d2fd9bb2602bf28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>以上三个问题都是使用<strong>点对点信道的数据链路层</strong>来举例的</p></blockquote><p><strong>如果使用广播信道的数据链路层除了包含上面三个问题外，还有一些问题要解决</strong></p><p>如图所示，主机A，B，C，D，E通过一根总线进行互连，主机A要给主机C发送数据，代表帧的信号会通过总线传输到总线上的其他各主机，那么主机B，D，E如何知道所收到的帧不是发送给她们的，主机C如何知道发送的帧是发送给自己的</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-34c5f707bef17f14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>可以用编址（地址）的来解决</p><p>将帧的目的地址添加在帧中一起传输</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-abbf8309faf2ebf1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>还有数据碰撞问题</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-92422213075fe0e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>随着技术的发展，交换技术的成熟，</p><p>在 有线（局域网）领域 使用<strong>点对点链路</strong>和<strong>链路层交换机</strong>的<strong>交换式局域网</strong>取代了<del>共享式局域网</del></p><p>在无线局域网中仍然使用的是共享信道技术</p></blockquote><hr><h3 id="3-2、封装成帧"><a href="#3-2、封装成帧" class="headerlink" title="3.2、封装成帧"></a>3.2、封装成帧</h3><h4 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h4><p>封装成帧是指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧</p><ul><li><strong>帧头和帧尾中包含有重要的控制信息</strong></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-bf6fe42eeea3f376.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>发送方的数据链路层将上层交付下来的协议数据单元封装成帧后，还要通过物理层，将构成帧的各比特，转换成电信号交给传输媒体，那么接收方的数据链路层如何从物理层交付的比特流中提取出一个个的帧？</p><p>答：需要帧头和帧尾来做<strong>帧定界</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-3a36c2a60343962c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>但比不是每一种数据链路层协议的帧都包含有帧定界标志，例如下面例子</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f1441c531b4d740e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>前导码</p><ul><li><p>前同步码：作用是使接收方的时钟同步</p></li><li><p>帧开始定界符：表明其后面紧跟着的就是MAC帧</p></li></ul></blockquote><p>另外以太网还规定了帧间间隔为96比特时间，因此，MAC帧不需要帧结束定界符</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-eee524ce4e17f0e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="2、透明传输"><a href="#2、透明传输" class="headerlink" title="2、透明传输"></a>2、透明传输</h4><blockquote><p><strong>透明</strong></p><p>指某一个实际存在的事物看起来却好像不存在一样。</p></blockquote><p>透明传输是指<strong>数据链路层对上层交付的传输数据没有任何限制</strong>，好像数据链路层不存在一样</p><p>帧界定标志也就是个特定数据值，如果在上层交付的协议数据单元中， 恰好也包含这个特定数值，接收方就不能正确接收</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-12fe81306aedad15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>所以数据链路层应该对上层交付的数据有限制，其内容不能包含帧定界符的值</p></blockquote><p><strong>解决透明传输问题</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-645dde5eed8eceb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><ul><li><strong>解决方法</strong>：面向字节的物理链路使用<strong>字节填充</strong> (byte stuffing) 或<strong>字符填充</strong> (character stuffing)，面向比特的物理链路使用比特填充的方法实现透明传输</li><li>发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面<strong>插入一个转义字符“ESC”</strong>(其十六进制编码是1B)。</li><li>接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。</li><li>如果转义字符也出现在数据当中，那么应在转义字符前面插入一个转义字符 ESC。当接收端收到连续的两个转义字符时，就删除其中前面的一个。</li></ul><p><strong>帧的数据部分长度</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-9d3f61fdd96b7dee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6d39c2f162ddcae5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="3-3、差错检测"><a href="#3-3、差错检测" class="headerlink" title="3.3、差错检测"></a>3.3、差错检测</h3><h4 id="1、介绍-1"><a href="#1、介绍-1" class="headerlink" title="1、介绍"></a>1、介绍</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-fa8e42040c9adf41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>误码率和信噪比有很大关系，信噪比越大，误码率越大。</p></blockquote><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209190909572.png" alt="image-20220919090845767"></p><h4 id="2、奇偶校验"><a href="#2、奇偶校验" class="headerlink" title="2、奇偶校验"></a>2、奇偶校验</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-8a049d137b19e372.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="3、循环冗余校验CRC-Cyclic-Redundancy-Check"><a href="#3、循环冗余校验CRC-Cyclic-Redundancy-Check" class="headerlink" title="3、循环冗余校验CRC(Cyclic Redundancy Check)"></a>3、循环冗余校验CRC(Cyclic Redundancy Check)</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-190a469aba121c1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-e3a6540cad78b41e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>例题</strong></p><p><code>按位异或</code></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-52140f44375b471a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-01ea200a849a5e31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>总结</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5b743916f5355e14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>循环冗余校验 CRC 是一种检错方法，而帧校验序列 FCS 是添加在数据后面的冗余码</p></blockquote><hr><h3 id="3-4、可靠传输"><a href="#3-4、可靠传输" class="headerlink" title="3.4、可靠传输"></a>3.4、可靠传输</h3><h4 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h4><p><strong>下面是比特差错</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-570f7783660d9c10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>其他传输差错</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-1a955429af0480a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><ul><li>分组丢失</li></ul><p>路由器输入队列快满了，主动丢弃收到的分组</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f805603357f3a3a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><ul><li>分组失序</li></ul><p>数据并未按照发送顺序依次到达接收端</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6fdae389d4679bf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><ul><li>分组重复</li></ul><p>由于某些原因，有些分组在网络中滞留了，没有及时到达接收端，这可能会造成发送端对该分组的重发，重发的分组到达接收端，但一段时间后，滞留在网络的分组也到达了接收端，这就造成<strong>分组重复</strong>的传输差错</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-88599fefa01ee548.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="2、三种可靠协议"><a href="#2、三种可靠协议" class="headerlink" title="2、三种可靠协议"></a>2、三种可靠协议</h4><ul><li>停止-等待协议SW</li><li>回退N帧协议GBN</li><li>选择重传协议SR</li></ul><blockquote><p>这三种可靠传输实现机制的基本原理并不仅限于数据链路层，可以应用到计算机网络体系结构的各层协议中</p></blockquote><h5 id="2-1、停止-等待协议"><a href="#2-1、停止-等待协议" class="headerlink" title="2.1、停止-等待协议"></a>2.1、停止-等待协议</h5><blockquote><p>停止-等待协议可能遇到的四个问题</p></blockquote><p><strong>确认与否认</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-68772b26b0ef0d3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/518/format/webp" alt="img"></p><p><strong>超时重传</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-af381efb26eee719.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>确认丢失</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-e30648ec8764ab02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/958/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-34bf2b8a370feab8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/462/format/webp" alt="img"></p><blockquote><p>既然数据分组需要编号，确认分组是否需要编号？</p><p>要。如下图所示</p></blockquote><p><strong>确认迟到</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-da5036b780359576.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/486/format/webp" alt="img"></p><blockquote><p>注意，图中最下面那个数据分组与之前序号为0的那个数据分组不是同一个数据分组</p></blockquote><p><strong>注意事项</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-8dbdfdbac8087fd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="2-2、停止-等待协议的信道利用率"><a href="#2-2、停止-等待协议的信道利用率" class="headerlink" title="2.2、停止-等待协议的信道利用率"></a>2.2、停止-等待协议的信道利用率</h5><p>假设收发双方之间是一条直通的信道</p><ul><li><strong>TD</strong>：是发送方发送数据分组所耗费的发送时延</li><li><strong>RTT</strong>：是收发双方之间的往返时间</li><li><strong>TA</strong>：是接收方发送确认分组所耗费的发送时延</li></ul><p>TA一般都远小于TD，可以忽略，当RTT远大于TD时，信道利用率会非常低</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-3b4b0d81e5dd78eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-4015447553ed26b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/888/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-372ef347c338b585.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>像停止-等待协议这样通过确认和重传机制实现的可靠传输协议，常称为自动请求重传协议ARQ(<strong>A</strong>utomatic <strong>R</strong>epeat re<strong>Q</strong>uest)，意思是重传的请求是自动进行，因为不需要接收方显式地请求，发送方重传某个发送的分组</p></blockquote><p><img src="https://gitee.com/messi-study-java/pic_go/raw/master/img/202209190948239.png" alt="image-20220919094803119"></p><h5 id="2-3、回退N帧协议GBN-Go-Back-N"><a href="#2-3、回退N帧协议GBN-Go-Back-N" class="headerlink" title="2.3、回退N帧协议GBN(Go Back N)"></a>2.3、回退N帧协议GBN(Go Back N)</h5><blockquote><p>为什么用回退N帧协议？</p></blockquote><p>在相同的时间内，使用停止-等待协议的发送方只能发送一个数据分组，而采用流水线传输的发送方，可以发送多个数据分组</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-cc9d42f63bd259cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>回退N帧协议在流水线传输的基础上，利用发送窗口来限制发送方可连续发送数据分组的个数</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-2a7141766ab1aa80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>无差错情况流程</p></blockquote><p>发送方将序号落在发送窗口内的0~4号数据分组，依次连续发送出去</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-eee45713110af40a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>他们经过互联网传输正确到达接收方，就是没有乱序和误码，接收方按序接收它们，每接收一个，接收窗口就向前滑动一个位置，并给发送方发送针对所接收分组的确认分组，在通过互联网的传输正确到达了发送方</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-13f6dabf165db4e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>发送方每接收一个、发送窗口就向前滑动一个位置，这样就有新的序号落入发送窗口，发送方可以将收到确认的数据分组从缓存中删除了，而接收方可以择机将已接收的数据分组交付上层处理</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0dfe16aee5eb8d75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p><strong>累计确认</strong></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-1414be9bd8307609.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>累计确认</p><p>优点:</p><ul><li><p>即使确认分组丢失，发送方也可能不必重传</p></li><li><p>减小接收方的开销</p></li><li><p>减小对网络资源的占用</p></li></ul><p>缺点：</p><ul><li>不能向发送方及时反映出接收方已经正确接收的数据分组信息</li></ul></blockquote><blockquote><p><strong>有差错情况</strong></p></blockquote><p>例如</p><p>在传输数据分组时，5号数据分组出现误码，接收方通过数据分组中的检错码发现了错误</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-7a8c7e3ec6ebaca6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>于是丢弃该分组，而后续到达的这剩下四个分组与接收窗口的序号不匹配</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-7621ee1bc4ab1619.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>接收方同样也不能接收它们，将它们丢弃，（因为他们<code>失序</code>了）并对之前按序接收的最后一个数据分组进行确认，发送ACK4，<strong>每丢弃一个数据分组，就发送一个ACK4</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c3f86dad2611e347.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>当收到重复的ACK4时，就知道之前所发送的数据分组出现了差错，于是可以不等超时计时器超时就立刻开始重传，具体收到几个重复确认就立刻重传，根据具体实现决定</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-215e8704b22ef7f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>如果收到这4个重复的确认并不会触发发送立刻重传，一段时间后。超时计时器超时，也会将发送窗口内以发送过的这些数据分组全部重传</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-1df324a9b09dffb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>若WT超过取值范围，例如WT&#x3D;8，会出现什么情况？</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d2789fe0732f13ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>习题</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-23afd873fb1ef8d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>总结</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0d5f64664d096287.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><ul><li>回退N帧协议在流水线传输的基础上利用发送窗口来限制发送方连续发送数据分组的数量，是一种连续ARQ协议</li><li>在协议的工作过程中发送窗口和接收窗口不断向前滑动，因此这类协议又称为滑动窗口协议</li><li>由于回退N帧协议的特性，当通信线路质量不好时，其信道利用率并不比停止-等待协议高</li></ul><h5 id="2-4、选择重传协议SR"><a href="#2-4、选择重传协议SR" class="headerlink" title="2.4、选择重传协议SR"></a>2.4、选择重传协议SR</h5><blockquote><p>解决回退N帧协议，一个帧丢失，全部重传。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-2ab9c838fac0cb24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><a href="https://links.jianshu.com/go?to=https://www.bilibili.com/video/BV1c4411d7jb?p=27">具体流程请看视频</a></p><p>增大接收窗口的大小，把发送的数据存储在缓存中，收到ACK确认，删除缓存，收到错误信息，重传。</p><p><strong>习题</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-dfeaa84ab40845d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>总结</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-bcb835b2adac5b3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-dab51e8895eb9313.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="3-5、点对点协议PPP"><a href="#3-5、点对点协议PPP" class="headerlink" title="3.5、点对点协议PPP"></a>3.5、点对点协议PPP</h3><ul><li>点对点协议PPP（Point-to-Point Protocol）是目前使用最广泛的点对点数据链路层协议</li><li>PPP协议是因特网工程任务组IEIF在1992年制定的。经过1993年和1994年的修订，现在的PPP协议已成为因特网的正式标准[RFC1661，RFC1662]</li><li>数据链路层使用的一种协议，它的特点是：简单；只检测差错，而不是纠正差错；不使用序号，也不进行流量控制；可同时支持多种网络层协议</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-fd145efb1acc73fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><ul><li>PPPoE 是为宽带上网的主机使用的链路层协议</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-bbc4187b9e27ef4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="1、帧格式"><a href="#1、帧格式" class="headerlink" title="1、帧格式"></a>1、帧格式</h4><p>必须规定特殊的字符作为帧定界符</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-b384615e861000f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>0x0021 ip数据报</p><p>0xc021 ppp链路控制数据</p><p>0x8021 网络控制数据</p></blockquote><h4 id="2、透明传输-1"><a href="#2、透明传输-1" class="headerlink" title="2、透明传输"></a>2、透明传输</h4><p>必须保证数据传输的透明性</p><p>实现透明传输的方法</p><ul><li>面向字节的异步链路：字节填充法（插入“转义字符”）</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d40da4575c590f5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><ul><li>面向比特的同步链路：比特填充法（插入“比特0”）</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6290c73d8957ee8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="3、差错检测"><a href="#3、差错检测" class="headerlink" title="3、差错检测"></a>3、差错检测</h4><p>能够对接收端收到的帧进行检测，并立即丢弃有差错的帧。</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-501e6b9dd2afcee3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="4、工作状态"><a href="#4、工作状态" class="headerlink" title="4、工作状态"></a>4、工作状态</h4><ul><li>当用户拨号接入 ISP 时，路由器的调制解调器对拨号做出确认，并建立一条物理连接。</li><li>PC 机向路由器发送一系列的 LCP 分组（封装成多个 PPP 帧）。</li><li>这些分组及其响应选择一些 PPP 参数，并进行网络层配置，NCP 给新接入的 PC 机</li><li>分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。</li><li>通信完毕时，NCP 释放网络层连接，收回原来分配出去的 IP 地址。接着，LCP 释放数据链路层连接。最后释放的是物理层的连接。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-96bbde153c114cf8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>可见，PPP 协议已不是纯粹的数据链路层的协议，它还包含了物理层和网络层的内容。</p></blockquote><hr><h3 id="3-6、媒体接入控制（介质访问控制）——广播信道"><a href="#3-6、媒体接入控制（介质访问控制）——广播信道" class="headerlink" title="3.6、媒体接入控制（介质访问控制）——广播信道"></a>3.6、媒体接入控制（介质访问控制）——广播信道</h3><p><strong>媒体接入控制（介质访问控制）使用一对多的广播通信方式</strong></p><blockquote><p><strong>Medium Access Control</strong>翻译成媒体接入控制，有些翻译成介质访问控制</p></blockquote><p><strong>局域网的数据链路层</strong></p><ul><li>局域网最主要的<strong>特点</strong>是：<ul><li>网络为一个单位所拥有；</li><li>地理范围和站点数目均有限。</li></ul></li><li>局域网具有如下<strong>主要优点</strong>：<ul><li>具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。</li><li>便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变。</li><li>提高了系统的可靠性、可用性和残存性。</li></ul></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-4acef21a5275fab6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/849/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6a109c1bb8576571.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/847/format/webp" alt="img"></p><p><strong>数据链路层的两个子层</strong></p><p>为了使数据链路层能更好地适应多种局域网标准，IEEE 802 委员会就将局域网的数据链路层拆成<strong>两个子层</strong>：</p><ol><li><strong>逻辑链路控制</strong> LLC (Logical Link Control)子层；</li><li><strong>媒体接入控制</strong> MAC (Medium Access Control)子层。</li></ol><p>与接入到传输媒体有关的内容都放在 MAC子层，而 LLC 子层则与传输媒体无关。  <strong>不管采用何种协议的局域网，对 LLC 子层来说都是透明的。</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-faea2c7d90c97f4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/831/format/webp" alt="img"></p><h4 id="1、基本概念-1"><a href="#1、基本概念-1" class="headerlink" title="1、基本概念"></a>1、基本概念</h4><p>为什么要媒体接入控制（介质访问控制）？</p><p><strong>共享信道带来的问题</strong></p><p>若多个设备在共享信道上同时发送数据，则会造成彼此干扰，导致发送失败。</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-e8558245e4dd7086.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-3d6792f6b442b459.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>随着技术的发展，交换技术的成熟和成本的降低，具有更高性能的使用点对点链路和链路层交换机的交换式局域网在有线领域已完全取代了共享式局域网，但由于无线信道的广播天性，无线局域网仍然使用的是共享媒体技术</p></blockquote><h4 id="2、静态划分信道"><a href="#2、静态划分信道" class="headerlink" title="2、静态划分信道"></a>2、静态划分信道</h4><p><strong>信道复用</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f42ef63e4cf0d34b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>频分复用FDM (Frequency Division Multiplexing)</strong></p><ul><li>将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</li><li><strong>频分复用</strong>的所有用户在同样的时间<strong>占用不同的带宽资源</strong>（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-7b3574f649543f8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>时分复用TDM (Time Division Multiplexing)</strong></p><ul><li><strong>时分复用</strong>则是将时间划分为一段段等长的<strong>时分复用帧（TDM帧）</strong>。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</li><li>每一个用户所占用的时隙是<strong>周期性地出现</strong>（其周期就是TDM帧的长度）的。</li><li>TDM 信号也称为<strong>等时</strong> (isochronous) 信号。</li><li><strong>时分复用的所有用户在不同的时间占用同样的频带宽度。</strong></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-85128fb198aad76c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>波分复用 WDM(Wavelength Division Multiplexing)</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-9f1dfdd7ce2cb611.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>波分复用就是光的频分复用，使用一根光纤来同时传输多个光载波信号</p><p>光信号传输一段距离后悔衰减，所以要用 掺铒光纤放大器 放大光信号</p></blockquote><p><strong>码分复用 CDM (Code Division Multiplexing)</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-753efa9c750d4ef1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-91ed6f416ae8fad6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-91b959793d2ac0de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-8d81f17d93395b48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="3、动态接入控制"><a href="#3、动态接入控制" class="headerlink" title="3、动态接入控制"></a>3、动态接入控制</h4><p>受控接入</p><p><strong>受控接入在局域网中使用得较少，本书不再讨论</strong></p><p><strong>随机接入</strong></p><p><strong>重点</strong></p><h4 id="4、随机接入（CSMA-x2F-CD协议）"><a href="#4、随机接入（CSMA-x2F-CD协议）" class="headerlink" title="4、随机接入（CSMA&#x2F;CD协议）"></a>4、随机接入（CSMA&#x2F;CD协议）</h4><p><strong>总线局域网使用协议：CSMA&#x2F;CD</strong></p><h5 id="4-1、基本概念"><a href="#4-1、基本概念" class="headerlink" title="4.1、基本概念"></a>4.1、基本概念</h5><p><strong>最初</strong>的<strong>以太网</strong>是将许多计算机都连接到一根总线上。易于实现广播通信。当初认为这样的连接方法既简单又可靠，因为总线上没有有源器件。</p><blockquote><p><strong>以太网（Ethernet）</strong>是一种计算机<strong>局域网技术</strong>。IEEE组织的IEEE 802.3标准制定了<strong>以太网（Ethernet）</strong>的技术标准</p><p>以太网采用无连接的工作方式，对发送的数据帧不进行编号，也不要求对方发回确认。目的站收到有差错帧就把它丢弃，其他什么也不做。（不可靠服务）</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-daba961daee80d20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-00eb7fba113030d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><code>多址接入MA</code></p><p>表示许多主机以多点接入的方式连接在一根总线上。</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a26a912dcecd040a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><code>载波监听CS</code></p><p>是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-9dc7a68973377382.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>总线上并没有什么“载波”。因此， <strong>“载波监听”就是用电子技术检测总线上有没有其他计算机发送的数据信号。</strong></p><p><code>碰撞检测CD</code></p><ul><li><strong>“碰撞检测”</strong>就是计算机<strong>边发送数据边检测</strong>信道上的信号电压大小。</li><li>当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会增大（互相叠加）。</li><li>当一个站检测到的信号电压摆动值超过一定的门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞。</li><li><strong>所谓“碰撞”就是发生了冲突。因此“碰撞检测”也称为“冲突检测”。</strong></li><li>在发生碰撞时，总线上传输的信号产生了严重的失真，无法从中恢复出有用的信息来。</li><li><strong>每一个正在发送数据的站，一旦发现总线上出现了碰撞，就要立即停止发送，免得继续浪费网络资源，然后等待一段随机时间后再次发送。</strong></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-574d77a51611a634.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>为什么要进行碰撞检测？ 因为信号传播时延对载波监听产生了影响</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a03963c28232dfb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/940/format/webp" alt="img"></p><p>A 需要单程传播时延的 2 倍的时间，才能检测到与 B 的发送产生了冲突</p></blockquote><h5 id="4-2-、CSMA-x2F-CD-协议工作流程"><a href="#4-2-、CSMA-x2F-CD-协议工作流程" class="headerlink" title="4.2 、CSMA&#x2F;CD 协议工作流程"></a>4.2 、CSMA&#x2F;CD 协议工作流程</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5621a9827bd41bf5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/669/format/webp" alt="img"></p><h6 id="CSMA-x2F-CD-协议工作——争用期（碰撞窗口）"><a href="#CSMA-x2F-CD-协议工作——争用期（碰撞窗口）" class="headerlink" title="CSMA&#x2F;CD 协议工作——争用期（碰撞窗口）"></a>CSMA&#x2F;CD 协议工作——争用期（碰撞窗口）</h6><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a77d88a950995527.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h6 id="CSMA-x2F-CD-协议工作——最小帧长"><a href="#CSMA-x2F-CD-协议工作——最小帧长" class="headerlink" title="CSMA&#x2F;CD 协议工作——最小帧长"></a>CSMA&#x2F;CD 协议工作——最小帧长</h6><p><img src="https://upload-images.jianshu.io/upload_images/24878825-423fe21ffdbacb81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h6 id="CSMA-x2F-CD-协议工作——最大帧长"><a href="#CSMA-x2F-CD-协议工作——最大帧长" class="headerlink" title="CSMA&#x2F;CD 协议工作——最大帧长"></a>CSMA&#x2F;CD 协议工作——最大帧长</h6><p><img src="https://upload-images.jianshu.io/upload_images/24878825-fa63a8f164fb9191.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h6 id="CSMA-x2F-CD-协议工作——截断二进制指数退避算法"><a href="#CSMA-x2F-CD-协议工作——截断二进制指数退避算法" class="headerlink" title="CSMA&#x2F;CD 协议工作——截断二进制指数退避算法"></a>CSMA&#x2F;CD 协议工作——截断二进制指数退避算法</h6><p><img src="https://upload-images.jianshu.io/upload_images/24878825-93f832e4b0a569ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h6 id="CSMA-x2F-CD-协议工作——信道利用率"><a href="#CSMA-x2F-CD-协议工作——信道利用率" class="headerlink" title="CSMA&#x2F;CD 协议工作——信道利用率"></a>CSMA&#x2F;CD 协议工作——信道利用率</h6><p><img src="https://upload-images.jianshu.io/upload_images/24878825-dc35877bb4bead1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h6 id="CSMA-x2F-CD-协议工作——帧接收流程"><a href="#CSMA-x2F-CD-协议工作——帧接收流程" class="headerlink" title="CSMA&#x2F;CD 协议工作——帧接收流程"></a>CSMA&#x2F;CD 协议工作——帧接收流程</h6><p><img src="https://upload-images.jianshu.io/upload_images/24878825-cf2d95546ecf2664.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h6 id="CSMA-x2F-CD-协议的重要特性"><a href="#CSMA-x2F-CD-协议的重要特性" class="headerlink" title="CSMA&#x2F;CD 协议的重要特性"></a>CSMA&#x2F;CD 协议的重要特性</h6><ul><li>使用 CSMA&#x2F;CD 协议的以太网不能进行全双工通信而<strong>只能进行双向交替通信（半双工通信）。</strong></li><li>每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。</li><li>这种<strong>发送的不确定性</strong>使整个以太网的平均通信量远小于以太网的最高数据率。</li></ul><blockquote><p>CSMA&#x2F;CD协议曾经用于各种总线结构以太网和双绞线以太网的早起版本中。</p><p><strong>现在的以太网基于交换机和全双工连接，不会有碰撞，因此没有必要使用CSMA&#x2F;CS协议</strong></p></blockquote><h4 id="5、随机接入（CSMA-x2F-CA协议）"><a href="#5、随机接入（CSMA-x2F-CA协议）" class="headerlink" title="5、随机接入（CSMA&#x2F;CA协议）"></a>5、随机接入（CSMA&#x2F;CA协议）</h4><p><strong>无线局域网使用的协议：CSMA&#x2F;CA</strong></p><h5 id="5-1、为什么无线局域网要使用CSMA-x2F-CA协议"><a href="#5-1、为什么无线局域网要使用CSMA-x2F-CA协议" class="headerlink" title="5.1、为什么无线局域网要使用CSMA&#x2F;CA协议"></a>5.1、为什么无线局域网要使用CSMA&#x2F;CA协议</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-dd01f296832d017a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="5-2、帧间间隔IFS（InterFrame-Space）"><a href="#5-2、帧间间隔IFS（InterFrame-Space）" class="headerlink" title="5.2、帧间间隔IFS（InterFrame Space）"></a>5.2、帧间间隔IFS（InterFrame Space）</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6c9fe4ae6927eb02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="5-3、CSMA-x2F-CA协议的工作原理"><a href="#5-3、CSMA-x2F-CA协议的工作原理" class="headerlink" title="5.3、CSMA&#x2F;CA协议的工作原理"></a>5.3、CSMA&#x2F;CA协议的工作原理</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c0ce898b417b3228.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p><strong>源站为什么在检测到信道空闲后还要再等待一段时间DIFS？</strong></p><ul><li>考虑到可能有其他的站有高优先级的帧要发送。若有，就要让高优先级帧先发送</li></ul><p><strong>目的站为什么正确接收数据帧后还要等待一段时间SIFS才能发送ACK帧？</strong></p><ul><li>SIFS是最短的帧间间隔，用来分隔开属于一次对话的各帧，在这段时间内，一个站点应当能够从发送方式切换到接收方式</li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a756ebbd569e600a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p><strong>信道由忙转为空闲且经过DIFS时间后，还要退避一段随机时间才能使用信道？</strong></p><p>防止多个站点同时发送数据而产生碰撞</p></blockquote><p><strong>使用退避算法的时机</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f0d70f0b26645fb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="5-4、CSMA-x2F-CA协议的退避算法"><a href="#5-4、CSMA-x2F-CA协议的退避算法" class="headerlink" title="5.4、CSMA&#x2F;CA协议的退避算法"></a>5.4、CSMA&#x2F;CA协议的退避算法</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-1de197cb6f859f3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>退避算法的示例</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-12262e66fc986d52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="5-5、CSMA-x2F-CA协议的信道预约和虚拟载波监听"><a href="#5-5、CSMA-x2F-CA协议的信道预约和虚拟载波监听" class="headerlink" title="5.5、CSMA&#x2F;CA协议的信道预约和虚拟载波监听"></a>5.5、CSMA&#x2F;CA协议的信道预约和虚拟载波监听</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-98353d62c0ef033f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ac35b15f5f22bf7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>虚拟载波监听机制能减少隐蔽站带来的碰撞问题的示例</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c8d7aca5f6faec4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="3-7、MAC地址、IP地址以及ARP协议"><a href="#3-7、MAC地址、IP地址以及ARP协议" class="headerlink" title="3.7、MAC地址、IP地址以及ARP协议"></a>3.7、MAC地址、IP地址以及ARP协议</h3><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ede2c92a0c809e6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="1、MAC地址"><a href="#1、MAC地址" class="headerlink" title="1、MAC地址"></a>1、MAC地址</h4><blockquote><ul><li><p>使用点对点信道的数据链路层不需要使用地址</p></li><li><p>使用广播信道的数据链路层必须使用地址来区分各主机</p></li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-b498a111836f82c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="1-1、广播信道的数据链路层必须使用地址（MAC）"><a href="#1-1、广播信道的数据链路层必须使用地址（MAC）" class="headerlink" title="1.1、广播信道的数据链路层必须使用地址（MAC）"></a>1.1、广播信道的数据链路层必须使用地址（MAC）</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-eabec58905a9aad1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1199/format/webp" alt="img"></p><blockquote><p><strong>MAC地址又称为硬件地址或物理地址</strong>。请注意：不要被 “物理” 二字误导认为物理地址属于物理层范畴，物理地址属于数据链路层范畴</p></blockquote><h5 id="1-2、IEEE-802局域网的MAC地址格式"><a href="#1-2、IEEE-802局域网的MAC地址格式" class="headerlink" title="1.2、IEEE 802局域网的MAC地址格式"></a>1.2、IEEE 802局域网的MAC地址格式</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5a66994327412b90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p><strong>组织唯一标识符OUI</strong></p><ul><li>生产网络设备的厂商，需要向IEEE的注册管理机构申请一个或多个OUI</li></ul><p><strong>网络接口标识符</strong></p><ul><li>由获得OUI的厂商自行随意分配</li></ul><p><strong>EUI-48</strong></p><ul><li>48是这个MAC地址的位数</li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-70ee74506eca1df4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>对于使用EUI-48空间的应用程序，IEEE的目标寿命为100年（直到2080年），但是鼓励采用EUI-64作为替代</p></blockquote><p><strong>关于无效的 MAC 帧</strong></p><ul><li>数据字段的长度与长度字段的值不一致；</li><li>帧的长度不是整数个字节；</li><li>用收到的帧检验序列 FCS 查出有差错；</li><li>数据字段的长度不在 46 ~ 1500 字节之间。</li><li>有效的 MAC 帧长度为 64 ~ 1518 字节之间。</li></ul><blockquote><p><strong>对于检查出的无效</strong>  <strong>MAC</strong>  <strong>帧就简单地丢弃。以太网不负责重传丢弃的帧。</strong></p></blockquote><h5 id="1-3、IEEE-802局域网的MAC地址发送顺序"><a href="#1-3、IEEE-802局域网的MAC地址发送顺序" class="headerlink" title="1.3、IEEE 802局域网的MAC地址发送顺序"></a>1.3、IEEE 802局域网的MAC地址发送顺序</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d0cf5b54089e4b40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="1-4、单播MAC地址举例"><a href="#1-4、单播MAC地址举例" class="headerlink" title="1.4、单播MAC地址举例"></a>1.4、单播MAC地址举例</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-db7d480bafececad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>主机B给主机C发送<strong>单播帧</strong>，主机B首先要构建该<strong>单播帧</strong>，<strong>在帧首部中的目的地址字段填入主机C的MAC地址</strong>，源地址字段填入自己的MAC地址，再加上帧首部的其他字段、数据载荷以及帧尾部，就构成了该<strong>单播帧</strong></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a69b9384665e17aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>主机B将该<strong>单播帧</strong>发送出去，主机A和C都会收到该<strong>单播帧</strong></p><p>主机A的网卡发现该<strong>单播帧</strong>的目的MAC地址与自己的MAC地址不匹配，丢弃该帧</p><p>主机C的网卡发现该<strong>单播帧</strong>的目的MAC地址与自己的MAC地址匹配，接受该帧</p><p>并将该帧交给其上层处理</p></blockquote><h5 id="1-5、广播MAC地址举例"><a href="#1-5、广播MAC地址举例" class="headerlink" title="1.5、广播MAC地址举例"></a>1.5、广播MAC地址举例</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-7a825d6f30766d99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>假设主机B要发送一个<strong>广播帧</strong>，主机B首先要构建该<strong>广播帧</strong>，<strong>在帧首部中的目的地址字段填入广播地址</strong>，也就是十六进制的全F，源地址字段填入自己的MAC地址，再加上帧首部中的其他字段、数据载荷以及帧尾部，就构成了该<strong>广播帧</strong></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-04fe098832094ecb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>主机B讲该<strong>广播帧</strong>发送出去，主机A和C都会收到该<strong>广播帧</strong>，<strong>发现该帧首部中的目的地址字段的内容是广播地址</strong>，就知道该帧是<strong>广播帧</strong>，主机A和主机C都接受该帧，并将该帧交给上层处理</p></blockquote><h5 id="1-6、多播MAC地址举例"><a href="#1-6、多播MAC地址举例" class="headerlink" title="1.6、多播MAC地址举例"></a>1.6、多播MAC地址举例</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-3f3a22fe2fbfa3ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>假设主机A要发送<strong>多播帧</strong>给该<strong>多播地址</strong>。将该<strong>多播地址</strong>的左起第一个字节写成8个比特，第一个字节的最低比特位是1，这就表明该地址是<strong>多播地址</strong>。</p><p>快速判断地址是不是<strong>多播地址</strong>，就是上图所示箭头所指的第十六进制数不能整除2（1,3,5,7,9,B,D,F），则该地址是<strong>多播地址</strong></p><p>假设主机B，C和D支持多播，各用户给自己的主机配置多播组列表<strong>如下所示</strong></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f274d401c24ad4d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>主机B属于两个多播组，主机C也属于两个多播组，而主机D不属于任何多播组</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-1d6c26260c21ba6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>主机A首先要构建该<strong>多播帧</strong>，<strong>在帧首部中的目的地址字段填入该多播地址</strong>，源地址点填入自己的MAC地址，再加上帧首部中的其他字段、数据载荷以及帧尾部，就构成了该<strong>多播帧</strong></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-70e6e705d20e5c20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>主机A将该<strong>多播帧</strong>发送出去，主机B、C、D都会收到该<strong>多播帧</strong></p><p><strong>主机B和C发现该多播帧的目的MAC地址在自己的多播组列表中</strong>，主机B和C都会接受该帧</p><p>主机D发现该<strong>多播帧</strong>的目的MAC地址不在自己得多播组列表中，则丢弃该<strong>多播帧</strong></p></blockquote><blockquote><p>给主机配置多播组列表进行私有应用时，不得使用公有的标准多播地址</p></blockquote><h4 id="2、IP地址"><a href="#2、IP地址" class="headerlink" title="2、IP地址"></a>2、IP地址</h4><p>IP地址属于网络层的范畴，不属于数据链路层的范畴</p><p>下面内容讲的是IP地址的使用，详细的IP地址内容在网络层中介绍</p><h5 id="2-1、基本概念"><a href="#2-1、基本概念" class="headerlink" title="2.1、基本概念"></a>2.1、基本概念</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-597f8c69867e595b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="2-2、从网络体系结构看IP地址与MAC地址"><a href="#2-2、从网络体系结构看IP地址与MAC地址" class="headerlink" title="2.2、从网络体系结构看IP地址与MAC地址"></a>2.2、从网络体系结构看IP地址与MAC地址</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-407cbc74e63b0e50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="2-3、数据包转发过程中IP地址与MAC地址的变化情况"><a href="#2-3、数据包转发过程中IP地址与MAC地址的变化情况" class="headerlink" title="2.3、数据包转发过程中IP地址与MAC地址的变化情况"></a>2.3、数据包转发过程中IP地址与MAC地址的变化情况</h5><p>图上各主机和路由器各接口的IP地址和MAC地址用简单的标识符来表示</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-77c204bc8181b3ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f12548de1d3cebe1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>如何从IP地址找出其对应的MAC地址？</p><p>ARP协议</p></blockquote><h4 id="3、ARP协议"><a href="#3、ARP协议" class="headerlink" title="3、ARP协议"></a>3、ARP协议</h4><p>如何从IP地址找出其对应的MAC地址？</p><p>ARP（地址解析协议）</p><h5 id="3-1、流程"><a href="#3-1、流程" class="headerlink" title="3.1、流程"></a>3.1、流程</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5e1fd5537944a420.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>ARP高速缓存表</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-13b5ca5d08126cde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>当主机B要给主机C发送数据包时，会首先在自己的ARP高速缓存表中查找主机C的IP地址所对应的MAC地址，但未找到，因此，主机B需要发送ARP请求报文，来获取主机C的MAC地址</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-9de96c1c37c62e26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>ARP请求报文有具体的格式，上图的只是简单描述</p><p>ARP请求报文被封装在MAC帧中发送，目的地址为广播地址</p><p>主机B发送封装有ARP请求报文的广播帧，总线上的其他主机都能收到该广播帧</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-97a253fd9b87b3be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>收到ARP请求报文的主机A和主机C会把ARP请求报文交给上层的ARP进程</p><p>主机A发现所询问的IP地址不是自己的IP地址，因此不用理会</p><p>主机C的发现所询问的IP地址是自己的IP地址，需要进行响应</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d852b42ef4dbea32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-87f01b333e4599d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a3f00154df65aac0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>动态与静态的区别</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a013636443263063.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>ARP协议只能在一段链路或一个网络上使用，而不能跨网络使用</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d5847fbcc133c6b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>ARP协议的使用是逐段链路进行的</p></blockquote><h5 id="3-2、总结"><a href="#3-2、总结" class="headerlink" title="3.2、总结"></a>3.2、总结</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-11cd254f6251a6ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/624/format/webp" alt="img"></p><blockquote><p>ARP表中的IP地址与MAC地址的对应关系记录，是<strong>会定期自动删除的</strong>，<strong>因为IP地址与MAC地址的对应关系不是永久性的</strong></p></blockquote><hr><h3 id="3-8、集线器与交换机的区别"><a href="#3-8、集线器与交换机的区别" class="headerlink" title="3.8、集线器与交换机的区别"></a>3.8、集线器与交换机的区别</h3><h4 id="1、集线器-在物理层扩展以太网"><a href="#1、集线器-在物理层扩展以太网" class="headerlink" title="1、集线器-在物理层扩展以太网"></a>1、集线器-在物理层扩展以太网</h4><h5 id="1-1、概念"><a href="#1-1、概念" class="headerlink" title="1.1、概念"></a>1.1、概念</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-dc092bbcb4344cf5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><ul><li><p>传统以太网最初是使用粗同轴电缆，后来演进到使用比较便宜的细同轴电缆，最后发展为使用更便宜和更灵活的双绞线。</p></li><li><p>采用双绞线的以太网采用星形拓扑，在星形的中心则增加了一种可靠性非常高的设备，叫做<strong>集线器</strong> (hub)。</p></li><li><p><strong>集线器</strong>是也可以看做多口中继器，每个端口都可以成为一个中继器，中继器是对减弱的信号进行放大和发送的设备</p></li><li><p><strong>集线器</strong>的以太网在逻辑上仍是个总线网，需要使用CSMA&#x2F;CD协议来协调各主机争用总线，只能工作在半双工模式，收发帧不能同时进行</p></li></ul></blockquote><h5 id="1-2、集线器HUB在物理层扩展以太网"><a href="#1-2、集线器HUB在物理层扩展以太网" class="headerlink" title="1.2、集线器HUB在物理层扩展以太网"></a>1.2、集线器HUB在物理层扩展以太网</h5><p><strong>使用集线器扩展</strong>：将多个以太网段连成更大的、多级星形结构的以太网</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0f8d87b7f79e94c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><ul><li><p><strong>优点</strong></p><ol><li><p>使原来属于不同碰撞域的以太网上的计算机能够进行跨碰撞域的通信。</p></li><li><p>扩大了以太网覆盖的地理范围。</p></li></ol></li><li><p><strong>缺点</strong></p><ol><li><p>碰撞域增大了，但总的吞吐量并未提高。</p></li><li><p>如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来。</p></li></ol></li></ul></blockquote><p><strong>碰撞域</strong></p><ul><li><strong>碰撞域（collision domain）</strong>又称为<strong>冲突域</strong>，是指网络中一个站点发出的帧会与其他站点发出的帧产生碰撞或冲突的那部分网络。</li><li>碰撞域越大，发生碰撞的概率越高。</li></ul><h4 id="2、以太网交换机-在数据链路层扩展以太网"><a href="#2、以太网交换机-在数据链路层扩展以太网" class="headerlink" title="2、以太网交换机-在数据链路层扩展以太网"></a>2、以太网交换机-在数据链路层扩展以太网</h4><h5 id="2-1、概念"><a href="#2-1、概念" class="headerlink" title="2.1、概念"></a>2.1、概念</h5><ul><li>扩展以太网更常用的方法是在数据链路层进行。</li><li>早期使用<strong>网桥</strong>，现在使用<strong>以太网交换机</strong>。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-001d34e299bee061.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/876/format/webp" alt="img"></p><blockquote><p><strong>网桥</strong></p><ul><li><p>网桥工作在数据链路层。</p></li><li><p>它根据 MAC 帧的目的地址对收到的帧进行转发和过滤。</p></li><li><p>当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的MAC 地址，然后再确定将该帧转发到哪一个接口，或把它丢弃。</p></li></ul><p><strong>交换机</strong></p><ul><li><p>1990 年问世的交换式集线器 (switching hub) 可明显地提高以太网的性能。</p></li><li><p>交换式集线器常称为<strong>以太网交换机</strong> (switch) 或<strong>第二层交换机</strong> (L2 switch)，强调这种交换机工作在数据链路层。</p></li><li><p>以太网交换机实质上就是一个<strong>多接口的网桥</strong></p></li></ul></blockquote><h5 id="2-2、集线器HUB与交换机SWITCH区别"><a href="#2-2、集线器HUB与交换机SWITCH区别" class="headerlink" title="2.2、集线器HUB与交换机SWITCH区别"></a>2.2、<strong>集线器HUB与交换机SWITCH区别</strong></h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a8f68b1ee60923c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>使用<strong>集线器</strong>互连而成的共享总线式以太网上的某个主机，要给另一个主机发送单播帧，该单播帧会通过共享总线传输到<strong>总线上的其他各个主机</strong></p><p>使用交换机互连而成的交换式以太网上的某个主机，要给另一个主机发送单播帧，该单播帧进入交换机后，交换机会将该单播帧转发给目的主机，<strong>而不是网络中的其他各个主机</strong></p><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-bd7d832dc7f8ffbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p><strong>以太网交换机的交换方式</strong></p><ul><li><p>存储转发方式</p><ul><li>把整个数据帧<strong>先缓存</strong>后再进行处理。</li></ul></li><li><p>直通 (cut-through) 方式</p><ul><li><p>接收数据帧的同时就<strong>立即按数据帧的目的 MAC 地址决定该帧的转发接口</strong>，因而提高了帧的转发速度。</p></li><li><p><strong>缺点</strong>是它不检查差错就直接将帧转发出去，因此有可能也将一些无效帧转发给其他的站。</p></li></ul></li></ul><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><p><strong>对比集线器和交换机</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-2e2faba35d2d7852.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/741/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-4638409baba882e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>多台主机同时给另一台主机发送单播帧</p><p>集线器以太网：会产生碰撞，遭遇碰撞的帧会传播到总线上的各主机</p><p>交换机以太网：会将它们缓存起来，然后逐个转发给目的主机，不会产生碰撞</p><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><p><strong>集线器扩展以太网和交换机扩展以太网区别</strong></p><p><strong>单播</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-34c587f82d3a1286.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>广播</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-134f67554e64e22b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>多个单播</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d80949431bd76379.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d5c429a2f92149ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>广播域（broadcast domain）：指这样一部分网络，其中任何一台设备发出的广播通信都能被该部分网络中的所有其他设备所接收。</p><h4 id="3、总结-1"><a href="#3、总结-1" class="headerlink" title="3、总结"></a>3、总结</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-25db1be3ca96bc2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-df6859d2396549cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/925/format/webp" alt="img"></p><blockquote><p>工作在数据链路层的以太网交换机，其性能远远超过工作在物理层的集线器，而且价格并不贵，这就使得集线器逐渐被市场淘汰</p></blockquote><hr><h3 id="3-9、以太网交换机自学习和转发帧的流程"><a href="#3-9、以太网交换机自学习和转发帧的流程" class="headerlink" title="3.9、以太网交换机自学习和转发帧的流程"></a>3.9、以太网交换机自学习和转发帧的流程</h3><h4 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5f9db8088bf224f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="2、自学习和转发帧的例子"><a href="#2、自学习和转发帧的例子" class="headerlink" title="2、自学习和转发帧的例子"></a>2、自学习和转发帧的例子</h4><p>以下例子假设各主机知道网络中其他各主机的MAC地址（无需进行ARP）</p><p><strong>A -&gt; B</strong>(盲目转发 泛洪)</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-1ef3dc4a6841b1ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><ol><li>A 先向 B 发送一帧。该帧从接口 1 进入到交换机</li><li>交换机收到帧后，先查找（图中左边）交换表。没有查到应从哪个接口转发这个帧给 B</li><li>交换机把这个帧的源地址 A 和接口 1 写入（图中左边）交换表中</li><li>交换机向除接口 1 以外的所有的接口广播这个帧</li><li>接口 4到接口 2，先查找（图中右边）交换表。没有查到应从哪个接口转发这个帧给 B</li><li>交换机把这个帧的源地址 A 和接口 2 写入（图中右边）交换表中</li><li>除B主机之外与该帧的目的地址不相符，将丢弃该帧</li><li>主机B发现是给自己的帧，接受该帧</li></ol></blockquote><p><strong>B -&gt; A</strong>(明确转发)<img src="https://upload-images.jianshu.io/upload_images/24878825-dbe273924b7c8eea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><ol><li>B 向 A 发送一帧。该帧从接口 3 进入到交换机</li><li>交换机收到帧后，先查找（图中左边）交换表。发现（图中左边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口1转发出去。于是就把这个帧传送到接口 1 转发给 A。</li><li>主机 A 发现目的地址是它，就接受该帧</li><li>交换机把这个帧的源地址 B 和接口 3 写入（图中左边）交换表中</li></ol></blockquote><p><strong>E -&gt; A</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-cf46c0c890cfa2a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><ol><li>E 向 A发送一帧</li><li>交换机收到帧后，先查找（图中右边）交换表。发现（图中右边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口2转发出去。于是就把这个帧传送到接口 2 转发给 接口 4。</li><li>交换机把这个帧的源地址 E 和接口 3 写入（图中右边）交换表中</li><li>接口 4 到 左边的交换机，先查找（图中左边）交换表。发现（图中左边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口1转发出去。于是就把这个帧传送到接口 1 转发给 A。</li><li>交换机把这个帧的源地址 E 和接口 4 写入（图中左边）交换表中</li><li>主机 A 发现目的地址是它，就接受该帧</li></ol></blockquote><p><strong>G -&gt; A</strong>(明确丢弃)</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-4ee1af4bc8187125.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>主机 A、主机 G、交换机 1的接口 1就共享同一条总线（相当于总线式网络，可以想象成用集线器连接了）</p><ol><li>主机 G 发送给 主机 A 一个帧</li><li>主机 A 和 交换机接口 1都能接收到</li><li>主机 A 的网卡收到后，根据帧的目的MAC地址A，就知道是发送给自己的帧，就接受该帧</li><li>交换机 1收到该帧后，首先进行登记工作</li><li>然后交换机 1对该帧进行转发，该帧的MAC地址是A，在（图中左边）交换表查找MAC 地址有 A</li><li>MAC 地址为 A的接口号是1，但是该帧正是从接口 1 进入交换机的，交换机不会再从该接口 1 讲帧转发出去，因为这是没有必要，于是丢弃该帧</li></ol></blockquote><p>随着网络中各主机都发送了帧后，网络中的各交换机就可以学习到各主机的MAC地址，以及它们与自己各接口的对应关系</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-071ec78303db43c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>考虑到可能有时要在交换机的接口更换主机，或者主机要更换其网络适配器，这就需要更改交换表中的项目。为此，在交换表中每个项目都设有一定的<strong>有效时间</strong>。<strong>过期的项目就自动被删除</strong>。</p><p><strong>以太网交换机的这种自学习方法使得以太网交换机能够即插即用，不必人工进行配置，因此非常方便。</strong></p></blockquote><h4 id="3、总结-2"><a href="#3、总结-2" class="headerlink" title="3、总结"></a>3、总结</h4><p><strong>交换机自学习和转发帧的步骤归纳</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-b39e4a9145068aca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/983/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-3fc4ca18dcbaef03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="3-10、以太网交换机的生成树协议STP"><a href="#3-10、以太网交换机的生成树协议STP" class="headerlink" title="3.10、以太网交换机的生成树协议STP"></a>3.10、以太网交换机的生成树协议STP</h3><h4 id="1、如何提高以太网的可靠性"><a href="#1、如何提高以太网的可靠性" class="headerlink" title="1、如何提高以太网的可靠性"></a>1、如何提高以太网的可靠性</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-04211a392a1b4b1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/983/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5033bf0f4c26a32b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/850/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a65d811129786ec6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="2、生成树协议STP"><a href="#2、生成树协议STP" class="headerlink" title="2、生成树协议STP"></a>2、生成树协议STP</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d43f5c0c9ddbaf93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1133/format/webp" alt="img"></p><blockquote><ul><li><p>IEEE 802.1D 标准制定了一个<strong>生成树协议 STP</strong> (Spanning Tree Protocol)。</p></li><li><p>其<strong>要点</strong>是：<strong>不改变</strong>网络的实际拓扑，但在逻辑上则切断某些链路，使得从一台主机到所有其他主机的路径是<strong>无环路的树状结构</strong>，从而消除了兜圈子现象。</p></li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-36746a91a09f583c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/895/format/webp" alt="img"></p><hr><h3 id="3-11、虚拟局域网VLAN"><a href="#3-11、虚拟局域网VLAN" class="headerlink" title="3.11、虚拟局域网VLAN"></a>3.11、虚拟局域网VLAN</h3><h4 id="1、为什么要虚拟局域网VLAN"><a href="#1、为什么要虚拟局域网VLAN" class="headerlink" title="1、为什么要虚拟局域网VLAN"></a>1、为什么要虚拟局域网VLAN</h4><p><strong>广播风暴</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a2a78b40ae5307db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>分割广播域的方法</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-89e9ef3fdfcc530c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>为了分割广播域，所以虚拟局域网VLAN技术应运而生</p></blockquote><h4 id="2、概念"><a href="#2、概念" class="headerlink" title="2、概念"></a>2、概念</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-3f98534c040b90f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><ul><li><p>利用以太网交换机可以很方便地实现虚拟局域网 VLAN (Virtual LAN)。</p></li><li><p>IEEE 802.1Q 对虚拟局域网 VLAN 的<strong>定义</strong>：  <strong>虚拟局域网 VLAN</strong> 是由一些局域网网段构成的<strong>与物理位置无关的逻辑组</strong>，而这些网段具有某些共同的需求。每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的计算机是属于哪一个 VLAN。</p></li><li><p>同一个VLAN内部可以广播通信，不同VLAN不可以广播通信</p></li><li><p><strong>虚拟局域网其实只是局域网给用户提供的一种服务，而并不是一种新型局域网。</strong></p></li><li><p>由于虚拟局域网是用户和网络资源的逻辑组合，因此可按照需要将有关设备和资源非常方便地重新组合，使用户从不同的服务器或数据库中存取所需的资源。</p></li></ul></blockquote><h4 id="3、虚拟局域网VLAN的实现机制"><a href="#3、虚拟局域网VLAN的实现机制" class="headerlink" title="3、虚拟局域网VLAN的实现机制"></a>3、虚拟局域网VLAN的实现机制</h4><p>虚拟局域网VLAN技术是在交换机上实现的，需要交换机能够实现以下功能</p><ul><li>能够处理带有VLAN标记的帧——IEEE 802.1 Q帧</li><li>交换机的各端口可以支持不同的端口类型，不同端口类型的端口对帧的处理方式有所不同</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5d3549cc02f9a3b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6af352f81b800a98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>Access端口</strong></p><p>交换机与用户计算机之间的互连</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-44a2e259c33ecfd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/938/format/webp" alt="img"></p><blockquote><p>同一个VLAN内部可以广播通信，不同VLAN不可以广播通信</p></blockquote><p><strong>Truck端口</strong></p><p>交换机之间或交换机与路由器之间的互连</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a93996aae716c6aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1184/format/webp" alt="img"></p><p><strong>小例题</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-dbf84ad8998fae58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>华为交换机私有的Hybrid端口类型</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-653b80a66c3cc5bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/908/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-239ec8f47d072a9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1069/format/webp" alt="img"></p><h4 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-dd58aec183276962.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p><strong>虚拟局域网优点</strong></p><p>虚拟局域网（VLAN）技术具有以下主要优点：</p><ol><li>改善了性能</li><li>简化了管理</li><li>降低了成本</li><li>改善了安全性</li></ol></blockquote><h2 id="四、网络层"><a href="#四、网络层" class="headerlink" title="四、网络层"></a>四、网络层</h2><h3 id="4-1、网络层概述"><a href="#4-1、网络层概述" class="headerlink" title="4.1、网络层概述"></a>4.1、网络层概述</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>网络层的主要任务是<strong>实现网络互连</strong>，进而<strong>实现数据包在各网络之间的传输</strong></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-afcf88ff0d16dc80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1190/format/webp" alt="img"></p><blockquote><p>这些异构型网络N1~N7如果只是需要各自内部通信，他们只要实现各自的物理层和数据链路层即可</p><p>但是如果要将这些异构型网络互连起来，形成一个更大的互联网，就需要实现网络层设备路由器</p><p>有时为了简单起见，可以不用画出这些网络，图中N1~N7，而将他们看做是一条链路即可</p></blockquote><ul><li><p>要实现网络层任务，需要解决一下主要问题：</p><ul><li>网络层向运输层提供怎样的服务（“可靠传输”还是“不可靠传输”）</li></ul><p>在数据链路层那课讲过的可靠传输，详情可以看那边的笔记：网络层对以下的<strong>分组丢失</strong>、<strong>分组失序</strong>、<strong>分组重复</strong>的传输错误采取措施，使得接收方能正确接受发送方发送的数据，就是<strong>可靠传输</strong>，反之，如果什么措施也不采取，则是<strong>不可靠传输</strong></p><ul><li>网络层寻址问题</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5993e7f74bf3a7ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>一个路由器如果连接多个网络，就有多个网络给他分配的ip地址。</p></blockquote><ul><li>路由选择问题</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-8db9ef0ef83c53ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>路由器收到数据后，是依据什么来决定将数据包从自己的哪个接口转发出去？</p><p><strong>依据数据包的<code>目的地址和路由器中的路由表</code></strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-14fffa90e5256d53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/438/format/webp" alt="img"></p><p>但在实际当中，路由器是怎样知道这些路由记录？</p><ul><li><p>由用户或网络管理员进行人工配置，这种方法只适用于规模较小且网络拓扑不改变的小型互联网</p></li><li><p><strong>另一种是实现各种路由选择协议，由路由器执行路由选择协议中所规定的路由选择算法，而自动得出路由表中的路有记录，这种方法更适合规模较大且网络拓扑经常改变的大型互联网</strong></p></li></ul></blockquote></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-87fc7ad0cc9ba272.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>补充 <strong>网络层（网际层）</strong>除了 <strong>IP协议</strong>外，还有之前介绍过的<strong>地址解析协议ARP</strong>，还有<strong>网际控制报文协议ICMP</strong>，<strong>网际组管理协议IGMP</strong></p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a692d0cb739f39ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="4-2、网络层提供的两种服务"><a href="#4-2、网络层提供的两种服务" class="headerlink" title="4.2、网络层提供的两种服务"></a>4.2、网络层提供的两种服务</h3><ul><li>在计算机网络领域，网络层应该向运输层提供怎样的服务（“<strong>面向连接</strong>”还是“<strong>无连接</strong>”）曾引起了长期的争论。</li><li>争论焦点的实质就是：<strong>在计算机通信中，可靠交付应当由谁来负责</strong>？是<strong>网络</strong>还是<strong>端系统</strong>？</li></ul><h4 id="面向连接的虚电路服务"><a href="#面向连接的虚电路服务" class="headerlink" title="面向连接的虚电路服务"></a>面向连接的虚电路服务</h4><p><strong>一种观点：让网络负责可靠交付</strong></p><ul><li>这种观点认为，应借助于电信网的成功经验，让网络负责可靠交付，计算机网络应模仿电信网络，使用<strong>面向连接</strong>的通信方式。</li><li>通信之前先建立<strong>虚电路</strong> (Virtual Circuit)，以保证双方通信所需的一切网络资源。</li><li>如果再使用可靠传输的网络协议，就可使所发送的分组无差错按序到达终点，不丢失、不重复。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-3e9eab4cca1d0298.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>发送方</strong> 发送给 <strong>接收方</strong> 的所有分组都沿着同一条虚电路传送</p><blockquote><ul><li><p>虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而并不是真正建立了一条物理连接。</p></li><li><p>请注意，电路交换的电话通信是先建立了一条真正的连接。</p></li><li><p>因此分组交换的虚连接和电路交换的连接只是类似，但并不完全一样</p></li></ul></blockquote><h4 id="无连接的数据报服务"><a href="#无连接的数据报服务" class="headerlink" title="无连接的数据报服务"></a>无连接的数据报服务</h4><p><strong>另一种观点：网络提供数据报服务</strong></p><ul><li>互联网的先驱者提出了一种崭新的网络设计思路。</li><li>网络层向上只提供简单灵活的、<strong>无连接的</strong>、<strong>尽最大努力交付</strong>的<strong>数据报服务</strong>。</li><li>网络在发送分组时不需要先建立连接。每一个分组（即 IP 数据报）独立发送，与其前后的分组无关（不进行编号）。</li><li><strong>网络层不提供服务质量的承诺</strong>。即所传送的分组可能出错、丢失、重复和失序（不按序到达终点），当然也不保证分组传送的时限。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0a52c46cee7f1ffd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>发送方</strong> 发送给 <strong>接收方</strong> 的分组可能沿着不同路径传送</p><blockquote><p><strong>尽最大努力交付</strong></p><ul><li><p>如果主机（即端系统）中的进程之间的通信需要是可靠的，那么就由网络的<strong>主机中的运输层负责可靠交付（包括差错处理、流量控制等）</strong> 。</p></li><li><p><strong>采用这种设计思路的好处是</strong>：网络的造价大大降低，运行方式灵活，能够适应多种应用。</p></li><li><p>互连网能够发展到今日的规模，充分证明了当初采用这种设计思路的正确性。</p></li></ul></blockquote><h4 id="虚电路服务与数据报服务的对比"><a href="#虚电路服务与数据报服务的对比" class="headerlink" title="虚电路服务与数据报服务的对比"></a>虚电路服务与数据报服务的对比</h4><table><thead><tr><th><strong>对比的方面</strong></th><th><strong>虚电路服务</strong></th><th><strong>数据报服务</strong></th></tr></thead><tbody><tr><td><strong>思路</strong></td><td><strong>可靠通信应当由网络来保证</strong></td><td><strong>可靠通信应当由用户主机来保证</strong></td></tr><tr><td><strong>连接的建立</strong></td><td><strong>必须有</strong></td><td><strong>不需要</strong></td></tr><tr><td><strong>终点地址</strong></td><td><strong>仅在连接建立阶段使用，每个分组使用短的虚电路号</strong></td><td><strong>每个分组都有终点的完整地址</strong></td></tr><tr><td><strong>分组的转发</strong></td><td><strong>属于同一条虚电路的分组均按照同一路由进行转发</strong></td><td><strong>每个分组独立选择路由进行转发</strong></td></tr><tr><td><strong>当结点出故障时</strong></td><td><strong>所有通过出故障的结点的虚电路均不能工作</strong></td><td><strong>出故障的结点可能会丢失分组，一些路由可能会发生变化</strong></td></tr><tr><td><strong>分组的顺序</strong></td><td><strong>总是按发送顺序到达终点</strong></td><td><strong>到达终点时不一定按发送顺序</strong></td></tr><tr><td><strong>端到端的差错处理和流量控制</strong></td><td><strong>可以由网络负责，也可以由用户主机负责</strong></td><td><strong>由用户主机负责</strong></td></tr></tbody></table><hr><h3 id="4-3、IPv4"><a href="#4-3、IPv4" class="headerlink" title="4.3、IPv4"></a>4.3、IPv4</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-90e2d995adf53e57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1199/format/webp" alt="img"></p><h4 id="分类编制的IPv4地址"><a href="#分类编制的IPv4地址" class="headerlink" title="分类编制的IPv4地址"></a>分类编制的IPv4地址</h4><h5 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-617a75508f564e07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><ul><li>每一类地址都由两个固定长度的字段组成，其中一个字段是<strong>网络号 net-id</strong>，它标志主机（或路由器）所连接到的网络，而另一个字段则是<strong>主机号 host-id</strong>，它标志该主机（或路由器）。</li><li>主机号在它前面的网络号所指明的网络范围内必须是唯一的。</li><li>由此可见，<strong>一个 IP 地址在整个互联网范围内是唯一的</strong>。</li></ul><p><strong>A类地址</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-eacc61b12148d0fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>B类地址</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-3e51c8657163a587.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>C类地址</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-82018abf428effc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>练习</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c1a55b79b312df0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p><strong>IP 地址的指派范围</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0fd510a88683ce19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/881/format/webp" alt="img"></p><p><strong>一般不使用的特殊的 IP 地址</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6ac646caef2b89d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/882/format/webp" alt="img"></p><p><strong>IP 地址的一些重要特点</strong></p><p>(1) <strong>IP 地址是一种分等级的地址结构</strong>。分两个等级的好处是：</p><ul><li><strong>第一</strong>，IP 地址管理机构在分配 IP 地址时只分配网络号，而剩下的主机号则由得到该网络号的单位自行分配。这样就方便了 IP 地址的管理。</li><li><strong>第二</strong>，路由器仅根据目的主机所连接的网络号来转发分组（而不考虑目的主机号），这样就可以使路由表中的项目数大幅度减少，从而减小了路由表所占的存储空间。</li></ul><p>(2) <strong>实际上 IP 地址是标志一个主机（或路由器）和一条链路的接口</strong>。</p><ul><li>当一个主机同时连接到两个网络上时，该主机就必须同时具有两个相应的 IP 地址，其网络号 net-id 必须是不同的。这种主机称为<strong>多归属主机</strong> (multihomed host)。</li><li>由于一个路由器至少应当连接到两个网络（这样它才能将 IP 数据报从一个网络转发到另一个网络），因此<strong>一个路由器至少应当有两个不同的 IP 地址</strong>。</li></ul><p>(3) <strong>用转发器或网桥连接起来的若干个局域网仍为一个网络</strong>，因此这些局域网都具有同样的网络号 net-id。</p><p>(4) <strong>所有分配到网络号 net-id 的网络，无论是范围很小的局域网，还是可能覆盖很大地理范围的广域网，都是平等的。</strong></p><h4 id="划分子网的IPv4地址"><a href="#划分子网的IPv4地址" class="headerlink" title="划分子网的IPv4地址"></a>划分子网的IPv4地址</h4><h5 id="为什么要划分子网"><a href="#为什么要划分子网" class="headerlink" title="为什么要划分子网"></a>为什么要划分子网</h5><p>在 ARPANET 的早期，IP 地址的设计确实不够合理：</p><ul><li>IP 地址空间的利用率有时很低。</li><li>给每一个物理网络分配一个网络号会使路由表变得太大因而使网络性能变坏。</li><li>两级的 IP 地址不够灵活。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-7e6aa3fe4c6184e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>如果想要将原来的网络划分成三个独立的网路</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-9c21430ca1484519.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>所以是否可以从主机号部分借用一部分作为子网号</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5925336afb4dfe54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>但是如果未在图中标记子网号部分，那么我们和计算机又如何知道分类地址中主机号有多少比特被用作子网号了呢？</p><p>所以就有了划分子网的工具：<strong>子网掩码</strong></p><ul><li><p>从 1985 年起在 IP 地址中又增加了一个“<strong>子网号字段</strong>”，使两级的 IP 地址变成为<strong>三级的 IP 地址</strong>。</p></li><li><p>这种做法叫做<strong>划分子网</strong> (subnetting) 。</p></li><li><p>划分子网已成为互联网的正式标准协议。</p></li></ul></blockquote><h5 id="如何划分子网"><a href="#如何划分子网" class="headerlink" title="如何划分子网"></a>如何划分子网</h5><p>基本思路</p><ul><li>划分子网纯属一个<strong>单位内部的事情</strong>。单位对外仍然表现为没有划分子网的网络。</li><li>从主机号<strong>借用</strong>若干个位作为<strong>子网号</strong> subnet-id，而主机号 host-id 也就相应减少了若干个位。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5006c8be601f1a11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/545/format/webp" alt="img"></p><ul><li>凡是从其他网络发送给本单位某个主机的 IP 数据报，仍然是根据 IP 数据报的<strong>目的网络号</strong> net-id，先找到连接在本单位网络上的路由器。</li><li>然后<strong>此路由器</strong>在收到 IP 数据报后，再按<strong>目的网络号</strong> net-id 和<strong>子网号</strong> subnet-id 找到目的子网。</li><li>最后就将 IP 数据报直接交付目的主机。</li></ul><p>划分为三个子网后对外仍是一个网络</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5eaab61ca2770932.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/773/format/webp" alt="img"></p><blockquote><ul><li><strong>优点</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.  减少了 IP 地址的浪费</span><br><span class="line">2.  使网络的组织更加灵活</span><br><span class="line">3.  更便于维护和管理</span><br></pre></td></tr></table></figure><ul><li><strong>划分子网纯属一个单位内部的事情，对外部网络透明</strong>，对外仍然表现为没有划分子网的一个网络。</li></ul></blockquote><h5 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0050159cd99737aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p><strong>(IP 地址) AND (子网掩码) &#x3D; 网络地址</strong> 重要，下面很多相关知识都会用到</p></blockquote><p>举例</p><p>例子1</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-24fc0f5e02ad49ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/969/format/webp" alt="img"></p><p>例子2</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-4e988e8ed1e154e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>默认子网掩码</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5e9d1b71bd598e62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-143b8b8433293353.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><ul><li><p>子网掩码是一个网络或一个子网的重要属性。</p></li><li><p>路由器在和相邻路由器交换路由信息时，必须把自己所在网络（或子网）的子网掩码告诉相邻路由器。</p></li><li><p>路由器的路由表中的每一个项目，除了要给出目的网络地址外，还必须同时给出该网络的子网掩码。</p></li><li><p>若一个路由器连接在两个子网上，就拥有两个网络地址和两个子网掩码。</p></li></ul></blockquote><h4 id="无分类编址的IPv4地址"><a href="#无分类编址的IPv4地址" class="headerlink" title="无分类编址的IPv4地址"></a>无分类编址的IPv4地址</h4><h5 id="为什么使用无分类编址"><a href="#为什么使用无分类编址" class="headerlink" title="为什么使用无分类编址"></a>为什么使用无分类编址</h5><p><strong>无分类域间路由选择 CIDR</strong> (Classless Inter-Domain Routing)。</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-dc335c4f88cede6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p><strong>CIDR 最主要的特点</strong></p><ul><li><p>CIDR使用各种长度的“<strong>网络前缀</strong>”(network-prefix)来代替分类地址中的网络号和子网号。</p></li><li><p><strong>IP 地址从三级编址（使用子网掩码）又回到了两级编址</strong>。</p></li></ul></blockquote><h5 id="如何使用无分类编址"><a href="#如何使用无分类编址" class="headerlink" title="如何使用无分类编址"></a>如何使用无分类编址</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-88843ec1d5739f3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>举例</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-bdff407b4d15ec43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="路由聚合（构造超网）"><a href="#路由聚合（构造超网）" class="headerlink" title="路由聚合（构造超网）"></a>路由聚合（构造超网）</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a495310e8e5bc13a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-38c44dc0521cfc1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1181/format/webp" alt="img"></p><h4 id="IPv4地址的应用规划"><a href="#IPv4地址的应用规划" class="headerlink" title="IPv4地址的应用规划"></a>IPv4地址的应用规划</h4><p>给定一个IPv4地址块，如何将其划分成几个更小的地址块，并将这些地址块分配给互联网中不同网络，进而可以给各网络中的主机和路由器接口分配IPv4地址</p><h5 id="定长的子网掩码FLSM（Fixed-Length-Subnet-Mask）"><a href="#定长的子网掩码FLSM（Fixed-Length-Subnet-Mask）" class="headerlink" title="定长的子网掩码FLSM（Fixed Length Subnet Mask）"></a>定长的子网掩码FLSM（Fixed Length Subnet Mask）</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-097ed78c469f6c87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/882/format/webp" alt="img"></p><p><strong>划分子网的IPv4就是定长的子网掩码</strong></p><p>举例</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-814f06bb5874b724.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a90a636c0ff5f71c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1156/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-da16abd19e811578.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1146/format/webp" alt="img"></p><blockquote><p>通过上面步骤分析，就可以从子网1 ~ 8中任选5个分配给左图中的N1 ~ N5</p><p><strong>采用定长的子网掩码划分，只能划分出2^n个子网，其中n是从主机号部分借用的用来作为子网号的比特数量，每个子网所分配的IP地址数量相同</strong></p><p><strong>但是也因为每个子网所分配的IP地址数量相同，不够灵活，容易造成IP地址的浪费</strong></p></blockquote><h5 id="变长的子网掩码VLSM（Variable-Length-Subnet-Mask）"><a href="#变长的子网掩码VLSM（Variable-Length-Subnet-Mask）" class="headerlink" title="变长的子网掩码VLSM（Variable Length Subnet Mask）"></a>变长的子网掩码VLSM（Variable Length Subnet Mask）</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-2c1bfb1250975630.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/874/format/webp" alt="img"></p><p><strong>无分类编址的IPv4就是变长的子网掩码</strong></p><p>举例</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-e7a3b3efa0032ed5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-b855ffbf02fe4306.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="4-4、IP数据报的发送和转发过程"><a href="#4-4、IP数据报的发送和转发过程" class="headerlink" title="4.4、IP数据报的发送和转发过程"></a>4.4、IP数据报的发送和转发过程</h3><p><img src="https://upload-images.jianshu.io/upload_images/24878825-591d4b10e724a0c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>举例</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-cb603ff4350d2927.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6017dc6fd05d7dc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>源主机如何知道目的主机是否与自己在同一个网络中，是直接交付，还是间接交付？</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-1350e20953ab73c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>可以通过**<code>目的地址IP</code><strong>和</strong><code>源地址的子网掩码</code><strong>进行</strong>逻辑与运算<strong>得到</strong>目的网络地址**</p><ul><li><p>如果<strong>目的网络地址</strong>和<strong>源网络地址</strong>  <strong>相同</strong>，就是**<code>在同一个网络</code><strong>中，属于</strong><code>直接交付</code>**</p></li><li><p>如果<strong>目的网络地址</strong>和<strong>源网络地址</strong>  <strong>不相同</strong>，就**<code>不在同一个网络</code><strong>中，属于</strong><code>间接交付</code><strong>，传输给主机所在网络的</strong>默认网关**（路由器——下图会讲解）,由默认网关帮忙转发</p></li></ul></blockquote><p>主机C如何知道路由器R的存在？</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5f7abd26ae50d253.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>用户为了让本网络中的主机能和其他网络中的主机进行通信，就必须给其指定本网络的一个路由器的接口，由该路由器帮忙进行转发，所指定的路由器，也被称为<strong>默认网关</strong></p><p>例如。路由器的接口0的IP地址192.168.0.128做为左边网络的默认网关</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0351946f5505b37a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>主机A会将该IP数据报传输给自己的默认网关，也就是图中所示的路由器接口0</p></blockquote><p>路由器收到IP数据报后如何转发？</p><ul><li>检查IP数据报首部是否出错：<ul><li>若出错，则直接丢弃该IP数据报并通告源主机</li><li>若没有出错，则进行转发</li></ul></li><li>根据IP数据报的目的地址在路由表中查找匹配的条目：<ul><li>若找到匹配的条目，则转发给条目中指示的吓一跳</li><li>若找不到，则丢弃该数据报并通告源主机</li></ul></li></ul><p>假设IP数据报首部没有出错，路由器取出IP数据报首部各地址字段的值</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-09e48a4a2debf9dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>接下来路由器对该IP数据报进行查表转发</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6ec850736125c7f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>逐条检查路由条目，将<code>目的地址</code>与<code>路由条目中的地址掩码</code>进行逻辑与运算得到<code>目的网络地址</code>，然后与路由条目中的目的网络进行比较，如果相同，则这条路由条目就是匹配的路由条目，按照它的下一条指示，图中所示的也就是接口1转发该IP数据报</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-4ff7f2294cf39cef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>路由器是隔离广播域的</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f38fdc3eb91af37f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="4-5、静态路由配置及其可能产生的路由环路问题"><a href="#4-5、静态路由配置及其可能产生的路由环路问题" class="headerlink" title="4.5、静态路由配置及其可能产生的路由环路问题"></a>4.5、静态路由配置及其可能产生的路由环路问题</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-cf80167248b787a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="多种情况举例"><a href="#多种情况举例" class="headerlink" title="多种情况举例"></a>多种情况举例</h4><p><strong>静态路由配置</strong></p><p>举例</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-214e6a6830649edd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>默认路由</strong></p><p>举例</p><p>默认路由可以被所有网络匹配，但路由匹配有优先级，默认路由是优先级最低的</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-8887ba23edaae006.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>特定主机路由</strong></p><p>举例</p><p>有时候，我们可以给路由器添加针对某个主机的特定主机路由条目</p><p>一般用于网络管理人员对网络的管理和测试</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-434c1eec83abd86f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>多条路由可选，匹配路由最具体的</p></blockquote><p><strong>静态路由配置错误导致路由环路</strong></p><p>举例</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-8b1a3cadc08a931f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>假设将R2的路由表中第三条目录配置错了下一跳</p><p>这导致R2和R3之间产生了路由环路</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d30fc31c76fe75b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>聚合了不存在的网络而导致路由环路</strong></p><p>举例</p><p>正常情况</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-9e22a85322dfb654.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-56bce2f676ef8d09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>错误情况</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-030c93bce1443043.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>解决方法</p><blockquote><p>添加黑洞路由</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-caeddc52bde20f9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d91cb3837cfc2b6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>黑洞路由的下一跳为null0，这是路由器内部的虚拟接口，IP数据报进入它后就被丢弃</p></blockquote><p><strong>网络故障而导致路由环路</strong></p><p>举例</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-e3848e2bfcfc2c62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-99cc1b342b3f645f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>解决方法</p><p>添加故障的网络为黑洞路由</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0c30655d3122a50d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d8107f8fc71dd1f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>假设。一段时间后故障网络恢复了</p><p>R1又自动地得出了其接口0的直连网络的路由条目</p><p>针对该网络的黑洞网络会自动失效</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-3f60a84d11d15f41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>如果又故障</p><p>则生效该网络的黑洞网络</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-dfe2cfdcdd6af09e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-3bc2906b99f6940d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="4-6、路由选择协议"><a href="#4-6、路由选择协议" class="headerlink" title="4.6、路由选择协议"></a>4.6、路由选择协议</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a6ddde977e3398ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>因特网所采用的路由选择协议的主要特点</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-b3382290a3965ffc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>因特网采用分层次的路由选择协议</strong></p><ul><li><strong>自治系统 AS</strong>：在单一的技术管理下的一组路由器，而这些路由器使用一种 AS 内部的路由选择协议和共同的度量以确定分组在该 AS 内的路由，同时还使用一种 AS 之间的路由选择协议用以确定分组在 AS之间的路由。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-9e37d1229ec7836e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>自治系统之间的路由选择简称为域间路由选择，自治系统内部的路由选择简称为域内路由选择</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-8729bdd2bd367edf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>域间路由选择使用外部网关协议EGP这个类别的路由选择协议</p><p>域内路由选择使用内部网关协议IGP这个类别的路由选择协议</p><p><strong><code>网关协议</code><strong>的名称可称为</strong><code>路由协议</code></strong></p></blockquote><p><strong>常见的路由选择协议</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6b1876963d6d9de0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>路由器的基本结构</strong></p><p><strong>路由器是一种具有多个输入端口，和输出端口的专用计算机，其任务是转发分组</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-e6b69c1f176e24c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>路由器结构可划分为两大部分：</p><p>1、<strong>分组转发部分</strong></p><p>由三部分构成</p><ul><li><p>交换结构</p></li><li><p>一组输入端口：</p><p>信号从某个输入端口进入路由器</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-2bd1e24a95010cc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/742/format/webp" alt="img"></p><p>物理层将信号转换成比特流，送交数据链路层处理</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-93fa25cf949ddf32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/627/format/webp" alt="img"></p><p>数据链路层识别从比特流中识别出帧，去掉帧头和帧尾后，送交网络层处理</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-be61420be381fce0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/632/format/webp" alt="img"></p><p>如果送交网络层的分组是普通待转发的数据分组</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-13bf3933ea84f8cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/625/format/webp" alt="img"></p><p>则根据分组首部中的目的地址进行查表转发</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6e0cce7487b0555c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/452/format/webp" alt="img"></p><p>若找不到匹配的转发条目，则丢弃该分组，否则，按照匹配条目中所指示的端口进行转发</p></li><li><p>一组输出端口</p><p>网络层更新数据分组首部中某些字段的值，例如将数据分组的生存时间减1，然后送交数据链路层进行封装</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c20bbb057497a7dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/661/format/webp" alt="img"></p><p>数据链路层将数据分组封装成帧，交给物理层处理</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-243c60046346ab42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/566/format/webp" alt="img"></p><p>物理层将帧看成比特流将其变换成相应的电信号进行发送</p></li></ul><blockquote><p>路由器的各端口还会有输入缓冲区和输出缓冲区</p><ul><li><p>输入缓冲区用来暂存新进入路由器但还来不及处理的分组</p></li><li><p>输出缓冲区用来暂存已经处理完毕但还来不及发送的分组</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-af72fd2149d2c01e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>路由器的端口一般都具有输入和输出功能</strong>，这些实例分出了输入端口和输出端口是更好演示路由基本工作过程</p></blockquote><p>2、<strong>路由选择部分</strong></p><ul><li><p>路由选择部分的核心构件是路由选择处理机，它的任务是根据所使用的路由选择协议。周期性地与其他路由器进行路由信息的交互，来更新路由表</p><p><strong>如果送交给输入端口的网络层的分组是路由器之间交换路由信息的路由报文，则把这种分组送交给路由选择处理机</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-109a369b44639a9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/419/format/webp" alt="img"></p><p>路由选择处理机根据分组的内容来更新自己的<strong>路由表</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-af4af7e182ea3f97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>路由选择处理机还会周期性地给其他路由器发送自己所知道的路由信息</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-9c1dca34462b76ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1106/format/webp" alt="img"></p></li></ul><h4 id="路由信息协议RIP"><a href="#路由信息协议RIP" class="headerlink" title="路由信息协议RIP"></a>路由信息协议RIP</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-850c29aaf1e744d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-81a38e546cd55ec2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/913/format/webp" alt="img"></p><p><strong>RIP的基本工作过程</strong></p><p>举例</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6bf4e045a90846e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>RIP的路由条目的更新规则</strong></p><p>举例1</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-671231845f242b38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>路由器C的表到达各目的网络的下一条都记为问号，可以理解为路由器D并不需要关心路由器C的这些内容</p><p>假设路由器C的RIP更新报文发送周期到了，则路由器C将自己路由表中的相关路由信息封装到RIP更新报文中发送给路由器D</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-bacf546778de9f8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>路由器C能到达这些网络，说明路由器C的相邻路由器也能到达，只是比路由器C的距离大1，于是根据距离的对比，路由器D更新自己的路由表</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-79852776853b7463.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>举例2</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-7a0db5b1f8900318.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>RIP存在“坏消息传播得慢”的问题</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-edc2c694de1a9ec9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-bedb4b539faf44dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-4d1eda70d2f555bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>解决方法</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-3a055002b79a9cda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>但是，这些方法也不能完全解决“坏消息传播得慢”的问题，这是距离向量的本质决定</p></blockquote><p><strong>总结</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6bcb92e542416b41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>RIP 协议的优缺点</p><p>优点：</p><ol><li>实现简单，开销较小。</li></ol><p>缺点：</p><ol><li><p>RIP 限制了网络的规模，它能使用的最大距离为 15（16 表示不可达）。</p></li><li><p>路由器之间交换的路由信息是路由器中的完整路由表，因而随着网络规模的扩大，开销也就增加。</p></li><li><p>“坏消息传播得慢”，使更新过程的收敛时间过长。</p></li></ol></blockquote><h4 id="开放最短路径优先OSPF"><a href="#开放最短路径优先OSPF" class="headerlink" title="开放最短路径优先OSPF"></a>开放最短路径优先OSPF</h4><p>内部网关协议</p><p><strong>开放最短路径优先 OSPF (Open Shortest Path First)</strong></p><p><strong>注意</strong>：OSPF 只是一个协议的名字，它并不表示其他的路由选择协议不是“最短路径优先”。</p><p><strong>概念</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f5dc77f36b5b1047.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/940/format/webp" alt="img"></p><p><strong>问候（Hello）分组</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f9c642e76e871651.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>IP数据报首部中协议号字段的取值应为89，来表明IP数据报的数据载荷为OSPF分组</p></blockquote><p><strong>发送链路状态通告LSA</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-bbed8a0d31bf19c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>洪泛法有点类似于广播，就是从一个接口进来，从其他剩余所有接口出去</p></blockquote><p><strong>链路状态数据库同步</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6b8e10e2d82cfa6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>使用SPF算法计算出各自路由器到达其他路由器的最短路径</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-4239eee0b6040f52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>OSPF五种分组类型</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a2a83ab2654e270f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>OSPF的基本工作过程</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-339786779f0e1a82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>OSPF在多点接入网络中路由器邻居关系建立</strong></p><p>如果不采用其他机制，将会产生大量的多播分组</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6420e503df73b7ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>若DR出现问题，则由BDR顶替DR</p></blockquote><p><strong>为了使OSPF能够用于规模很大的网络，OSPF把一个自治系统再划分为若干个更小的范围，叫做区域（Area）</strong></p><ul><li>在该自治系统内，所有路由器都使用OSPF协议，OSPF将该自治系统再划分成4个更小的区域</li><li>每个区域都有一个32比特的区域标识符</li><li>主干区域的区域标识符必须为0，主干区域用于连通其他区域</li><li>其他区域的区域标识符不能为0且不相同</li><li>每个区域一般不应包含路由器超过200个</li><li>划分区域的好处就是，利用洪泛法交换链路状态信息局限于每一个区域而不是自治系统，这样减少整个网络上的通信量</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-725b3aab5aa350b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>总结</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6382df507ddd76d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="边界网关协议BGP"><a href="#边界网关协议BGP" class="headerlink" title="边界网关协议BGP"></a>边界网关协议BGP</h4><p>BGP（Border Gateway Protocol） 是<strong>不同自治系统的路由器之间</strong>交换路由信息的协议</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5aae9c53795e17a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/970/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-04fe6f98036db57c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-bc71c2ee5976ac53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-b472dd1a51f30666.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>在BGP刚刚运行时，BGP对等方之间要交换整个BGP路由表，之后只在变换时，更新有变化的部分。</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-67b837e6c27d5e9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>总结</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ce7dcde013985e95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="直接封装RIP、OSPF和BGP报文的协议"><a href="#直接封装RIP、OSPF和BGP报文的协议" class="headerlink" title="直接封装RIP、OSPF和BGP报文的协议"></a>直接封装RIP、OSPF和BGP报文的协议</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-40cf22cbd65e9ed8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="4-7、IPv4数据报的首部格式"><a href="#4-7、IPv4数据报的首部格式" class="headerlink" title="4.7、IPv4数据报的首部格式"></a>4.7、IPv4数据报的首部格式</h3><h4 id="各字段的作用"><a href="#各字段的作用" class="headerlink" title="各字段的作用"></a>各字段的作用</h4><ul><li>一个 IP 数据报由<strong>首部</strong>和<strong>数据</strong>两部分组成。</li><li><strong>首部的前一部分是固定长度，共 20 字节，是所有 IP 数据报必须具有的。</strong></li><li>在首部的固定部分的后面是一些可选字段，其长度是可变的。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-73800cce52c3a91e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>图中的每一行都由32个比特（也就是4个字节）构成，每个小格子称为字段或者域，每个字段或某些字段的组合用来表达IP协议的相关功能</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f1cf7dd2ea4eb52e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1196/format/webp" alt="img"></p><blockquote><p><strong>IP数据报的首部长度一定是4字节的整数倍</strong></p><p>因为首部中的可选字段的长度从1个字节到40个字节不等，那么，当20字节的固定部分加上1到40个字节长度不等的可变部分，<strong>会造成首部长度不是4字节整数倍时，就用取值为全0的填充字段填充相应个字节</strong>，以确保IP数据报的首部长度是4字节的整数倍</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f7bb4a2e440abdc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"><img src="https://upload-images.jianshu.io/upload_images/24878825-a014cde6b0ff9691.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>对IPv4数据报进行分片</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d7b3a6145ac1dde9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>现在假定分片2的IP数据报经过某个网络时还需要进行分片</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5d538557f988dc41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-45ab400eac660e4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-94a3b7c0b1f01488.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-b074f6fffe538c0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-07ac459878b48666.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-95863501601f7757.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="4-8、网际控制报文协议ICMP"><a href="#4-8、网际控制报文协议ICMP" class="headerlink" title="4.8、网际控制报文协议ICMP"></a>4.8、网际控制报文协议ICMP</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>架构IP网络时需要特别注意两点：</p><ul><li>确认网络是否正常工作</li><li>遇到异常时进行问题诊断</li></ul><p><strong>而ICMP就是实现这些问题的协议</strong></p><p>ICMP的主要功能包括：</p><ul><li>确认IP包是否成功送达目标地址</li><li>通知在发送过程当中IP包被废弃的具体原因</li><li>改善网络设置等</li></ul><p><strong>有了这些功能以后，就可以获得网络是否正常，设置是否有误以及设备有何异常等信息，从而便于进行网络上的问题诊断</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-8739d970a0300acc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>ICMP 不是高层协议（看起来好像是高层协议，因为 ICMP 报文是装在 IP 数据报中，作为其中的数据部分），而是 IP 层的协议</strong></p><p>ICMP 报文的格式</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6a02675fccdc2958.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/813/format/webp" alt="img"></p><h4 id="ICMP差错报告报文"><a href="#ICMP差错报告报文" class="headerlink" title="ICMP差错报告报文"></a>ICMP差错报告报文</h4><h5 id="终点不可达"><a href="#终点不可达" class="headerlink" title="终点不可达"></a>终点不可达</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-855edabd9c1e6298.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="源点抑制"><a href="#源点抑制" class="headerlink" title="源点抑制"></a>源点抑制</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-e7f27ef6c93c9621.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="时间超过"><a href="#时间超过" class="headerlink" title="时间超过"></a>时间超过</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-49d82185c88813fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1191/format/webp" alt="img"></p><h5 id="参数问题"><a href="#参数问题" class="headerlink" title="参数问题"></a>参数问题</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-e2457fe1291c9bca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="改变路由（重定向）"><a href="#改变路由（重定向）" class="headerlink" title="改变路由（重定向）"></a>改变路由（重定向）</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0ef50227f921ca79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1186/format/webp" alt="img"></p><h5 id="不应发送ICMP差错报告报文情况"><a href="#不应发送ICMP差错报告报文情况" class="headerlink" title="不应发送ICMP差错报告报文情况"></a>不应发送ICMP差错报告报文情况</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a0c3a21bb04ede42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="ICMP应用举例"><a href="#ICMP应用举例" class="headerlink" title="ICMP应用举例"></a>ICMP应用举例</h4><h5 id="分组网间探测PING（Packet-InterNet-Groper）"><a href="#分组网间探测PING（Packet-InterNet-Groper）" class="headerlink" title="分组网间探测PING（Packet InterNet Groper）"></a>分组网间探测PING（Packet InterNet Groper）</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-75d7bc12ca942415.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="跟踪路由（traceroute）"><a href="#跟踪路由（traceroute）" class="headerlink" title="跟踪路由（traceroute）"></a>跟踪路由（traceroute）</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-185af899d5e5a922.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/964/format/webp" alt="img"></p><p><strong>tracert命令的实现原理</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f59a9cacb015f074.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1191/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-982e09181a0bc4ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1191/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-aeefc9f3ac87d9d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-571c2187a7833f0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="4-9、虚拟专用网VPN与网络地址转换NAT"><a href="#4-9、虚拟专用网VPN与网络地址转换NAT" class="headerlink" title="4.9、虚拟专用网VPN与网络地址转换NAT"></a>4.9、虚拟专用网VPN与网络地址转换NAT</h3><h4 id="虚拟专用网VPN（Virtual-Private-Network）"><a href="#虚拟专用网VPN（Virtual-Private-Network）" class="headerlink" title="虚拟专用网VPN（Virtual Private Network）"></a>虚拟专用网VPN（Virtual Private Network）</h4><ul><li>由于 <strong>IP 地址的紧缺</strong>，一个机构能够申请到的IP地址数往往远小于本机构所拥有的主机数。</li><li>考虑到<strong>互联网并不很安全</strong>，一个机构内也并不需要把所有的主机接入到外部的互联网。</li><li>假定在一个机构内部的计算机通信也是采用 TCP&#x2F;IP 协议，那么从原则上讲，对于这些仅在<strong>机构内部使用</strong>的计算机就可以由本机构<strong>自行分配其 IP 地址</strong>。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f295c690e2c90d69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-aee1ae10f8ccb65f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f983b11370b6f354.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>上图是因特网数字分配机构IANA官网查看IPv4地址空间中特殊地址的分配方案</p><p>用粉红色标出来的地址就是无需申请的、可自由分配的专用地址，或称私有地址</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-93cca695182bf40f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>私有地址只能用于一个机构的内部通信，而不能用于和因特网上的主机通信</p><p>私有地址只能用作本地地址而不能用作全球地址</p><p>因特网中所有路由器对目的地址是私有地址的IP数据报一律不进行转发</p><p><strong>本地地址与全球地址</strong></p><ul><li><p><strong>本地地址</strong>——仅在机构内部使用的 IP 地址，可以由本机构自行分配，而不需要向互联网的管理机构申请。</p></li><li><p><strong>全球地址</strong>——全球唯一的 IP 地址，必须向互联网的管理机构申请。</p></li><li><p><strong>问题</strong>：在内部使用的本地地址就有可能和互联网中某个 IP 地址重合，这样就会出现地址的二义性问题。</p></li></ul></blockquote><p>所以部门A和部门B至少需要一个 路由器具有合法的全球IP地址，这样各自的专用网才能利用公用的因特网进行通信</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ab2d75fcfc34f709.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>部门A向部门B发送数据流程</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-3a739ef0d60a031e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>两个专用网内的主机间发送的数据报是通过了公用的因特网，但在效果上就好像是在本机构的专用网上传送一样</p><p>数据报在因特网中可能要经过多个网络和路由器，但从逻辑上看，R1和R2之间好像是一条直通的点对点链路</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ad9e5dcca8c0a1c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>因此也被称为IP隧道技术</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6731dbc8b1ee1abc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="网络地址转换NAT（Network-Address-Translation）"><a href="#网络地址转换NAT（Network-Address-Translation）" class="headerlink" title="网络地址转换NAT（Network Address Translation）"></a>网络地址转换NAT（Network Address Translation）</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f9f42bd392a2375a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>举例</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c489215f07bc88f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>使用私有地址的主机，如何才能与因特网上使用全球IP地址的主机进行通信？</p><p>这需要在专用网络连接到因特网的路由器上安装NAT软件</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-41ae75149e86d0fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>专有NAT软件的路由器叫做NAT路由器</p><p>它至少有一个有效的外部全球IP地址</p><p>这样，所有使用私有地址的主机在和外界通信时，都要在NAT路由器上将其私有地址转换为全球IP地址</p></blockquote><p>假设，使用私有地址的主机要给因特网上使用全球IP地址的另一台主机发送IP数据报</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a74e4efad5297fc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>因特网上的这台主机给源主机发回数据报</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c0463dd919523857.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>当专用网中的这两台使用私有地址的主机都要给因特网使用全球地址的另一台主机发送数据报时，在NAT路由器的NAT转换表中就会产生两条记录，分别记录两个私有地址与全球地址的对应关系</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-3f71256d68f6a39a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>这种基本转换存在一个问题</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ff2eca30cc7a7b41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/953/format/webp" alt="img"></p><p>解决方法</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-05d3e1e3fd4b1998.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>我们现在用的很多家用路由器都是这种NART路由器</p></blockquote><p>内网主机与外网主机的通信，是否能由外网主机首先发起？</p><p>否定</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d2fd109d060e4853.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ff43ea52e61da271.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-2a40d3a6e5d9e15a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="五、运输层"><a href="#五、运输层" class="headerlink" title="五、运输层"></a>五、运输层</h2><h3 id="运输层概述"><a href="#运输层概述" class="headerlink" title="运输层概述"></a>运输层概述</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p><strong>进程之间的通信</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-86df51cb4523e3bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/607/format/webp" alt="img"></p><ul><li>从通信和信息处理的角度看，运输层向它上面的应用层提供通信服务，<strong>它属于面向通信部分的最高层，同时也是用户功能中的最低层</strong>。</li><li>当网络的边缘部分中的两个主机使用网络的核心部分的功能进行端到端的通信时，<strong>只有位于网络边缘部分的主机的协议栈才有运输层</strong>，而网络核心部分中的路由器在转发分组时都只用到三层（到网络层）的功能。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-09b69e8c98c856d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>进程之间通信流程</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d9a70806edc95dc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>“逻辑通信”是指运输层之间的通信好像是沿水平方向传送数据，但事实上，这两条数据并没有一条水平方向的物理连接，要传送的数据是沿着图中上下多次的虚线方向传送的</p><blockquote><p>进程Ap1与Ap4之间进行基于网络的通信，进程Ap2与Ap3之间进行基于网络的通信</p><p>在运输层使用不同的端口，来对应不同的应用进程</p><p>然后通过网络层及其下层来传输应用层报文</p><p>接收方的运输层通过不同的端口，将收到的应用层报文，交付给应用层中相应的应用进程</p><p><strong>这里端口并不是指看得见、摸得着的物理端口，而是指用来区分不同应用进程的标识符</strong></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a6a6ccc0bbd7f56f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-49194e15f1010ebe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-04161b0a03409d04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/951/format/webp" alt="img"></p><hr><h3 id="运输层端口号、复用与分用的概念"><a href="#运输层端口号、复用与分用的概念" class="headerlink" title="运输层端口号、复用与分用的概念"></a>运输层端口号、复用与分用的概念</h3><h4 id="为什么用端口号"><a href="#为什么用端口号" class="headerlink" title="为什么用端口号"></a>为什么用端口号</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-de597eda77aa6acd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="发送方的复用和接收方的分用"><a href="#发送方的复用和接收方的分用" class="headerlink" title="发送方的复用和接收方的分用"></a>发送方的复用和接收方的分用</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-2a4ec3f5d5c11433.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p><strong>多个进程（这里一个端口表示一个进程）</strong> 利用一个运输层协议（或者称为运输层接口）<strong>发送</strong>数据称为 <strong>复用</strong></p><p><strong>多个进程（这里一个端口表示一个进程）</strong> 利用一个运输层协议（或者称为运输层接口）<strong>接收</strong>时叫做 <strong>分用</strong>。</p></blockquote><h4 id="TCP-x2F-IP体系的应用层常用协议所使用的运输层熟知端口号"><a href="#TCP-x2F-IP体系的应用层常用协议所使用的运输层熟知端口号" class="headerlink" title="TCP&#x2F;IP体系的应用层常用协议所使用的运输层熟知端口号"></a>TCP&#x2F;IP体系的应用层常用协议所使用的运输层熟知端口号</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-2117fa99a7f2a89c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="运输层传输流程"><a href="#运输层传输流程" class="headerlink" title="运输层传输流程"></a>运输层传输流程</h4><p>举例</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-1a74e63c3af96dda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>在浏览器输入域名，回车浏览</p><p>然后用户PC中的DNS客户端进程会发送一个DNS查询请求报文</p><p>DNS查询请求报文需要使用运输层的UDP协议</p><p>首部中的源端口字段的值，在短暂端口号49151~65535中挑选一个未被占用的，用来表示DNS客户端进程</p><p>首部中的目的端口字段的值：53，是DNS服务器端进程所使用的熟知端口号</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-30701c2470e290ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>之后，将UDP用户数据报封装在IP数据报中，通过以太网发送给DNS服务器</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c4b699dfdd16826d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>DNS服务器收到该IP数据报后，从中解封出UDP用户数据报</p><p>UDP首部中的目的端口号为53，这表明应将该UDP用户数据报的数据载荷部分，也就是DNS查询请求报文，交付给本服务器中的DNS服务器端进程</p><p>DNS服务器端进程解析DNS查询请求报文的内容，然后按其要求查找对应的IP地址</p><p>之后，会给用户PC发送DNS响应报文，DNS响应报文需要使用运输层的UDP协议封装成UDP用户数据报</p><p>其首部中的源端口字段的值设置为熟知端口号53，表明这是DNS服务器端进程所发送的UDP用户数据报，目的端口的值设置为49152，这是之前用户PC中发送DNS查询请求报文的DNS客户端进程所使用的短暂端口号</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6912810cd1134dc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>将UDP用户数据报封装在IP数据报中，通过以太网发送给用户PC</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-eddf54c480b0a2b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>用户PC收到该数据报后，从中解封出UDP用户数据报</p><p>UDP首部中的目的端口号为49152，这表明应将该UDP用户数据报的数据载荷部分，也就是DNS响应报文，交付给用户PC中的DNS客户端进程</p><p>DNS客户端进程解析DNS响应报文的内容，就可知道自己之前所请求的Web服务器的域名对应的IP地址</p></blockquote><p>现在用户PC中的HTTP客户端进程可以向Web服务器发送HTTP请求报文（和DNS发送和接收流程差不多）</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-e60fa3dedd69fae7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-1184eefc458e27b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5fd36c843b4e1bab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-62b9ed69203838ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-4e8b2e2943e1ec81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h3 id="UDP和TCP的对比"><a href="#UDP和TCP的对比" class="headerlink" title="UDP和TCP的对比"></a>UDP和TCP的对比</h3><h4 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h4><ul><li><strong>UDP</strong> 和 <strong>TCP</strong> 是TCP&#x2F;IP体系结构<strong>运输层</strong>中的两个重要协议</li><li>当运输层采用面向连接的 <strong>TCP</strong> 协议时，尽管下面的网络是不可靠的（只提供尽最大努力服务），但这种逻辑通信信道就相当于一条<strong>全双工的可靠信道</strong>。</li><li>当运输层采用无连接的 <strong>UDP</strong> 协议时，这种逻辑通信信道是一条<strong>不可靠信道</strong>。</li></ul><p>可靠信道与不可靠信道</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-fceecce4ac04df77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/909/format/webp" alt="img"></p><ul><li>两个对等运输实体在通信时传送的数据单位叫作<strong>运输协议数据单元</strong> TPDU (Transport Protocol Data Unit)。</li><li>TCP 传送的数据单位协议是 <strong>TCP 报文段</strong>(segment)。</li><li>UDP 传送的数据单位协议是 <strong>UDP 报文</strong>或<strong>用户数据报</strong>。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-58c94f043969af9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>UDP的通信是无连接的，不需要套接字（Socket）</p><p>TCP是面向连接的，TCP之间的通信必须要在两个套接字（Socket）之间建立连接</p><blockquote><p>套接字(Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。</p></blockquote><h4 id="用户数据报协议UDP（User-Datagram-Protocol）"><a href="#用户数据报协议UDP（User-Datagram-Protocol）" class="headerlink" title="用户数据报协议UDP（User Datagram Protocol）"></a>用户数据报协议UDP（User Datagram Protocol）</h4><p>可以发送广播</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6b064807ce85da9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/937/format/webp" alt="img"></p><p>可以向某个多播组发送多播</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ad578349b071fd1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/983/format/webp" alt="img"></p><p>还可以发送单播</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-4d5ff7d4922fd433.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/914/format/webp" alt="img"></p><blockquote><p>UDP 支持单播、多播以及广播</p><p>换句话说，UDP支持一对一，一对多，以及一对全的通信</p></blockquote><p>运输过程</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-93e3dea8064d7a6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/949/format/webp" alt="img"></p><blockquote><p>UDP对应用进程交下来的报文既不合并也不拆分，而是保留这些报文的边界</p><p>换句话说，UDP是面向应用报文的</p></blockquote><p>UDP向上层提供无连接不可靠传输服务</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ce94f5cade6a0e97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/970/format/webp" alt="img"></p><p>UDP结构</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-624005a24bc5bfcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/871/format/webp" alt="img"></p><h4 id="传输控制协议TCP（Transmission-Control-Protocol）"><a href="#传输控制协议TCP（Transmission-Control-Protocol）" class="headerlink" title="传输控制协议TCP（Transmission Control Protocol）"></a>传输控制协议TCP（Transmission Control Protocol）</h4><p>使用TCP协议的通信双方，在进行数据传输之前，必须使用“三报文握手”建立TCP连接</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-fe9d1bdd35dbd5d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/920/format/webp" alt="img"></p><p>TCP连接建立成功后，通信双方之间就好像有一条可靠的通信信道，通信双方使用这条基于TCP连接的可靠信道进行通信</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-e193eb63d50a9c79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/932/format/webp" alt="img"></p><blockquote><p>很显然，TCP仅支持单播，也就是一对一的通信</p></blockquote><p>运输过程</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-cd38698ad784fcea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/951/format/webp" alt="img"></p><blockquote><p>发送方</p><ul><li><p>TCP会把应用进程交付下来的数据块看作是一连串无结构的字节流，TCP并不知道这些待传送的字节流的含义</p></li><li><p>并将他们编号，并存储在自己发送缓存中</p></li><li><p>TCP会根据发送策略，提取一定量的字节构建TCP报文并发送</p></li></ul><p>接收方</p><ul><li><p>一方面从所接受到的TCP报文段中，取出数据载荷部分并存储在接收缓存中；一方面将接收缓存中的一些字节交付给应用进程</p></li><li><p>TCP不保证接收方应用进程所收到的数据块与发送方发送的数据块，具有对应大小的关系（例如，发送方应用进程交给发送方的TCP共10个数据块，但接收方的TCP可能只用了4个数据块，就把收到的字节流交付给了上层的应用进程，但接收方收到的字节流必须和发送方应用进程发出的字节流完全一样）</p></li><li><p>接收方的应用进程必须有能力识别收到的字节流，把它还原成有意义的应用层数据</p></li></ul><p>TCP是面向字节流的，这正是TCP实现可靠传输、流量控制、以及拥塞控制的基础</p><p>本图只画了一个方向的数据流，在实际网络中，基于TCP连接的两端，可以同时进行TCP报文段的发送和接收</p></blockquote><p>TCP向上层提供面向连接的可靠传输服务</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-915eafb17567c438.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/932/format/webp" alt="img"></p><p>TCP结构</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-db48b70af7fb7884.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/897/format/webp" alt="img"></p><h4 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-b0c1d4146735458a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h3><h4 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-2265c15b05b648dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>举例</p><p><a href="https://links.jianshu.com/go?to=https://www.bilibili.com/video/BV1c4411d7jb?p=60">具体流程的视频</a></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-b05bfb5781a99f95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>上图主机A现在可将发送缓存中序号1~200的字节数据全部删除，因为已经收到了主机B对它们的累计确认</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-822d96dec58ce11f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>上图主机A现在可将发送缓存中序号201~500的字节数据全部删除，因为已经收到了主机B对它们的累计确认</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-43345f50233197a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f73e94f75e94ea4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>上图主机A现在可将发送缓存中序号501~600的字节数据全部删除，因为已经收到了主机B对它们的累计确认</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5bd53b8a5a5ac400.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ea9dc3589e6c6bd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>上图如果零窗口探测报文在发送过程中如果丢失，还是能打破死锁局面</p><p>因为零窗口探测报文段也有重传计时器，重传计时器超时后，零窗口探测报文段会被重传</p></blockquote><h4 id="总结-10"><a href="#总结-10" class="headerlink" title="总结"></a>总结</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d8221e9dda7919f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h3><h4 id="概念-5"><a href="#概念-5" class="headerlink" title="概念"></a>概念</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-9d4b410b2a44c125.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>网络拥塞往往是由许多因素引起的。例如：</strong></p><ol><li>点缓存的容量太小；</li><li>链路的容量不足；</li><li>处理机处理的速率太慢；</li><li>拥塞本身会进一步加剧拥塞；</li></ol><p><strong>拥塞控制的一般原理</strong></p><ul><li>拥塞控制的前提：网络能够承受现有的网络负荷。</li><li>实践证明，拥塞控制是很难设计的，因为它是一个<strong>动态问题</strong>。</li><li>分组的丢失是网络发生拥塞的<strong>征兆</strong>而不是原因。</li><li>在许多情况下，甚至正是<strong>拥塞控制本身</strong>成为引起网络性能恶化、甚至发生死锁的原因。</li></ul><p><strong>开环控制和闭环控制</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-2740d71c5e1d6aac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/884/format/webp" alt="img"></p><p><strong>监测网络的拥塞</strong></p><p>主要指标有：</p><ol><li>由于缺少缓存空间而被丢弃的分组的百分数；</li><li>平均队列长度；</li><li>超时重传的分组数；</li><li>平均分组时延；</li><li>分组时延的标准差，等等。</li></ol><p>上述这些指标的上升都标志着拥塞的增长。</p><h4 id="拥塞控制的算法"><a href="#拥塞控制的算法" class="headerlink" title="拥塞控制的算法"></a>拥塞控制的算法</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-67852fc13fc0e263.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c7682fe29ebcb6fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>真正的发送窗口值 &#x3D; Min (接收方窗口值，拥塞窗口值)</p></blockquote><p>下图的实例横纵坐标的意思</p><p>传输轮次：</p><ul><li>发送方给接收方发送数据报文段后，接收方给发送方发发回相应的确认报文段</li><li>一个传输轮次所经历的时间其实就是往返时间，往返时间并非是恒定的数值</li><li>使用传输轮次是为了强调把拥塞窗口所允许发送的报文段都连续发送出去，并受到了对已发送的最后一个报文段的确认</li></ul><p>拥塞窗口：</p><ul><li>它会随网络拥塞程度，以及所使用的拥塞控制算法动态变化</li></ul><h4 id="慢开始和拥塞避免"><a href="#慢开始和拥塞避免" class="headerlink" title="慢开始和拥塞避免"></a>慢开始和拥塞避免</h4><h5 id="慢开始（slow-start）"><a href="#慢开始（slow-start）" class="headerlink" title="慢开始（slow-start）"></a>慢开始（slow-start）</h5><ul><li>目的：用来确定网络的负载能力或拥塞程度。</li><li>算法的思路：由小到大逐渐增大拥塞窗口数值。</li><li>两个变量：<ul><li><strong>拥塞窗口（cwnd）</strong>：初始拥塞窗口值：2 种设置方法。窗口值逐渐增大。<ul><li>1 至 2 个最大报文段 （旧标准）</li><li>2 至 4 个最大报文段 （RFC 5681）</li></ul></li><li><strong>慢开始门限（ssthresh）</strong>：防止拥塞窗口增长过大引起网络拥塞。</li></ul></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-47dba7f2068f35df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-1bca665e8eaa965a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/713/format/webp" alt="img"></p><blockquote><p>图中swnd是发送窗口</p><p>每经过一个传输轮次，拥塞窗口就加倍</p><p>窗口大小按<strong>指数增加</strong>，2的n-1次方</p></blockquote><h5 id="拥塞避免（congestion-avoidance）"><a href="#拥塞避免（congestion-avoidance）" class="headerlink" title="拥塞避免（congestion avoidance）"></a>拥塞避免（congestion avoidance）</h5><ul><li>思路：让拥塞窗口 cwnd <strong>缓慢地增大</strong>，避免出现拥塞。</li><li>每经过一个传输轮次，拥塞窗口 <strong>cwnd &#x3D; cwnd + 1</strong>。</li><li>使拥塞窗口 cwnd 按线性规律缓慢增长。</li><li>在拥塞避免阶段，具有 “<strong>加法增大</strong>” (Additive Increase) 的特点。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-28dacc122d9ef398.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>如果在发送过程中出现部分报文段丢失，这必然会造成发送方对这些丢失报文段的超时重传</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c35271774108d273.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>这个时候又回到了慢开始</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-233c4e9e061dc1d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-98094e880a6fad4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="两个算法完整示意图"><a href="#两个算法完整示意图" class="headerlink" title="两个算法完整示意图"></a>两个算法完整示意图</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f5db7ea25d8aca73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="快重传和快恢复"><a href="#快重传和快恢复" class="headerlink" title="快重传和快恢复"></a>快重传和快恢复</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-fee86fb3707a175c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="快重传（fast-retrasmit）"><a href="#快重传（fast-retrasmit）" class="headerlink" title="快重传（fast retrasmit）"></a>快重传（fast retrasmit）</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a57c7cc819aa4bae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="快恢复（fast-recovery）"><a href="#快恢复（fast-recovery）" class="headerlink" title="快恢复（fast recovery）"></a>快恢复（fast recovery）</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ab5a63efbd586eb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="改进后的整体算法的示意图"><a href="#改进后的整体算法的示意图" class="headerlink" title="改进后的整体算法的示意图"></a>改进后的整体算法的示意图</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-8f61b8eddb5b2624.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="TCP超时重传时间的选择"><a href="#TCP超时重传时间的选择" class="headerlink" title="TCP超时重传时间的选择"></a>TCP超时重传时间的选择</h3><p><img src="https://upload-images.jianshu.io/upload_images/24878825-855245410fc0ff17.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>如果超时重传时间RTO的值设置得比RTT0的值小很多，这会引起报文段不必要的重传，使网络负荷增大</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-789e0116477a41df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>如果超时重传时间RTO的值设置得远大于RTT0的值，这会使重传时间推迟的太长，使网络的空闲时间增大，降低传输效率</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-994128acb2576516.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-20d1cf6bb211fe7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>RFC6298建议使用下式计算超时重传时间RTO</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-39ab62874e65b623.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>往返时间RTT的测量比较复杂</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d454ebe83c1133ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-dbc63525eab966e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>TCP超时重传的计算</strong></p><p>举例</p><p>RTTd的RTTs是上一个的RTTs.</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-7d23bd8b0a165628.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>总结</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c94fa8a3ad6b277f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="TCP可靠传输的实现"><a href="#TCP可靠传输的实现" class="headerlink" title="TCP可靠传输的实现"></a>TCP可靠传输的实现</h3><p><a href="https://links.jianshu.com/go?to=https://www.bilibili.com/video/BV1c4411d7jb?p=63">本集具体讲解</a></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6d10ea76a1ea032b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-92d975bc880db892.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-35bff0a8cc5b0d71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="TCP的运输连接管理"><a href="#TCP的运输连接管理" class="headerlink" title="TCP的运输连接管理"></a>TCP的运输连接管理</h3><h4 id="概念-6"><a href="#概念-6" class="headerlink" title="概念"></a>概念</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-e7d2329746de8e6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="TCP的连接建立"><a href="#TCP的连接建立" class="headerlink" title="TCP的连接建立"></a>TCP的连接建立</h4><ul><li>TCP 建立连接的过程叫做<strong>握手</strong>。</li><li>握手需要在客户和服务器之间交换三个 TCP 报文段。称之为<strong>三报文握手</strong>。</li><li>采用<strong>三报文握手</strong>主要是为了防止已失效的连接请求报文段突然又传送到了，因而产生错误。</li></ul><h5 id="TCP的连接建立要解决以下三个问题"><a href="#TCP的连接建立要解决以下三个问题" class="headerlink" title="TCP的连接建立要解决以下三个问题"></a>TCP的连接建立要解决以下三个问题</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-84c2b6dbb20379bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="TCP使用“三报文握手”建立连接"><a href="#TCP使用“三报文握手”建立连接" class="headerlink" title="TCP使用“三报文握手”建立连接"></a>TCP使用“三报文握手”建立连接</h5><ul><li>TCP 连接的建立<strong>采用客户服务器方式</strong>。</li><li>主动发起连接建立的应用进程叫做<strong>TCP客户</strong> (client)。</li><li>被动等待连接建立的应用进程叫做<strong>TCP服务器</strong> (server)。</li></ul><p>“握手”需要在TCP客户端和服务器之间交换三个TCP报文段</p><p>过程</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-9f509a892fb0f5c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>最初两端的TCP进程都处于关闭状态</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-e69d0e450b080e1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>一开始，TCP服务器进程首先创建传输控制块，用来存储TCP连接中的一些重要信息。例如TCP连接表、指向发送和接收缓存的指针、指向重传队列的指针，当前的发送和接收序号等</p><p>之后，就准备接受TCP客户端进程的连接请求</p><p>此时，TCP服务器进程就进入监听状态，等待TCP客户端进程的连接请求</p></blockquote><p>TCP服务器进程是被动等待来自TCP客户端进程的连接请求，因此成为<strong>被动打开</strong>连接</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-9e597559ec8fcae8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>TCP客户进程也是首先创建传输控制块</p></blockquote><p>由于TCP连接建立是由TCP客户端主动发起的，因此称为<strong>主动打开</strong>连接</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-46865d700124bfd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>然后，在打算建立TCP连接时，向TCP服务器进程发送TCP连接请求报文段，并进入同步已发送状态</p><p>TCP连接请求报文段首部中</p><ul><li><p>同步位SYN被设置为1，表明这是一个TCP连接请求报文段</p></li><li><p>序号字段seq被设置了一个初始值x，作为TCP客户端进程所选择的初始序号</p></li></ul><p>请注意：TCP规定SYN被设置为1的报文段不能携带数据，但要消耗掉一个序号</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f8dec0443dc56584.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>TCP服务器进程收到TCP连接请求报文段后，如果同意建立连接，则向TCP客户进程发送TCP连接请求确认报文段，并进入同步已接收状态</p><p>TCP连接请求确认报文段首部中</p><ul><li><p>同步位SYN和确认为ACK都设置为1，表明这是一个TCP连接请求确认报文段</p></li><li><p>序号字段seq被设置了一个初始值y，作为TCP服务器进程所选择的初始序号，</p></li><li><p>确认号字段ack的值被设置成了x+1，这是对TCP客户进程所选择的初始序号（seq）的确认</p></li></ul><p>请注意：这个报文段也不能携带数据，因为它是SYN被设置为1的报文段，但同样要消耗掉一个序号</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c6b6b91049a352db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>TCP客户进程收到TCP连接请求确认报文段后，还要向TCP服务器进程发送一个普通的TCP确认报文段，并进入连接已连接状态</p><p>普通的TCP确认报文段首部中</p><ul><li><p>确认位ACK被设置为1，表明这是一个普通的TCP确认报文段</p></li><li><p>序号字段seq被设置为x+1，这是因为TCP客户进程发送的第一个TCP报文段的序号为x，所以TCP客户进程发送的第二个报文段的序号为x+1</p></li><li><p>确认号字段ack被设置为y+1，这是对TCP服务器进程所选择的初始序号的确认</p></li></ul><p>请注意：TCP规定普通的TCP确认报文段可以携带数据，但如果不携带数据，则不消耗序号</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-987d5c8512392422.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>TCP服务器进程收到该确认报文段后也进入连接已建立状态</p><p>现在，TCP双方都进入了连接已建立状态，它们可以基于已建立好的TCP连接，进行可靠的数据传输</p></blockquote><p>为什么TCP客户进程最后还要发送一个普通的TCP确认报文段？能否使用“两报文握手”建立连接？</p><p>下图实例是“两报文握手”</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0a5773a600817c41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>为了防止已经失效的连接请求报文段突然又传到服务端，因而产生错误”，这种情况是：一端(client)A发出去的第一个连接请求报文并没有丢失，而是因为某些未知的原因在某个网络节点上发生滞留，导致延迟到连接释放以后的某个时间才到达另一端(server)B。本来这是一个早已失效的报文段，但是B收到此失效的报文之后，会误认为是A再次发出的一个新的连接请求，于是B端就向A又发出确认报文，表示同意建立连接。如果不采用“三次握手”，那么只要B端发出确认报文就会认为新的连接已经建立了，但是A端并没有发出建立连接的请求，因此不会去向B端发送数据，B端没有收到数据就会一直等待，这样B端就会白白浪费掉很多资源。<br> 所以并不<strong>多余</strong>，这是为了防止已失效的连接请求报文段突然又传送到了TCP服务器，因而导致错误</p></blockquote><h5 id="总结-11"><a href="#总结-11" class="headerlink" title="总结"></a>总结</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-3205fd7d7d75b62e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="TCP的连接释放"><a href="#TCP的连接释放" class="headerlink" title="TCP的连接释放"></a>TCP的连接释放</h4><ul><li>TCP 连接释放过程比较复杂。</li><li>数据传输结束后，通信的双方都可释放连接。</li><li>TCP 连接释放过程是<strong>四报文握手</strong>。</li></ul><h4 id="TCP通过“四报文挥手”来释放连接"><a href="#TCP通过“四报文挥手”来释放连接" class="headerlink" title="TCP通过“四报文挥手”来释放连接"></a>TCP通过“四报文挥手”来释放连接</h4><ul><li>TCP 连接的建立<strong>采用客户服务器方式</strong>。</li><li>主动发起连接建立的应用进程叫做<strong>TCP客户</strong> (client)。</li><li>被动等待连接建立的应用进程叫做<strong>TCP服务器</strong> (server)。</li><li><strong>任何一方都可以在数据传送结束后发出连接释放的通知</strong></li></ul><p>过程</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d56a05b1da63bf01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>现在TCP客户进程和TCP服务器进程都处于连接已建立状态</p><p>TCP客户进程的应用进程通知其主动关闭TCP连接</p><p>TCP客户进程会发送TCP连接释放报文段，并进入终止等待1状态</p><p>TCP连接释放报文段首部中</p><ul><li><p>终止位FIN和确认为ACK的值都被设置为1，表明这是一个TCP连接释放报文段，同时也对之前收到的报文段进行确认</p></li><li><p>序号seq字段的值设置为u，它等于TCP客户进程之前已传送过的数据的最后一个字节的序号加1</p></li><li><p>确认号ack字段的值设置为v，它等于TCP客户进程之前已收到的、数据的最后一个字节的序号加1</p></li></ul><p>请注意：TCP规定终止位FIN等于1的报文段即使不携带数据，也要消耗掉一个序号</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d8be7c2c584d245a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>TCP服务器进程收到TCP连接释放报文段后，会发送一个普通的TCP确认报文段并进入关闭等待状态</p><p>普通的TCP确认报文段首部中</p><ul><li><p>确认位ACK的值被设置为1，表明这是一个普通的TCP确认报文段</p></li><li><p>序号seq字段的值设置为v，它等于TCP服务器进程之前已传送过的数据的最后一个字节的序号加1，这也与之前收到的TCP连接释放报文段中的确认号匹配</p></li><li><p>确认号ack字段的值设置为u+1，这是对TCP连接释放报文段的确认</p></li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-733705e761921b6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>TCP服务器进程应该通知高层应用进程，TCP客户进程要断开与自己的TCP连接</p><p>此时，从TCP客户进程到TCP服务器进程这个方向的连接就释放了</p><p>这时的TCP连接属于半关闭状态，也就是TCP客户进程已经没有数据要发送了</p><p>但如果TCP服务器进程还有数据要发送，TCP客户进程仍要接收，也就是说从TCP服务器进程到TCP客户进程这个方向的连接并未关闭</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-583da1984154448c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>TCP客户进程收到TCP确认报文段后就进入终止等待2状态，等待TCP服务器进程发出的TCP连接释放报文段</p><p>若使用TCP服务器进程的应用进程已经没有数据要发送了，应用进程就通知其TCP服务器进程释放连接</p><p>由于TCP连接释放是由TCP客户进程主动发起的，因此TCP服务器进程对TCP连接的释放称为被动关闭连接</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-60b55978f2d24a50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>TCP服务器进程发送TCP连接释放报文段并进入最后确认状态</p><p>该报文段首部中</p><ul><li><p>终止位FIN和确认位ACK的值都被设置为1，表明这是一个TCP连接释放报文段，同时也对之前收到的报文段进行确认</p></li><li><p>序号seq字段的值为w，这是因为在半关闭状态下，TCP服务器进程可能又发送</p></li><li><p>确认号ack字段的值为u+1，这是对之前收到的TCP连接释放报文段的重复确认</p></li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-1c5e0c6357d039ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>TCP客户进程收到TCP连接释放报文段后，必须针对该报文段发送普通的TCP确认报文段，之后进入时间等待状态</p><p>该报文段首部中</p><ul><li><p>确认为ACK的值被设置为1，表明这是一个普通的TCP确认报文段</p></li><li><p>序号seq字段的值设置为u+1，这是因为TCP客户进程之前发送的TCP连接释放报文段虽然不携带数据，但要消耗掉一个序号</p></li><li><p>确认号ack字段的值设置为w+1，这是对所收到的TCP连接释放报文段的确认</p></li></ul><p>TCP服务器进程收到该报文段后就进入关闭状态，而TCP客户进程还要进过2MSL后才能进入关闭状态</p></blockquote><p>TCP客户进程在发送完最后一个确认报文后，为什么不直接进入关闭状态？而是要进入时间等待状态？</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-ef85470fe120f146.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>因为时间等待状态以及处于该状态2MSL时长，可以确保TCP服务器进程可以收到最后一个TCP确认报文段而进入关闭状态</p><p>另外，TCP客户进程在发送完最后一个TCP确认报文段后，在经过2MSL时长，就可以使本次连接持续时间内所产生的所有报文段都从网络中消失，这样就可以使下一个新的TCP连接中，不会出现旧连接中的报文段</p></blockquote><h4 id="TCP保活计时器的作用"><a href="#TCP保活计时器的作用" class="headerlink" title="TCP保活计时器的作用"></a>TCP保活计时器的作用</h4><p>TCP双方已经建立了连接，后来，TCP客户进程所在的主机突然出现了故障</p><p>TCP服务器进程以后就不能再收到TCP客户进程发来的数据</p><p>因此，应当有措施使TCP服务器进程不要再白白等待下去</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-2dc97e06fe1d82ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="TCP报文段的首部格式"><a href="#TCP报文段的首部格式" class="headerlink" title="TCP报文段的首部格式"></a>TCP报文段的首部格式</h3><p><img src="https://upload-images.jianshu.io/upload_images/24878825-df9263a14e1da2c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="各字段的作用-1"><a href="#各字段的作用-1" class="headerlink" title="各字段的作用"></a>各字段的作用</h4><p>源端口和目的端口</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-27e4bd51d5db2f8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>序号、确认号和确认标志位</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-fd0e64d8be3f598b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>数据偏移、保留、窗口和校验和</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d3d4c61af68fdb6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>同步标志位、终止标志位、复位标志位、推送标志位、紧急标志位和紧急指针</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-f09bdaba863c4ca3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>选项和填充</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d1a8d3ca5ac7f39d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1185/format/webp" alt="img"></p><h2 id="六、应用层"><a href="#六、应用层" class="headerlink" title="六、应用层"></a>六、应用层</h2><h3 id="应用层概述"><a href="#应用层概述" class="headerlink" title="应用层概述"></a>应用层概述</h3><p><img src="https://upload-images.jianshu.io/upload_images/24878825-968c1bcea54ea1f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-3d48b52ccf2bda5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>我们在浏览器的地址中输入某个网站的域名后，就可以访问该网站的内容，这个就是<strong>万维网WWW应用</strong>，其相关的应用层协议为<strong>超文本传送协议HTTP</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-877daae73d0011c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>用户在浏览器地址栏中输入的是“见名知意”的<strong>域名</strong>，而TCP&#x2F;IP的网际层使用<strong>IP地址</strong>来表示目的主机，从域名到IP地址的装转换，由属于<strong>应用层范畴的域名系统DNS</strong>，在后台帮用户完成</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-295acc2503d1ac7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>常见的应用</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-4e9858624d4835ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>总结</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c1c3868fb5e127b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="客户-x2F-服务器方式（CS）和对等方式（P2P）"><a href="#客户-x2F-服务器方式（CS）和对等方式（P2P）" class="headerlink" title="客户&#x2F;服务器方式（CS）和对等方式（P2P）"></a>客户&#x2F;服务器方式（CS）和对等方式（P2P）</h3><h4 id="概念-7"><a href="#概念-7" class="headerlink" title="概念"></a>概念</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-983cfa1e406fd20c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="客户-x2F-服务器方式（C-x2F-S方式）"><a href="#客户-x2F-服务器方式（C-x2F-S方式）" class="headerlink" title="客户&#x2F;服务器方式（C&#x2F;S方式）"></a>客户&#x2F;服务器方式（C&#x2F;S方式）</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-bbfb139bb8ffd796.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1189/format/webp" alt="img"></p><h4 id="对等方式（P2P方式）"><a href="#对等方式（P2P方式）" class="headerlink" title="对等方式（P2P方式）"></a>对等方式（P2P方式）</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-598b1158f5c33a11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1184/format/webp" alt="img"></p><h4 id="总结-12"><a href="#总结-12" class="headerlink" title="总结"></a>总结</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-7fce507085bc7053.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1178/format/webp" alt="img"></p><hr><h3 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h3><h4 id="概念-8"><a href="#概念-8" class="headerlink" title="概念"></a>概念</h4><ul><li>互联网广泛使用的<strong>动态主机配置协议 DHCP</strong> (Dynamic Host Configuration Protocol) 提供了<strong>即插即用连网</strong> (plug-and-play networking) 的机制。</li><li>这种机制允许一台计算机加入新的网络和获取 IP 地址，而不用手工配置。</li></ul><h4 id="DHCP的作用"><a href="#DHCP的作用" class="headerlink" title="DHCP的作用"></a>DHCP的作用</h4><p>在之前，如果要正常访问Web服务器，需要该主机手动配置网络的相关配置信息</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5b86de9e3dfe3c59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>如果主机数很多，就工作量大，容易出错</p></blockquote><p>如果我们给网络中添加一台DHCP服务器</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-4d701885461e9193.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="DHCP的工作过程"><a href="#DHCP的工作过程" class="headerlink" title="DHCP的工作过程"></a>DHCP的工作过程</h4><p><strong>DHCP 使用客户 - 服务器方式</strong></p><ul><li>需要 IP 地址的主机在启动时就向 DHCP 服务器广播发送发现报文  （DHCP DISCOVER），这时该主机就成为 DHCP 客户。</li><li>本地网络上所有主机都能收到此广播报文，但只有 DHCP 服务器才回答此广播报文。</li><li>DHCP 服务器先在其数据库中查找该计算机的配置信息。若找到，则返回找到的信息。若找不到，则从服务器的 IP 地址池 (address pool) 中取一个地址分配给该计算机。DHCP服务器的回答报文叫做提供报文（DHCP OFFER）。</li></ul><p><strong>DHCP 工作方式</strong></p><ul><li>DHCP 使用客户-服务器方式，采用请求&#x2F;应答方式工作。</li><li>DHCP 基于 UDP 工作（DHCP报文在运输层会被封装成为UDP用户数据报），DHCP 服务器运行在 67 号端口， DHCP客户运行在 68 号端口。</li></ul><p><strong>DHCP交互过程</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-6f9a9715f8b1c74a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p><strong>DHCP客户端将广播发送DHCP发现报文（DHCP DISCOVER）</strong></p><ul><li><p>事务ID</p></li><li><p>DHCP客户端的MAC地址</p></li></ul><p><strong>封装该报文的IP数据报的源IP地址为0.0.0.0，这是因为主机目前还未分配到IP地址</strong>，因此使用该地址代替</p><p><strong>目的IP地址为广播地址255.255.255.255，之所以广播发送，是因为主机现在并不知道网络中有哪几个DHCP服务器</strong>。它们的IP地址各是什么</p><p><strong>DHCP服务器收到DHCP发现报文后，根据其中封装的DHCP客户端的MAC地址来查找自己的数据库</strong>，如果查到匹配信息，则使用这些配置信息来构建并发送DHCP提供报文，如果没有则采用默认配置信息来构建报文并发送</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-03ecd6d2838d4274.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p><strong>DHCP服务端将广播发送DHCP提供报文（DHCP OFFER）</strong></p><ul><li><p>事务ID：DHCP客户端会与之前DHCP发现报文的事务ID做对比，来判断该DHCP提供报文是否是自己的</p></li><li><p>配置信息：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   IP地址：DHCP服务器从自己的IP地址池中挑选待租用给主机的IP地址（使用ARP来确保所选IP地址未被网络中其他主机占用）  </span><br><span class="line">*   子网掩码</span><br><span class="line">*   地址租期  </span><br><span class="line">*   默认网关  </span><br><span class="line">*   DNS服务器</span><br></pre></td></tr></table></figure><p>源IP地址：发送DHCP提供报文的DHCP服务器的IP</p><p>目的地址：因为目的主机还没分配到IP，所以使用广播地址</p></blockquote><p>在本例中，DHCP客户会收到两个DHCP服务器发来的DHCP提供报文，DHCP客户从中选择一个，一般选择先到的，并向所选择的DHCP服务器发送DHCP请求报文</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-009b1e9a88976880.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p><strong>DHCP客户端将广播发送DHCP请求报文（DHCP REQUEST）</strong></p><ul><li><p>事务ID</p></li><li><p>DHCP客户端的MAC地址</p></li><li><p>接收的租约中的IP地址</p></li><li><p>提供此租约的DHCP服务器端的IP地址</p></li></ul><p>源地址：0.0.0.0，因为此时DHCP客户才从多个DHCP服务器中挑选一个作为自己的DHCP服务器。它首先要征得该服务器的同意，之后才能正式使用向该DHCP服务器租用的IP地址</p><p>目的地址：广播地址，这样可以一次性向所有DHCP服务器发送DHCP请求报文，来告知它们是否请求它们作为自己的DHCP服务器</p></blockquote><p>在本例中，假设DHCP客户端选择DHCP服务器1作为自己的DHCP服务器，DHCP服务器1接受该请求，于是DHCP服务器1给DHCP客户端发送DHCP确认报文</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-35c9002bba766476.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>源地址：DHCP服务器1的IP地址</p><p>目的地址：广播地址</p><p><strong>DHCP客户收到该报文后就可以使用租用的IP地址</strong></p><p><strong>在使用前还会进行ARP检测</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-044fb99d76bd279c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/673/format/webp" alt="img"></p></blockquote><p>剩下流程图示</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a01eacfba40e9098.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="DHCP中继代理"><a href="#DHCP中继代理" class="headerlink" title="DHCP中继代理"></a>DHCP中继代理</h4><p>下图的网络拓扑中的各主机是否可以通过DHCP来自动获取到网络配置？</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-33c64efac75f0ad2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>使用DHCP中继代理是因为我们不用给每一个网络上都设置一个DHCP服务器，这样会使DHCP服务器的数量太多</p></blockquote><h4 id="总结-13"><a href="#总结-13" class="headerlink" title="总结"></a>总结</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-37d8836f5ed85036.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="域名系统DNS"><a href="#域名系统DNS" class="headerlink" title="域名系统DNS"></a>域名系统DNS</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>域名相比IP地址更容易记忆</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-418d77c262da3948.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>因特网是否可以只使用一台DNS服务器？</p><p>不行</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-423a48c721a4a5d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-8dc45fb61122f775.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-31a3076fe8055379.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>名称相同的域名其等级未必相同</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/24878825-4655232a57435f63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c2350ce866abf74e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-aae45d426ec7fa49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-d2652511b6f2280d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0b01d9ca32d995f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-2df66d338296916f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="总结-14"><a href="#总结-14" class="headerlink" title="总结"></a>总结</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-93d3fbaa54195112.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="文件传送协议FTP"><a href="#文件传送协议FTP" class="headerlink" title="文件传送协议FTP"></a>文件传送协议FTP</h3><h4 id="概念-9"><a href="#概念-9" class="headerlink" title="概念"></a>概念</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-df91fe396712c633.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="文件传送协议FTP的应用"><a href="#文件传送协议FTP的应用" class="headerlink" title="文件传送协议FTP的应用"></a>文件传送协议FTP的应用</h4><p>FTP采用C&#x2F;S方式（客户&#x2F;服务器方式）</p><p>FTP客户计算机可将各种类型的文件上传到FTP服务器计算机</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-523d37958c02b33c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1119/format/webp" alt="img"></p><p>FTP客户计算机也可以从FTP服务器计算机下载文件</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-510f63b63db4ba4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1073/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-bd1aca704fbfff6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/421/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-fc1bb372ad88d1f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/677/format/webp" alt="img"></p><h4 id="FTP基本工作原理"><a href="#FTP基本工作原理" class="headerlink" title="FTP基本工作原理"></a>FTP基本工作原理</h4><p>FTP服务器监听熟知端口（端口号为 21），使客户进程能够连接上。</p><p>FTP客户随机选择一个临时端口号与其建立TCP连接，这条TCP连接用于FTP客户与服务器之间传送FTP的相关控制命令（这条连接是FTP客户与服务器之间的命令通道）</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-fe8243f273df1c3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1111/format/webp" alt="img"></p><p>下图为建立数据通道的TCP连接</p><p>FTP服务器使用自己的熟知端口号20与其建立TCP连接，这条TCP连接用于FTP客户与服务器之间传送文件</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-37858686cb4a05aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>上面例子是主动模式：建立数据通道时，FTP服务器主动连接FTP客户</p></blockquote><p>下图实例为被动模式</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-7125f10efdf012e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1023/format/webp" alt="img"></p><p>两种模式对比</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-885981a43745ae55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>注意两种模式都是</p><p>控制连接在整个会话期间保持打开状态</p><p>数据连接传输完毕后就关闭</p></blockquote><h4 id="总结-15"><a href="#总结-15" class="headerlink" title="总结"></a>总结</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-2b566956ff071b24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h3><h4 id="概念-10"><a href="#概念-10" class="headerlink" title="概念"></a>概念</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-905f080fde0331a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="邮件发送和接收过程"><a href="#邮件发送和接收过程" class="headerlink" title="邮件发送和接收过程"></a>邮件发送和接收过程</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a55537e03d980133.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="简单邮件传送协议SMTP（Simple-Mail-Transfer-Protocol）的基本工作原理"><a href="#简单邮件传送协议SMTP（Simple-Mail-Transfer-Protocol）的基本工作原理" class="headerlink" title="简单邮件传送协议SMTP（Simple Mail Transfer Protocol）的基本工作原理"></a>简单邮件传送协议SMTP（Simple Mail Transfer Protocol）的基本工作原理</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-03f4877d2621c261.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="电子邮件的信息格式"><a href="#电子邮件的信息格式" class="headerlink" title="电子邮件的信息格式"></a>电子邮件的信息格式</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-fb16b5ace5466b25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><h4 id="邮件读取"><a href="#邮件读取" class="headerlink" title="邮件读取"></a>邮件读取</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-c825d1ad122bd41c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="基于万维网的电子邮件"><a href="#基于万维网的电子邮件" class="headerlink" title="基于万维网的电子邮件"></a>基于万维网的电子邮件</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-46b15b10a17604fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="总结-16"><a href="#总结-16" class="headerlink" title="总结"></a>总结</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-b400e3f6c0a87238.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><hr><h3 id="万维网WWW"><a href="#万维网WWW" class="headerlink" title="万维网WWW"></a>万维网WWW</h3><h4 id="概念-11"><a href="#概念-11" class="headerlink" title="概念"></a>概念</h4><p><strong>概述</strong></p><ul><li><strong>万维网</strong> WWW (World Wide Web) 并非某种特殊的计算机网络。</li><li>万维网是一个大规模的、联机式的<strong>信息储藏所</strong>。</li><li>万维网用链接的方法能非常方便地从互联网上的一个站点访问另一个站点，从而主动地按需获取丰富的信息。</li><li>这种访问方式称为“<strong>链接</strong>”。</li></ul><p><strong>万维网的工作方式</strong></p><ul><li>万维网以<strong>客户 - 服务器</strong>方式工作。</li><li><strong>浏览器</strong>就是在用户计算机上的万维网<strong>客户程序</strong>。万维网文档所驻留的计算机则运行<strong>服务器程序</strong>，因此这个计算机也称为<strong>万维网服务器</strong>。</li><li>客户程序向服务器程序发出请求，服务器程序向客户程序送回客户所要的<strong>万维网文档</strong>。</li><li>在一个客户程序主窗口上显示出的万维网文档称为<strong>页面</strong> (page)。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-68dbe2651f5e5a80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-8646898df7461ca3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/907/format/webp" alt="img"></p><p><strong>万维网应用举例</strong></p><p>访问网页</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-cd07ed4a1a595490.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>怎样标志分布在整个互联网上的万维网文档？</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-05ae15f55de2ba0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>万维网的文档</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-5240e0cba8fd0a62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="超文本传输协议HTTP（Hyper-Transfer-Protocol）"><a href="#超文本传输协议HTTP（Hyper-Transfer-Protocol）" class="headerlink" title="超文本传输协议HTTP（Hyper Transfer Protocol）"></a>超文本传输协议HTTP（Hyper Transfer Protocol）</h4><h5 id="概念和传输过程"><a href="#概念和传输过程" class="headerlink" title="概念和传输过程"></a>概念和传输过程</h5><ul><li>在万维网客户程序与万维网服务器程序之间进行交互所使用的协议，是<strong>超文本传送协议</strong> HTTP (HyperText Transfer Protocol)。</li><li>HTTP 是一个应用层协议，它使用 TCP 连接进行可靠的传送。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-41e8ed466986db36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><ul><li>每个万维网网点都有一个服务器进程，它不断地<strong>监听 TCP 的端口 80</strong>，以便发现是否有浏览器向它发出连接建立请求。</li><li>一旦监听到连接建立请求并建立了 TCP 连接之后，浏览器就向万维网服务器发出浏览某个页面的请求，服务器接着就返回所请求的页面作为响应。</li><li>最后，TCP 连接就被释放了。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/24878825-614d1960b2b805d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h5><p><strong>HTTP请求报文格式</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-22dfb8a34acf459c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><strong>HTTP响应报文格式</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-0409ca153701fbb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="使用Cookie在服务器上记录用户信息"><a href="#使用Cookie在服务器上记录用户信息" class="headerlink" title="使用Cookie在服务器上记录用户信息"></a>使用Cookie在服务器上记录用户信息</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-969dc15b42399e98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h5 id="万维网缓存与代理服务器"><a href="#万维网缓存与代理服务器" class="headerlink" title="万维网缓存与代理服务器"></a>万维网缓存与代理服务器</h5><p><img src="https://upload-images.jianshu.io/upload_images/24878825-e7f4b696946ffafa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>如果该请求有缓存</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-b0ccf228d3132c12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>如果该请求没有缓存</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-049121882eafde97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>若WEb缓存的命中率比较高</p><p>则会大大减小了该链路上的通信量，因而减少了访问因特网的时延</p></blockquote><p>假设原始服务器的文档被更改，这样代理服务器的文档就不是最新的</p><p>所以原始服务器通常会为每个响应的对象设定一个<strong>修改时间字段</strong>和一个<strong>有效日期字段</strong></p><p>若未过期</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-a5de1829c0777328.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>若过期并且代理服务器的文档和原始服务器的<strong>文档一致</strong>，原始服务器则给代理服务器发送不包含实体主体的响应</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-abf0fcf785757c26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>image-20201024225846863</p><p>若过期并且代理服务器的文档和原始服务器的<strong>文档不一致</strong>，原始服务器则给代理服务器发送封装有该文档的响应报文</p><p><img src="https://upload-images.jianshu.io/upload_images/24878825-14ec3f45c4af32f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h4 id="总结-17"><a href="#总结-17" class="headerlink" title="总结"></a>总结</h4><p><img src="https://upload-images.jianshu.io/upload_images/24878825-dab94fae0e969502.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
